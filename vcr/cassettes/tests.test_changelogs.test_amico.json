{"recorded_with": "betamax/0.8.0", "http_interactions": [{"recorded_at": "2016-12-23T10:27:46", "response": {"body": {"string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"python,redis,friendships\", \n        \"package_url\": \"http://pypi.python.org/pypi/amico\", \n        \"author\": \"David Czarnecki\", \n        \"author_email\": \"dczarnecki@agoragames.com\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"1.0.1\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"# amico\\n\\nRelationships (e.g. friendships) backed by Redis. This is a port of the [amico gem](https://github.com/agoragames/amico).\\n\\n## Installation\\n\\n`pip install amico`\\n\\nMake sure your redis server is running! Redis configuration is outside the scope of this README, but\\ncheck out the [Redis documentation](http://redis.io/documentation).\\n\\n## Usage\\n\\nBe sure to import the Amico library:\\n\\n```python\\nfrom amico import Amico\\n```\\n\\nAmico is configured with a number of defaults:\\n\\n```python\\n>>> Amico.DEFAULTS\\n{'namespace': 'amico', 'pending_follow': False, 'reciprocated_key': 'reciprocated', 'followers_key': 'followers', 'pending_with_key': 'pending_with', 'following_key': 'following', 'page_size': 25, 'pending_key': 'pending', 'blocked_by_key': 'blocked_by', 'default_scope_key': 'default', 'blocked_key': 'blocked'}\\n```\\n\\nThe initializer for Amico takes two optional parameters:\\n\\n* `options` : Dictionary of updated defaults\\n* `redis_connection` : Connection to Redis\\n\\n```python\\n>>> amico = Amico(redis_connection = redis)\\n```\\n\\n```python\\n>>> amico.follow(1, 11)\\n>>> amico.is_following(1, 11)\\nTrue\\n>>> amico.is_following(11, 1)\\nFalse\\n>>> amico.follow(11, 1)\\n>>> amico.is_following(11, 1)\\nTrue\\n>>> amico.following_count(1)\\n1\\n>>> amico.followers_count(1)\\n1\\n>>> amico.unfollow(11, 1)\\n>>> amico.following_count(11)\\n0\\n>>> amico.following_count(1)\\n1\\n>>> amico.is_follower(1, 11)\\nFalse\\n>>> amico.following(1)\\n['11']\\n>>> amico.block(1, 11)\\n>>> amico.is_following(11, 1)\\nFalse\\n>>> amico.is_blocked(1, 11)\\nTrue\\n>>> amico.is_blocked_by(11, 1)\\nTrue\\n>>> amico.unblock(1, 11)\\n>>> amico.is_blocked(1, 11)\\nFalse\\n>>> amico.is_blocked_by(11, 1)\\nFalse\\n>>> amico.follow(11, 1)\\n>>> amico.follow(1, 11)\\n>>> amico.is_reciprocated(1, 11)\\nTrue\\n>>> amico.reciprocated(1)\\n['11']\\n```\\n\\nUse amico (with pending relationships for follow):\\n\\n```python\\n>>> amico = Amico(options = {'pending_follow': True}, redis_connection = redis)\\n>>> amico.follow(1, 11)\\n>>> amico.follow(11, 1)\\n>>> amico.is_pending(1, 11)\\nTrue\\n>>> amico.is_pending_with(11, 1)\\nTrue\\n>>> amico.is_pending(11, 1)\\nTrue\\n>>> amico.is_pending_with(1, 11)\\nTrue\\n>>> amico.accept(1, 11)\\n>>> amico.is_pending(1, 11)\\nFalse\\n>>> amico.is_pending_with(11, 1)\\nFalse\\n>>> amico.is_pending(11, 1)\\nTrue\\n>>> amico.is_pending_with(1, 11)\\nTrue\\n>>> amico.is_following(1, 11)\\nTrue\\n>>> amico.is_following(11, 1)\\nFalse\\n>>> amico.is_follower(11, 1)\\nTrue\\n>>> amico.is_follower(1, 11)\\nFalse\\n>>> amico.accept(11, 1)\\n>>> amico.is_pending(1, 11)\\nFalse\\n>>> amico.is_pending_with(11, 1)\\nFalse\\n>>> amico.is_pending(11, 1)\\nFalse\\n>>> amico.is_pending_with(1, 11)\\nFalse\\n>>> amico.is_following(1, 11)\\nTrue\\n>>> amico.is_following(11, 1)\\nTrue\\n>>> amico.is_follower(11, 1)\\nTrue\\n>>> amico.is_follower(1, 11)\\nTrue\\n>>> amico.is_reciprocated(1, 11)\\nTrue\\n>>> amico.follow(1, 12)\\n>>> amico.is_following(1, 12)\\nFalse\\n>>> amico.is_pending(1, 12)\\nTrue\\n>>> amico.deny(1, 12)\\n>>> amico.is_following(1, 12)\\nFalse\\n>>> amico.is_pending(1, 12)\\nFalse\\n```\\n\\nAll of the calls support a `scope` parameter to allow you to scope the calls to express relationships for different types of things. For example:\\n\\n```python\\n>>> amico = Amico(options = {'default_scope_key': 'user'}, redis_connection = redis)\\n>>> amico.follow(1, 11)\\n>>> amico.is_following(1, 11)\\nTrue\\n>>> amico.is_following(1, 11, scope = 'user')\\nTrue\\n>>> amico.following(1)\\n['11']\\n>>> amico.following(1, scope = 'user')\\n['11']\\n>>> amico.is_following(1, 11, scope = 'project')\\nFalse\\n>>> amico.follow(1, 11, scope = 'project')\\n>>> amico.is_following(1, 11, scope = 'project')\\nTrue\\n>>> amico.following(1, scope = 'project')\\n['11']\\n```\\n\\nYou can retrieve all of a particular type of relationship using the `all(id, type, scope)` call. For example:\\n\\n```python\\n>>> amico.follow(1, 11)\\n>>> amico.follow(1, 12)\\n>>> amico.all(1, 'following')\\n['12', '11']\\n```\\n\\n`type` can be one of 'following', 'followers', 'blocked', 'blocked_by', reciprocated', 'pending' and 'pending_with'. Use this with caution as there may potentially be a large number of items that could be returned from this call.\\n\\nYou can clear all relationships that have been set for an ID by calling `clear(id, scope)`. You may wish to do this if you allow records to be deleted and you wish to prevent orphaned IDs and inaccurate follower/following counts. Note that this clears *all* relationships in either direction - including blocked and pending. An example:\\n\\n```python\\n>>> amico.follow(11, 1)\\n>>> amico.block(12, 1)\\n>>> amico.following(11)\\n['1']\\n>>> amico.blocked(12)\\n['1']\\n>>> amico.clear(1)\\n>>> amico.following(11)\\n[]\\n>>> amico.blocked(12)\\n[]\\n```\\n\\n## FAQ?\\n\\n### Why use Redis sorted sets and not Redis sets?\\n\\nBased on the work I did in developing [leaderboard](https://github.com/agoragames/leaderboard),\\nleaderboards backed by Redis, I know I wanted to be able to page through the various relationships.\\nThis does not seem to be possible given the current set of commands for Redis sets.\\n\\nAlso, by using the \\\"score\\\" in Redis sorted sets that is based on the time of when a relationship\\nis established, we can get our \\\"recent friends\\\". It is possible that the scoring function may be\\nuser-defined in the future to allow for some specific ordering.\\n\\n## Contributing to amico\\n\\n* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet\\n* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it\\n* Fork the project\\n* Start a feature/bugfix branch\\n* Commit and push until you are happy with your contribution\\n* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.\\n* Please try not to mess with the version or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.\\n\\n## Copyright\\n\\nCopyright (c) 2013 David Czarnecki. See LICENSE.txt for further details.\", \n        \"release_url\": \"http://pypi.python.org/pypi/amico/1.0.1\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 1, \n        \"classifiers\": [\n            \"Development Status :: 5 - Production/Stable\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Operating System :: POSIX\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3\", \n            \"Topic :: Communications\", \n            \"Topic :: Software Development :: Libraries\", \n            \"Topic :: Software Development :: Libraries :: Python Modules\", \n            \"Topic :: System :: Distributed Computing\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"amico\", \n        \"license\": \"LICENSE.txt\", \n        \"summary\": \"Relationships (e.g. friendships) backed by Redis.\", \n        \"home_page\": \"https://github.com/agoragames/amico-python\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"1.0.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-01-08T02:34:58\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/02/b0/36582f2cc9fdaaf072bde255f6f7266b26abf07d92633829502ea4fae749/amico-1.0.0.tar.gz\", \n                \"md5_digest\": \"f7ce88dd550aff6d3bcab105ae1c1fd4\", \n                \"downloads\": 2904, \n                \"filename\": \"amico-1.0.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"02/b0/36582f2cc9fdaaf072bde255f6f7266b26abf07d92633829502ea4fae749/amico-1.0.0.tar.gz\", \n                \"size\": 7862\n            }\n        ], \n        \"1.0.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-01-08T05:40:37\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/37/96/0f30e738994ae9f4fd9ebcab5f4c5e9ffad6ec0387239a4cf33c222b7cd9/amico-1.0.1.tar.gz\", \n                \"md5_digest\": \"ed201e0e9adb30221ab25801c708f3f8\", \n                \"downloads\": 3146, \n                \"filename\": \"amico-1.0.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"37/96/0f30e738994ae9f4fd9ebcab5f4c5e9ffad6ec0387239a4cf33c222b7cd9/amico-1.0.1.tar.gz\", \n                \"size\": 7930\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2013-01-08T05:40:37\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/37/96/0f30e738994ae9f4fd9ebcab5f4c5e9ffad6ec0387239a4cf33c222b7cd9/amico-1.0.1.tar.gz\", \n            \"md5_digest\": \"ed201e0e9adb30221ab25801c708f3f8\", \n            \"downloads\": 3146, \n            \"filename\": \"amico-1.0.1.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"37/96/0f30e738994ae9f4fd9ebcab5f4c5e9ffad6ec0387239a4cf33c222b7cd9/amico-1.0.1.tar.gz\", \n            \"size\": 7930\n        }\n    ]\n}", "encoding": "UTF-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/amico/json", "headers": {"X-Frame-Options": ["deny"], "X-PYPI-LAST-SERIAL": ["2535210"], "Access-Control-Allow-Origin": ["*"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Accept-Ranges": ["bytes"], "X-Content-Type-Options": ["nosniff"], "X-Timer": ["S1482488866.128097,VS0,VE0"], "Via": ["1.1 varnish", "1.1 varnish"], "X-Served-By": ["cache-iad2128-IAD, cache-hhn1545-HHN"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Age": ["63303"], "Date": ["Fri, 23 Dec 2016 10:27:46 GMT"], "Fastly-Debug-Digest": ["c8ae9b1545b5197637919149b6d0b7a89f7f8a2edafaaf089dc21658e44f1857"], "Server": ["nginx/1.10.2"], "X-XSS-Protection": ["1; mode=block"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Content-Length": ["9935"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Cache-Hits": ["1, 1"], "Content-Disposition": ["inline"], "X-Cache": ["HIT, HIT"], "Connection": ["keep-alive"], "Cache-Control": ["max-age=600, public"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://pypi.python.org/pypi/amico/json"}}, {"recorded_at": "2016-12-23T10:27:46", "response": {"body": {"base64_string": "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", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/agoragames/amico-python", "headers": {"Content-Encoding": ["gzip"], "Date": ["Fri, 23 Dec 2016 10:27:46 GMT"], "Server": ["GitHub.com"], "X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["54B1D78B:C3EF:F8C54FF:585CFC22"], "Transfer-Encoding": ["chunked"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["X-PJAX", "Accept-Encoding"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Request-Id": ["c3d0e82707bf72a0108dead19f6c9860"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-Content-Type-Options": ["nosniff"], "Status": ["200 OK"], "X-Runtime": ["0.071289"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["a6ede1dd2ff22ccf254f82df49f7e99f"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:27:46 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiZTk2YTJiZjQ5OGFhODM2ODg2ZDRkYWE1OGZmZjc0YTAiLCJzcHlfcmVwbyI6ImFnb3JhZ2FtZXMvYW1pY28tcHl0aG9uIiwic3B5X3JlcG9fYXQiOjE0ODI0ODg4NjYsIl9jc3JmX3Rva2VuIjoidlBsQ3YraEg2TjVXTUdvQ1l3SHdtbGNSQ0hOQm80UjgwQnpEK3FvTHd6cz0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--f6c5fe6b74c807d19819bd562ae58228b9d3d056; path=/; secure; HttpOnly"], "Cache-Control": ["no-cache"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://github.com/agoragames/amico-python"}}, {"recorded_at": "2016-12-23T10:27:47", "response": {"body": {"base64_string": "H4sIAAAAAAAAA1NWcPZw9HN39fF35+JSVlYw1DPQM1TQMDIwNNY1MNQ1MNfk4tJScMusUEgqTVcozyzJUChOLSnJzEtXKMnMTS0uScwtUCjPSM1TSExJAYkWpeYklmTm5xVnZBYU68HNNMAw0zMvsyQzMQekITWxOBUAzajJU4kAAAA=", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/agoragames/amico-python/master/CHANGELOG.md", "headers": {"Content-Encoding": ["gzip"], "Expires": ["Fri, 23 Dec 2016 10:32:46 GMT"], "ETag": ["\"641610751d9091f32bb3b6d19e923ab3826728f3\""], "X-Frame-Options": ["deny"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "X-Cache": ["MISS"], "X-Fastly-Request-ID": ["6900559f6e1a7e86dccdf502a34d379c4e47a7e3"], "Accept-Ranges": ["bytes"], "X-Content-Type-Options": ["nosniff"], "X-Geo-Block-List": [""], "Cache-Control": ["max-age=300"], "Via": ["1.1 varnish"], "Access-Control-Allow-Origin": ["*"], "X-Served-By": ["cache-hhn1541-HHN"], "Content-Type": ["text/plain; charset=utf-8"], "Date": ["Fri, 23 Dec 2016 10:27:46 GMT"], "Source-Age": ["0"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["Authorization,Accept-Encoding"], "X-GitHub-Request-Id": ["C71B4C25:773A:5350879:585CFC22"], "Content-Length": ["131"], "X-Cache-Hits": ["0"], "X-Timer": ["S1482488866.860215,VS0,VE118"], "Connection": ["keep-alive"], "Strict-Transport-Security": ["max-age=31536000"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://raw.githubusercontent.com/agoragames/amico-python/master/CHANGELOG.md"}}]}