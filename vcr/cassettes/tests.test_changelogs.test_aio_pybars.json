{"recorded_with": "betamax/0.8.0", "http_interactions": [{"request": {"method": "GET", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"]}, "body": {"encoding": "utf-8", "string": ""}, "uri": "https://pypi.python.org/pypi/aio_pybars/json"}, "response": {"status": {"message": "OK", "code": 200}, "url": "https://pypi.python.org/pypi/aio_pybars/json", "headers": {"Content-Length": ["6645"], "Connection": ["keep-alive"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Age": ["64618"], "Fastly-Debug-Digest": ["a755bc6a0ba5c97f5a30d43f85551133e87e07555621bb228773650e39bbe9d5"], "Accept-Ranges": ["bytes"], "Via": ["1.1 varnish", "1.1 varnish"], "Content-Disposition": ["inline"], "X-Served-By": ["cache-iad2128-IAD, cache-hhn1540-HHN"], "X-Timer": ["S1482488758.686407,VS0,VE89"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "X-Cache": ["HIT, MISS"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-XSS-Protection": ["1; mode=block"], "X-Cache-Hits": ["1, 0"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Content-Type-Options": ["nosniff"], "Cache-Control": ["max-age=600, public"], "X-Frame-Options": ["deny"], "Date": ["Fri, 23 Dec 2016 10:25:58 GMT"], "Server": ["nginx/1.10.2"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-PYPI-LAST-SERIAL": ["2535168"], "Access-Control-Allow-Origin": ["*"]}, "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": null, \n        \"package_url\": \"http://pypi.python.org/pypi/aio_pybars\", \n        \"author\": \"Roman Rader\", \n        \"author_email\": \"antigluk@gmail.com\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"POSIX\", \n        \"version\": \"0.1.0\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"aio_pybars\\n========\\n\\nQuick Start\\n------------------\\n\\n0. Install::\\n\\n    pip install aio_pybars\\n\\nOR via setup.py::\\n\\n    python setup.py install\\n\\n1. Configure your app::\\n\\n    from aio_pybars import FSTemplateLoader\\n    loop.run_until_complete(aio_pybars.setup(app,\\n                                             templates_dir=config['TEMPLATES_DIR'],\\n                                             Loader=FSTemplateLoader))\\n\\n2. Use templates in the view::\\n\\n    async def index(request):\\n        context = {\\\"var\\\": \\\"value\\\"}\\n        return AIOBarsResponse(request, 'template_name', context)\\n\\nIt will render the `template_name.hbs` template with variables in the `context` to the aiohttp response.\\n\\nHelpers and partials\\n------------------------------------\\n\\nPartial is the nested template that should be included in the specific place.\\nIf the following code occurs in the template::\\n\\n    {{> \\\"sidebar\\\"}}\\n\\npybars3 will search the _partial_ named `sidebar` in the dictionary. How to add your own partial see below.\\n\\nHelper is the callable that can be called from the template. Syntactically it looks same as the variable, but can\\nget the arguments::\\n\\n    <link rel=\\\"shortcut icon\\\" href=\\\"{{asset \\\"favicon.ico\\\"}}\\\">\\n\\nwould call the `asset` callable with \\\"favicon.ico\\\" argument and put the results in the rendered template.\\n\\n*To use your own partials and helpers* implement your subclass of templates loader::\\n\\n    class AppFSTemplateLoader(FSTemplateLoader):\\n        def __init__(self, app, base_dir):\\n            super().__init__(app, base_dir)\\n\\n        def get_partials(self):\\n            \\\"\\\"\\\"\\n            Load all files in the partials/ subdirectory of templates dir.\\n            Method should return the dictionary {'partial_name': <compiled template>, ...}\\n            \\\"\\\"\\\"\\n            partials = super().get_partials()\\n            base_partials = os.path.join(self.app.config['TEMPLATES_DIR'], 'partials')\\n            for name in os.listdir(base_partials):\\n                filename = os.path.splitext(name)[0]\\n                template_source = open(os.path.join(base_partials, name), 'r', encoding='utf8').read()\\n                template = self.compiler.compile(template_source)\\n                partials[filename] = template\\n            return partials\\n\\n        def get_helpers(self):\\n            \\\"\\\"\\\"\\n            Define your own set of helpers.\\n            Method should return the dictionary {'helper_name': <callable>, ...}\\n            \\\"\\\"\\\"\\n            helpers = super().get_helpers()\\n            helpers.update({\\\"asset\\\": _asset})\\n            return helpers\\n\\n\\n    def _asset(options, val, *args, **kwargs):\\n        return \\\"/static/{}\\\".format(val)\\n\\nand pass it as Loader argument to the setup::\\n\\n    loop.run_until_complete(aio_pybars.setup(app,\\n                                             templates_dir=config['TEMPLATES_DIR'],\\n                                             Loader=AppFSTemplateLoader))\\n\\nRecursive rendering of templates\\n--------------------------\\n\\nThe aio_pybars enables templates to be recursive. If the first line of the template contains::\\n\\n    {{!< base_template}}\\n\\nall the rendered template will be passed as variable `body` to the base template.\\n\\nFor example:\\n\\nbase.hbs::\\n\\n    <!DOCTYPE html>\\n    <html>\\n    <head>\\n        <title>Template</title>\\n    </head>\\n    <body>\\n        {{body}}\\n    </body>\\n\\ntest.hbs::\\n\\n    {{!< base}}\\n    Hello, {{name}}.\\n\\nThen result of the `render(loader, 'test', {'name': 'Roma'})` will be::\\n\\n    <!DOCTYPE html>\\n    <html>\\n    <head>\\n        <title>Template</title>\\n    </head>\\n    <body>\\n        Hello, Roma\\n    </body>\", \n        \"release_url\": \"http://pypi.python.org/pypi/aio_pybars/0.1.0\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 0, \n        \"classifiers\": [\n            \"Development Status :: 4 - Beta\", \n            \"Environment :: Web Environment\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: BSD License\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Programming Language :: Python :: 3.5\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"aio_pybars\", \n        \"license\": \"BSD\", \n        \"summary\": \"pybars3 (handlebars) templates rendering for aiohttp.\", \n        \"home_page\": \"https://github.com/rrader/aio_pybars\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-04-19T16:45:34\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/14/ef/e62432c5b998b0151629b53a0b8e6f3f71220fb960d8826c1dedb09b4bb7/aio_pybars-0.1.0.tar.gz\", \n                \"md5_digest\": \"0d38ac946c8d5011b3d93b4ddfe2da76\", \n                \"downloads\": 475, \n                \"filename\": \"aio_pybars-0.1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"14/ef/e62432c5b998b0151629b53a0b8e6f3f71220fb960d8826c1dedb09b4bb7/aio_pybars-0.1.0.tar.gz\", \n                \"size\": 3621\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-04-19T16:45:34\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/14/ef/e62432c5b998b0151629b53a0b8e6f3f71220fb960d8826c1dedb09b4bb7/aio_pybars-0.1.0.tar.gz\", \n            \"md5_digest\": \"0d38ac946c8d5011b3d93b4ddfe2da76\", \n            \"downloads\": 475, \n            \"filename\": \"aio_pybars-0.1.0.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"14/ef/e62432c5b998b0151629b53a0b8e6f3f71220fb960d8826c1dedb09b4bb7/aio_pybars-0.1.0.tar.gz\", \n            \"size\": 3621\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:25:58"}, {"request": {"method": "GET", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"]}, "body": {"encoding": "utf-8", "string": ""}, "uri": "https://github.com/rrader/aio_pybars"}, "response": {"status": {"message": "OK", "code": 200}, "url": "https://github.com/rrader/aio_pybars", "headers": {"X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Served-By": ["50f1f26dee0de4fe7bd3917b0eeb211c"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Runtime": ["0.210493"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Date": ["Fri, 23 Dec 2016 10:25:59 GMT"], "X-GitHub-Request-Id": ["54B1D78B:C3ED:CA22BB9:585CFBB6"], "Server": ["GitHub.com"], "Content-Encoding": ["gzip"], "X-Content-Type-Options": ["nosniff"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:25:59 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiZDgzMDM5NWMyZjlmNjVlNDY4ZTUxNTc4MGZkYTI5NmQiLCJzcHlfcmVwbyI6InJyYWRlci9haW9fcHliYXJzIiwic3B5X3JlcG9fYXQiOjE0ODI0ODg3NTksIl9jc3JmX3Rva2VuIjoiVDNiU1Q5K1JzemduZkpvQ2s1M0I0cFU0eWZQWVdtaEIvbiszVTBFVzl4RT0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--5f28d27dc34668cbc08aca36eb996bd566eceb7e; path=/; secure; HttpOnly"], "Content-Type": ["text/html; charset=utf-8"], "Status": ["200 OK"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-Request-Id": ["1debc83c46d58f7f2f5dbbcdf667f15a"], "X-XSS-Protection": ["1; mode=block"], "X-Frame-Options": ["deny"], "Cache-Control": ["no-cache"], "Transfer-Encoding": ["chunked"]}, "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:25:59"}, {"request": {"method": "GET", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"]}, "body": {"encoding": "utf-8", "string": ""}, "uri": "https://raw.githubusercontent.com/rrader/aio_pybars/master/CHANGES.txt"}, "response": {"status": {"message": "OK", "code": 200}, "url": "https://raw.githubusercontent.com/rrader/aio_pybars/master/CHANGES.txt", "headers": {"Content-Length": ["163"], "Connection": ["keep-alive"], "Accept-Ranges": ["bytes"], "Via": ["1.1 varnish"], "X-GitHub-Request-Id": ["C71B4C16:51AE:2AD4C1E:585CFBB7"], "X-Cache-Hits": ["0"], "X-Timer": ["S1482488759.632848,VS0,VE121"], "Strict-Transport-Security": ["max-age=31536000"], "X-Cache": ["MISS"], "Vary": ["Authorization,Accept-Encoding"], "Expires": ["Fri, 23 Dec 2016 10:30:59 GMT"], "X-Fastly-Request-ID": ["7f860798012b2ae5e53be021027e1a32ab32b397"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["cache-hhn1531-HHN"], "X-Content-Type-Options": ["nosniff"], "Cache-Control": ["max-age=300"], "X-Frame-Options": ["deny"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "Date": ["Fri, 23 Dec 2016 10:25:59 GMT"], "Content-Encoding": ["gzip"], "Source-Age": ["0"], "Content-Type": ["text/plain; charset=utf-8"], "Access-Control-Allow-Origin": ["*"], "ETag": ["\"3132e1e69cecfd2211780493556e48524219efee\""], "X-Geo-Block-List": [""]}, "body": {"base64_string": "H4sIAAAAAAAAA22OwQrCMBBE7/sV8wE2tAqCBw8i+AE9eJXVbm0gZkM2Fvx7g8WLOLd5PIZhr5f0unI2HCeOdwl6p/3fENFZsnmNaF3nWmp+Q9RLEDYZUKVDyj6g262wbrutIwIanHy2gnnZcR/Uy+1Z6ywIyoNk6Ijl0gZFHilwEfuqsQpV4TggiyWNJpgkpMpGrdzrVEpy9AY+amyG2AAAAA==", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:25:59"}]}