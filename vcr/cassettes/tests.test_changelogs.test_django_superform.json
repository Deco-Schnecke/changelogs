{"http_interactions": [{"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/django_superform/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "X-Cache": ["MISS, MISS"], "Accept-Ranges": ["bytes"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Connection": ["keep-alive"], "Server": ["nginx/1.10.2"], "Date": ["Fri, 23 Dec 2016 10:40:42 GMT"], "Age": ["0"], "X-Cache-Hits": ["0, 0"], "Content-Length": ["0"], "X-Frame-Options": ["deny"], "Location": ["/pypi/django-superform/json"], "X-Content-Type-Options": ["nosniff"], "X-Served-By": ["cache-iad2147-IAD, cache-hhn1540-HHN"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Timer": ["S1482489642.159465,VS0,VE104"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["2bece9ab153e989640e06d8099b7dec75b0edb96e907f0e4d80905e22e6af9b0"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://pypi.python.org/pypi/django_superform/json", "body": {"encoding": null, "string": ""}}, "recorded_at": "2016-12-23T10:40:42"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/django-superform/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"Cache-Control": ["max-age=600, public"], "Fastly-Debug-Digest": ["d4eabe4e54c5e37a2a3b3db642936008a05786a3c2e9e9ae9bcbd0a1ac858dbc"], "Via": ["1.1 varnish", "1.1 varnish"], "Connection": ["keep-alive"], "X-Cache-Hits": ["1, 1"], "Date": ["Fri, 23 Dec 2016 10:40:42 GMT"], "X-Served-By": ["cache-iad2133-IAD, cache-hhn1540-HHN"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Access-Control-Allow-Origin": ["*"], "X-Timer": ["S1482489642.291757,VS0,VE0"], "X-XSS-Protection": ["1; mode=block"], "X-PYPI-LAST-SERIAL": ["2535313"], "X-Cache": ["HIT, HIT"], "Accept-Ranges": ["bytes"], "Content-Disposition": ["inline"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Server": ["nginx/1.10.2"], "Age": ["60345"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Length": ["11138"], "X-Frame-Options": ["deny"], "X-Content-Type-Options": ["nosniff"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/django-superform/json", "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"\", \n        \"package_url\": \"http://pypi.python.org/pypi/django-superform\", \n        \"author\": \"Gregor M\\u00fcllegger\", \n        \"author_email\": \"gregor@muellegger.de\", \n        \"download_url\": \"\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"0.3.1\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"django-superform\\n================\\n\\n**Less sucking formsets.**\\n\\n|build| |docs| |package| |gitter|\\n\\nA ``SuperForm`` is absolutely super if you want to nest a lot of forms in each\\nother. Use formsets and nested forms inside the ``SuperForm``. The\\n``SuperForm`` will take care of its children!\\n\\n.. note::\\n    This package is still in rapid development. Some APIs might change in the\\n    future and it's not yet feature complete. The documentation is not yet\\n    complete either, but everything that is documented, is up to date and\\n    should work as stated. If not, then please file a bug.\\n    Every non-backwards compatible change and new features will be documented\\n    in the changelog_.\\n\\n.. _changelog: https://github.com/gregmuellegger/django-superform/tree/master/CHANGES.rst\\n\\nImagine you want to have a view that shows and validates a form and a formset.\\nLet's say you have a signup form where users can enter multiple email\\naddresses. Django provides formsets_ for this usecase, but handling those in a\\nview is usually quite troublesome. You need to validate both the form and the\\nformset manually and you cannot use django's generic FormView_. So here comes\\n**django-superform** into play.\\n\\n.. _formsets: https://docs.djangoproject.com/en/1.6/topics/forms/formsets/\\n.. _FormView: https://docs.djangoproject.com/en/1.6/ref/class-based-views/generic-editing/#formview\\n\\nHere we have an example for the usecase. Let's have a look at the\\n``forms.py``:\\n\\n.. code-block:: python\\n\\n    from django import forms\\n    from django_superform import SuperModelForm, InlineFormSetField\\n    from myapp.models import Account, Email\\n\\n\\n    class EmailForm(forms.ModelForm):\\n        class Meta:\\n            model = Email\\n            fields = ('account', 'email',)\\n\\n\\n    EmailFormSet = modelformset_factory(EmailForm)\\n\\n\\n    class SignupForm(SuperModelForm):\\n        username = forms.CharField()\\n        # The model `Email` has a ForeignKey called `user` to `Account`.\\n        emails = InlineFormSetField(formset_class=EmailFormSet)\\n\\n        class Meta:\\n            model = Account\\n            fields = ('username',)\\n\\n\\nSo we assign the ``EmailFormSet`` as a field directly to the ``SignupForm``.\\nThat's where it belongs! Ok and how do I handle this composite form in the\\nview? Have a look:\\n\\n.. code-block:: python\\n\\n    def post_form(request):\\n        if request.method == 'POST':\\n            form = PostForm(request.POST)\\n            if form.is_valid():\\n                account = form.save()\\n                return HttpResponseRedirect('/success/')\\n        else:\\n            form = PostForm()\\n        return render_to_response('post_form.html', {\\n            'form',\\n        }, context_instance=RequestContext(request))\\n\\n\\nNo, we don't do anything different as we would do without having the\\n``FormSet`` on the ``SignupForm``. That way you are free to implement all the\\nlogic in the form it self where it belongs and use generic views like\\n``CreateView`` you would use them with simple forms. Want an example for this?\\n\\n.. code-block:: python\\n\\n    from django.views.generic import CreateView\\n    from myapp.models import Account\\n    from myapp.forms import SignupForm\\n\\n\\n    class SignupView(CreateView):\\n        model = Account\\n        form_class = SignupForm\\n\\n\\n    urlpatterns = patterns('',\\n        url('^signup/$', SignupView.as_view()),\\n    )\\n\\nAnd it just works.\\n\\nDocumentation\\n-------------\\n\\nFull documentation is available on Read The Docs: https://django-superform.readthedocs.org/\\n\\n----\\n\\nDeveloped by Gregor M\\u00fcllegger in cooperation with Team23_.\\n\\n.. _Team23: http://www.team23.de/\\n\\n.. |build| image:: https://travis-ci.org/gregmuellegger/django-superform.svg?branch=master\\n    :alt: Build Status\\n    :scale: 100%\\n    :target: https://travis-ci.org/gregmuellegger/django-superform\\n.. |docs| image:: https://readthedocs.org/projects/django-superform/badge/?version=latest\\n    :alt: Documentation Status\\n    :scale: 100%\\n    :target: https://django-superform.readthedocs.org/\\n.. |package| image:: https://badge.fury.io/py/django-superform.svg\\n    :alt: Package Version\\n    :scale: 100%\\n    :target: http://badge.fury.io/py/django-superform\\n.. |gitter| image:: https://badges.gitter.im/JoinChat.svg\\n    :alt: Gitter Chat, discuss django-superform with others\\n    :scale: 100%\\n    :target: https://gitter.im/gregmuellegger/django-superform\\n\\n\\nChangelog\\n=========\\n\\n0.3.1\\n-----\\n\\n* ``SuperForm.composite_fields`` dict is not longer shared between form\\n  instances. Every new form instances get's a deep copy. So changes to it\\n  won't leak into other instances of the same form class.\\n\\n0.3.0\\n-----\\n\\n* `#11`_: Fix ``CompositeBoundField`` to allow direct access to nested form\\n  fields via ``form['nested_form']['field']``.\\n* Support for Django's Media handling in nested forms. See `#3`_ and `#5`_.\\n* Do not populate errorlist representations without any errors of nested\\n  formsets into the errors of the super form. See `#5`_ for details.\\n\\n.. _#3: https://github.com/gregmuellegger/django-superform/issues/3\\n.. _#5: https://github.com/gregmuellegger/django-superform/pull/5\\n.. _#11: https://github.com/gregmuellegger/django-superform/issues/11\\n\\n0.2.0\\n-----\\n\\n* Django 1.8 support.\\n* Initial values given to the ``__init__`` method of the super-form will get\\n  passed through to the nested forms.\\n* The ``empty_permitted`` argument for modelforms used in a ``ModelFormField``\\n  is set depending on the ``required`` attribute given to the field.\\n\\n0.1.0\\n-----\\n\\n* Initial release with proof of concept.\", \n        \"release_url\": \"http://pypi.python.org/pypi/django-superform/0.3.1\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 3, \n        \"classifiers\": [\n            \"Development Status :: 3 - Alpha\", \n            \"Environment :: Web Environment\", \n            \"Framework :: Django\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: BSD License\", \n            \"Natural Language :: English\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2\", \n            \"Programming Language :: Python :: 2.6\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"django-superform\", \n        \"license\": \"BSD licence, see LICENSE file\", \n        \"summary\": \"So much easier handling of formsets.\", \n        \"home_page\": \"https://github.com/gregmuellegger/django-superform\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-11-07T11:10:20\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/29/54/3c83facdedc3f473236ba3f3b34d7b12cb9f87ca170fc4cdc72957b04520/django-superform-0.1.0.tar.gz\", \n                \"md5_digest\": \"9b4a71b551b3ce6bc7e9297224e2a675\", \n                \"downloads\": 1677, \n                \"filename\": \"django-superform-0.1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"29/54/3c83facdedc3f473236ba3f3b34d7b12cb9f87ca170fc4cdc72957b04520/django-superform-0.1.0.tar.gz\", \n                \"size\": 12486\n            }\n        ], \n        \"0.3.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-01-12T08:42:36\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/6d/30/9e55ac811fc841dde275085069dddb76bd0a99b7db1507328635905c5c55/django-superform-0.3.0.tar.gz\", \n                \"md5_digest\": \"20d0d60673e18d407dfcaa35c396c04e\", \n                \"downloads\": 432, \n                \"filename\": \"django-superform-0.3.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"6d/30/9e55ac811fc841dde275085069dddb76bd0a99b7db1507328635905c5c55/django-superform-0.3.0.tar.gz\", \n                \"size\": 23956\n            }\n        ], \n        \"0.3.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-01-21T19:06:55\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/c2/a8/e21b160b66031439157a73c2f84b94d2981f6e5c85fcbcfb4bd11580c3d8/django-superform-0.3.1.tar.gz\", \n                \"md5_digest\": \"a00c00cd094d665a8342b820823b1abe\", \n                \"downloads\": 988, \n                \"filename\": \"django-superform-0.3.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"c2/a8/e21b160b66031439157a73c2f84b94d2981f6e5c85fcbcfb4bd11580c3d8/django-superform-0.3.1.tar.gz\", \n                \"size\": 24223\n            }\n        ], \n        \"0.2.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-05-05T09:02:56\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/f2/6d/1994f6526e683e5137f73f08e078d734010ca7e10c99c3a0a67f4336bc1f/django-superform-0.2.0.tar.gz\", \n                \"md5_digest\": \"bbf2372d9fa162bd053479c4e5c56244\", \n                \"downloads\": 2323, \n                \"filename\": \"django-superform-0.2.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"f2/6d/1994f6526e683e5137f73f08e078d734010ca7e10c99c3a0a67f4336bc1f/django-superform-0.2.0.tar.gz\", \n                \"size\": 24232\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-01-21T19:06:55\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/c2/a8/e21b160b66031439157a73c2f84b94d2981f6e5c85fcbcfb4bd11580c3d8/django-superform-0.3.1.tar.gz\", \n            \"md5_digest\": \"a00c00cd094d665a8342b820823b1abe\", \n            \"downloads\": 988, \n            \"filename\": \"django-superform-0.3.1.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"c2/a8/e21b160b66031439157a73c2f84b94d2981f6e5c85fcbcfb4bd11580c3d8/django-superform-0.3.1.tar.gz\", \n            \"size\": 24223\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:40:42"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://github.com/gregmuellegger/django-superform", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "Server": ["GitHub.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-GitHub-Request-Id": ["54B1D78B:C3EF:F8F9B9D:585CFF2A"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Date": ["Fri, 23 Dec 2016 10:40:42 GMT"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["a568c03544f42dddf712bab3bfd562fd"], "X-Frame-Options": ["deny"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Content-Type-Options": ["nosniff"], "X-Request-Id": ["b0358950d38d7838644be56e74336338"], "Vary": ["X-PJAX", "Accept-Encoding"], "Transfer-Encoding": ["chunked"], "X-Runtime": ["0.095798"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:40:42 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiMjc5M2Q5N2U0OGJmMmJhYWFkN2M1NjYwY2VmYjRiZjkiLCJzcHlfcmVwbyI6ImdyZWdtdWVsbGVnZ2VyL2RqYW5nby1zdXBlcmZvcm0iLCJzcHlfcmVwb19hdCI6MTQ4MjQ4OTY0MiwiX2NzcmZfdG9rZW4iOiI5ajVNRDNjdFBONmNTY1ExSkt0UmsxVWN0NFVvbXRsd0t5c1Z3V3hYcTRVPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--8a5afc4fb117888a07090b57068f65b9e8baee49; path=/; secure; HttpOnly"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/gregmuellegger/django-superform", "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:40:42"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://raw.githubusercontent.com/gregmuellegger/django-superform/master/CHANGES.rst", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["C71B4C1C:2B4D:2F86F45:585CFF2A"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-XSS-Protection": ["1; mode=block"], "Date": ["Fri, 23 Dec 2016 10:40:43 GMT"], "Source-Age": ["0"], "X-Cache-Hits": ["0"], "X-Served-By": ["cache-hhn1521-HHN"], "X-Fastly-Request-ID": ["09d1eb3360292bf3fa3f63e93131c74ed25ef840"], "X-Geo-Block-List": [""], "Strict-Transport-Security": ["max-age=31536000"], "Access-Control-Allow-Origin": ["*"], "Vary": ["Authorization,Accept-Encoding"], "X-Timer": ["S1482489643.041159,VS0,VE120"], "Content-Encoding": ["gzip"], "X-Cache": ["MISS"], "Accept-Ranges": ["bytes"], "Cache-Control": ["max-age=300"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "ETag": ["\"51c4d3e94b168a1b04af798c72622f9cf4c1fc4b\""], "Content-Type": ["text/plain; charset=utf-8"], "Content-Length": ["670"], "X-Content-Type-Options": ["nosniff"], "Expires": ["Fri, 23 Dec 2016 10:45:43 GMT"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/gregmuellegger/django-superform/master/CHANGES.rst", "body": {"base64_string": "H4sIAAAAAAAAA6VUsW7bMBDd9RUHZDBQIHJUN4gboEObNECHTO4WBCItXiS2FKmSlF3/fR8pOXHQLRE8WOTdu3vv3ummk7Zl49riy/EpiovyU3lRnKen+EB3+i89Od8HjuTZKvbatqQt3f5CrqOq/FySOKuuRI3or0pRGIfB+ZiyToIWgYRoOdZbN1pVP2k2SoicukZqUZZUA+WauhiHcL1ctjp247ZsXL9sPbf9yMZw27Jfqgx6jjrsU2vLYTRmWV3NGOt3YKwT/VVZzfTBSIhNirlDTMIZXNCRp/aDEKR0E0kHsi6ScRDTU+ikZ0Vbjntmm8UrCIqFKG3DoaTvO/YHsrzPdy83BHkgkyTFPFDjhkNJG0dNHlKg6EhHIO2dXaAYy99IxaGLHaq+oLgnwgkF2fNUoDEyhHJidnHC7KyqRH2dJyzEzZHbtzSfu2k8qaY0xu3B0zOYygYVciuWQwTLmd2kB+20BFQ6e1hMAXV6WTw+LHLE4hEjR+nNfxYB73tWSAdZZWaLndSAbBtm9LwSNSEE/y5FnbBuXRZ/cJigjEzsvfNGh2TXwXNgG2XUzgbaww1uBAl7mKKyVlORxGFyeZhUTRK+BGVBkw9y1LEXdJApKI5SmyRxduDqTQbUIYwclqsJ4/LtJr6c96B6TxtVlfzy8dQvz7u8Pq54kv+H1VFLQztpxmRhvYPnZ/2EqGuN+7qGlXqG+uqVmOfZnnttTLI+RjDAqBh47Lwb2+4I88oGKPkzQ3M/xEMNlF5HXKOC9O3YY9x5Jr1TbHIKjQkTdkrevE/HaZlnh6fNDJQ+booHfN6S85ydu/f8Z4TvM3aMXm9H+OsVw+zqvFrVqVRHUTxjTQNn59HgHcjj1zjs6QD1/gH9rS21fwUAAA==", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:40:43"}], "recorded_with": "betamax/0.8.0"}