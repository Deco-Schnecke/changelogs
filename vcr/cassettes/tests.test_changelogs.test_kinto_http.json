{"http_interactions": [{"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/kinto_http/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "X-Cache": ["MISS, MISS"], "Accept-Ranges": ["bytes"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Connection": ["keep-alive"], "Server": ["nginx/1.10.2"], "Date": ["Fri, 23 Dec 2016 10:42:29 GMT"], "Age": ["0"], "X-Cache-Hits": ["0, 0"], "Content-Length": ["0"], "X-Frame-Options": ["deny"], "Location": ["/pypi/kinto-http/json"], "X-Content-Type-Options": ["nosniff"], "X-Served-By": ["cache-iad2136-IAD, cache-hhn1530-HHN"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Timer": ["S1482489749.369614,VS0,VE110"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["250b5d40743ef3e620775ffc937541783e22e4f8c0fae8b10411c3846e3fb2f2"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://pypi.python.org/pypi/kinto_http/json", "body": {"encoding": null, "string": ""}}, "recorded_at": "2016-12-23T10:42:29"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/kinto-http/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"Cache-Control": ["max-age=600, public"], "Fastly-Debug-Digest": ["66916434a31d3ea0e06059ff8cd0807f6acb02033666e3c12021cba3e0460e1d"], "Via": ["1.1 varnish", "1.1 varnish"], "Connection": ["keep-alive"], "X-Cache-Hits": ["1, 1"], "Date": ["Fri, 23 Dec 2016 10:42:29 GMT"], "X-Served-By": ["cache-iad2124-IAD, cache-hhn1530-HHN"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Access-Control-Allow-Origin": ["*"], "X-Timer": ["S1482489749.506449,VS0,VE0"], "X-XSS-Protection": ["1; mode=block"], "X-PYPI-LAST-SERIAL": ["2534788"], "X-Cache": ["HIT, HIT"], "Accept-Ranges": ["bytes"], "Content-Disposition": ["inline"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Server": ["nginx/1.10.2"], "Age": ["75659"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Length": ["20519"], "X-Frame-Options": ["deny"], "X-Content-Type-Options": ["nosniff"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/kinto-http/json", "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"web services\", \n        \"package_url\": \"http://pypi.python.org/pypi/kinto-http\", \n        \"author\": \"Mozilla Services\", \n        \"author_email\": \"storage@mozilla.com\", \n        \"download_url\": \"\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"7.0.0\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"Kinto python client\\n###################\\n\\n.. image:: https://img.shields.io/travis/Kinto/kinto-http.py.svg\\n        :target: https://travis-ci.org/Kinto/kinto-http.py\\n\\n.. image:: https://img.shields.io/pypi/v/kinto-http.svg\\n        :target: https://pypi.python.org/pypi/kinto-http\\n\\n.. image:: https://coveralls.io/repos/Kinto/kinto-http.py/badge.svg?branch=master\\n        :target: https://coveralls.io/r/Kinto/kinto-http.py\\n\\n\\nKinto is a service that allows users to store and synchronize arbitrary data,\\nattached to a user account. Its primary interface is HTTP.\\n\\n*kinto-http* is a Python library that eases the interactions with\\na *Kinto* server instance. `A project with related goals is\\nalso available for JavaScript <https://github.com/kinto/kinto-http.js>`_.\\n\\n\\nInstallation\\n============\\n\\nUse pip::\\n\\n  $ pip install kinto-http\\n\\n\\nUsage\\n=====\\n\\n.. note::\\n\\n    Operations are always performed directly on the server, and no\\n    synchronisation features have been implemented yet.\\n\\n- The first version of this API doesn't cache any access nor provides any\\n  refresh mechanism. If you want to be sure you have the latest data available,\\n  issue another call.\\n\\nHere is an overview of what the API provides:\\n\\n.. code-block:: python\\n\\n    from kinto_http import Client\\n\\n    client = Client(server_url=\\\"http://localhost:8888/v1\\\",\\n                    auth=('alexis', 'p4ssw0rd'))\\n\\n    records = client.get_records(bucket='default', collection='todos')\\n    for i, record in enumerate(records):\\n        record['title'] = 'Todo #%d' %i\\n\\n    for record in records:\\n        client.update_record(record)\\n\\nCreating a client\\n-----------------\\n\\nThe passed `auth` parameter is a `requests <http://docs.python-requests.org>`_\\nauthentication policy, allowing authenticating using whatever scheme fits you\\nbest.\\n\\nBy default, Kinto supports\\n`Firefox Accounts <https://wiki.mozilla.org/Identity/Firefox_Accounts>`_ and\\nBasic authentication policies.\\n\\n.. code-block:: python\\n\\n    from kinto_http import Client\\n    credentials = ('alexis', 'p4ssw0rd')\\n\\n    client = Client(server_url='http://localhost:8888/v1',\\n                    auth=credentials)\\n\\nIt is also possible to pass the bucket and the collection to the client\\nat creation time, so that this value will be used by default.\\n\\n.. code-block:: python\\n\\n    client = Client(bucket=\\\"payments\\\", collection=\\\"receipts\\\", auth=auth)\\n\\n\\nGetting server information\\n--------------------------\\n\\nYou can use the ``server_info`` method to get the server information:\\n\\n.. code-block:: python\\n\\n    from kinto_http import Client\\n\\n    client = Client(server_url='http://localhost:8888/v1')\\n    info = client.server_info()\\n    assert 'schema' in info['capabilities'], \\\"Server doesn't support schema validation.\\\"\\n\\n\\nHandling buckets\\n----------------\\n\\nAll operations are rooted in a bucket. It makes little sense for\\none application to handle multiple buckets at once (but it is possible).\\nIf no specific bucket name is provided, the \\\"default\\\" bucket is used.\\n\\n.. code-block:: python\\n\\n    from kinto_http import Client\\n    credentials = ('alexis', 'p4ssw0rd')\\n\\n    client = Client(server_url='http://localhost:8888/v1',\\n                    auth=credentials)\\n    client.create_bucket('payments')\\n    client.get_bucket('payments')\\n\\n    # It is also possible to manipulate bucket permissions (see later)\\n    client.update_bucket('payments', permissions={})\\n\\n    # Or delete a bucket and everything under.\\n    client.delete_bucket('payment')\\n\\n    # Or even every writable buckets.\\n    client.delete_buckets()\\n\\nGroups\\n------\\n\\nA group associates a name to a list of principals. It is useful in order to handle permissions. \\n\\n.. code-block:: python\\n\\n    client.create_group('receipts', bucket='payments', data={'members': ['blah', 'foo']})\\n\\n    # Or get an existing one.\\n    group = client.get_group('receipts', bucket='payments')\\n\\n    # To delete an existing group.\\n    client.delete_group('receipts', bucket='payments')\\n\\n    # Or all groups in a bucket.\\n    client.delete_groups(bucket='payments')\\n\\n\\nCollections\\n-----------\\n\\nA collection is where records are stored.\\n\\n.. code-block:: python\\n\\n    client.create_collection('receipts', bucket='payments')\\n\\n    # Or get an existing one.\\n    collection = client.get_collection('receipts', bucket='payments')\\n\\n    # To delete an existing collection.\\n    client.delete_collection('receipts', bucket='payments')\\n\\n    # Or every collections in a bucket.\\n    client.delete_collections(bucket='payments')\\n\\nRecords\\n-------\\n\\nRecords can be retrieved from and saved to collections.\\n\\nA record is a dict with the \\\"permissions\\\" and \\\"data\\\" keys.\\n\\n.. code-block:: python\\n\\n    # You can pass a python dictionary to create the record\\n    # bucket='default' can be omitted since it's the default value\\n\\n    client.create_record(data={'id': 1234, status: 'done', title: 'Todo #1'},\\n                         collection='todos', bucket='default')\\n\\n    # Retrieve all records.\\n    records = client.get_records(collection='todos', bucket='default')\\n\\n    # Retrieve records timestamp.\\n    records_timestamp = client.get_records_timestamp(collection='todos', bucket='default')\\n\\n    # Retrieve a specific record and update it.\\n    record = client.get_record('89881454-e4e9-4ef0-99a9-404d95900352',\\n                               collection='todos', bucket='default')\\n    client.update_record(record, collection='todos', bucket='default')\\n\\n    # Update multiple records at once.\\n    client.update_records(records, collection='todos')\\n\\n    # It is also possible to delete a record.\\n    client.delete_record(id='89881454-e4e9-4ef0-99a9-404d95900352',\\n                         collection='todos')\\n\\n    # Or every records of a collection.\\n    client.delete_records(collection='todos')\\n\\nPermissions\\n-----------\\n\\n By default, authors will get read and write access to the manipulated objects.\\n It is possible to change this behavior by passing a dict to the `permissions`\\n parameter.\\n\\n .. code-block:: python\\n\\n    client.create_record(\\n        data={'foo': 'bar'},\\n        permissions={'read': ['group:groupid']},\\n        collection='todos')\\n\\n.. note::\\n\\n    Every creation or modification operation on a distant object can be given\\n    a `permissions` parameter.\\n\\nBuckets, collections and records have permissions which can be edited.\\nFor instance to give access to \\\"leplatrem\\\" to a specific record, you would do:\\n\\n.. code-block:: python\\n\\n  record = client.get_record(1234, collection='todos', bucket='alexis')\\n  record['permissions']['write'].append('leplatrem')\\n  client.update_record(record)\\n\\n  # During creation, it is possible to pass the permissions dict.\\n  client.create_record(data={'foo': 'bar'}, permissions={})\\n\\nGet or create\\n-------------\\n\\nIn some cases, you might want to create a bucket, collection, group or record only if\\nit doesn't exist already. To do so, you can pass the ``if_not_exists=True``\\nto the ``create_*`` methods::\\n\\n  client.create_bucket('bucket', if_not_exists=True)\\n\\nDelete\\n------\\n\\nIn some cases, you might want to delete a bucket, collection, group or record only if\\nit exists already. To do so, you can pass the ``if_exists=True``\\nto the ``delete_*`` methods::\\n\\n  client.delete_bucket('bucket', if_exists=True)\\n\\nOverwriting existing objects\\n----------------------------\\n\\nMost of the methods take a ``safe`` argument, which defaults to ``True``. If set\\nto ``True`` and a ``if_match`` field is present in the passed ``data``, then a\\ncheck will be added to the requests to ensure the record wasn't modified on\\nthe server side in the meantime.\\n\\nBatching operations\\n-------------------\\n\\nRather than issuing a request for each and every operation, it is possible to\\nbatch the requests. The client will then issue as little requests as possible.\\n\\nCurrently, batching operations only supports write operations, so it is not\\npossible to do the retrieval of information inside a batch.\\n\\nIt is possible to do batch requests using a Python context manager (``with``):\\n\\n.. code-block:: python\\n\\n  with client.batch() as batch:\\n      for idx in range(0,100):\\n          batch.update_record(data={'id': idx})\\n\\nA batch object shares the same methods as another client.\\n\\nRetry on error\\n--------------\\n\\nWhen the server is throttled (under heavy load or maintenance) it can\\nreturn error responses.\\n\\nThe client can hence retry to send the same request until it succeeds.\\nTo enable this, specify the number of retries on the client:\\n\\n.. code-block:: python\\n\\n  client = Client(server_url='http://localhost:8888/v1',\\n                  auth=credentials,\\n                  retry=10)\\n\\nThe Kinto protocol lets the server `define the duration in seconds between retries\\n<https://kinto.readthedocs.io/en/latest/api/1.x/backoff.html>`_.\\nIt is possible (but not recommended) to force this value in the clients:\\n\\n.. code-block:: python\\n\\n  client = Client(server_url='http://localhost:8888/v1',\\n                  auth=credentials,\\n                  retry=10,\\n                  retry_after=5)\\n\\n\\nGenerating endpoint paths\\n-------------------------\\n\\nYou may want to generate some endpoint paths, you can use the\\nget_endpoint utility to do so:\\n\\n.. code-block:: python\\n\\n    client = Client(server_url='http://localhost:8888/v1',\\n                    auth=('token', 'your-token'),\\n                    bucket=\\\"payments\\\",\\n                    collection=\\\"receipts\\\")\\n    print(client.get_endpoint(\\\"record\\\",\\n                              id=\\\"c6894b2c-1856-11e6-9415-3c970ede22b0\\\"))\\n\\n    # '/buckets/payments/collections/receipts/records/c6894b2c-1856-11e6-9415-3c970ede22b0'\\n\\n\\nCommand-line scripts\\n--------------------\\n\\nIn order to have common arguments and options for scripts, some utilities are provided\\nto ease configuration and initialization of client from command-line arguments.\\n\\n.. code-block:: python\\n\\n  import argparse\\n  import logging\\n\\n  from kinto_http import cli_utils\\n\\n  logger = logging.getLogger(__name__)\\n\\n  if __name__ == \\\"__main__\\\":\\n      parser = argparse.ArgumentParser(description=\\\"Download records\\\")\\n      cli_utils.set_parser_server_options(parser)\\n\\n      args = parser.parse_args()\\n\\n      cli_utils.setup_logger(logger, args)\\n\\n      logger.debug(\\\"Instantiate Kinto client.\\\")\\n      client = cli_utils.create_client_from_args(args)\\n\\n      logger.info(\\\"Fetch records.\\\")\\n      records = client.get_records()\\n      logger.warn(\\\"%s records.\\\" % len(records))\\n\\nThe script now accepts basic options:\\n\\n::\\n\\n  $ python example.py --help\\n\\n  usage: example.py [-h] [-s SERVER] [-a AUTH] [-b BUCKET] [-c COLLECTION] [-v]\\n                    [-q] [-D]\\n\\n  Download records\\n\\n  optional arguments:\\n    -h, --help            show this help message and exit\\n    -s SERVER, --server SERVER\\n                          The location of the remote server (with prefix)\\n    -a AUTH, --auth AUTH  BasicAuth token:my-secret\\n    -b BUCKET, --bucket BUCKET\\n                          Bucket name.\\n    -c COLLECTION, --collection COLLECTION\\n                          Collection name.\\n    -v, --verbose         Show all messages.\\n    -q, --quiet           Show only critical errors.\\n    -D, --debug           Show all messages, including debug messages.\\n\\n\\nRun tests\\n=========\\n\\nIn one terminal, run a Kinto server:\\n\\n::\\n\\n    $ make runkinto\\n\\nIn another, run the tests against it:\\n\\n::\\n\\n    $ make tests\", \n        \"release_url\": \"http://pypi.python.org/pypi/kinto-http/7.0.0\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 3, \n        \"requires_dist\": [\n            \"requests (>=2.8.1)\", \n            \"six\", \n            \"unidecode\"\n        ], \n        \"classifiers\": [\n            \"License :: OSI Approved :: Apache Software License\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Programming Language :: Python :: Implementation :: CPython\", \n            \"Topic :: Internet :: WWW/HTTP\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"kinto-http\", \n        \"license\": \"Apache License (2.0)\", \n        \"summary\": \"Kinto client\", \n        \"home_page\": \"https://github.com/Kinto/kinto-http.py/\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"6.2.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-08T09:58:30\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/ed/cf/ffec089f266c2097da833b0afa5a99b71e54fdf36f587ed4bbb0d389633d/kinto-http-6.2.1.tar.gz\", \n                \"md5_digest\": \"2bccd8e2afe937eeee13c2da0bd32936\", \n                \"downloads\": 292, \n                \"filename\": \"kinto-http-6.2.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"ed/cf/ffec089f266c2097da833b0afa5a99b71e54fdf36f587ed4bbb0d389633d/kinto-http-6.2.1.tar.gz\", \n                \"size\": 30393\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-08T09:58:28\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/6f/69/278b324c7fa57fc2c91df54d539936f7a8809e4b79a31c7ac05362127165/kinto_http-6.2.1-py2.py3-none-any.whl\", \n                \"md5_digest\": \"3b5f83d18015c3d4289ebc8d95273d01\", \n                \"downloads\": 223, \n                \"filename\": \"kinto_http-6.2.1-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"6f/69/278b324c7fa57fc2c91df54d539936f7a8809e4b79a31c7ac05362127165/kinto_http-6.2.1-py2.py3-none-any.whl\", \n                \"size\": 33511\n            }\n        ], \n        \"7.0.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-30T12:12:11\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/30/90/32e15fc2587a3b71359b4da00fbb323ccd00d96d034cbedd4918e613bc6d/kinto-http-7.0.0.tar.gz\", \n                \"md5_digest\": \"240367c4b9214855790f413e4bc947c3\", \n                \"downloads\": 62, \n                \"filename\": \"kinto-http-7.0.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"30/90/32e15fc2587a3b71359b4da00fbb323ccd00d96d034cbedd4918e613bc6d/kinto-http-7.0.0.tar.gz\", \n                \"size\": 28317\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-30T12:12:08\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/ed/46/c6d13b6cf3ab7f98b2b169d7a63591a5ee85adcb3a24488e9df3f350d049/kinto_http-7.0.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"06d04e1edcded0a7a129409aff8db30f\", \n                \"downloads\": 630, \n                \"filename\": \"kinto_http-7.0.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"ed/46/c6d13b6cf3ab7f98b2b169d7a63591a5ee85adcb3a24488e9df3f350d049/kinto_http-7.0.0-py2.py3-none-any.whl\", \n                \"size\": 34421\n            }\n        ], \n        \"6.0.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-06-10T10:33:59\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/59/62/5fed0741ac447cf7c878cd9222b68e4d53d2ef343bca07f934132ab7d0b2/kinto-http-6.0.0.tar.gz\", \n                \"md5_digest\": \"5187cc8f6cfd0dd934d4263aee5bee0b\", \n                \"downloads\": 313, \n                \"filename\": \"kinto-http-6.0.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"59/62/5fed0741ac447cf7c878cd9222b68e4d53d2ef343bca07f934132ab7d0b2/kinto-http-6.0.0.tar.gz\", \n                \"size\": 29126\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-06-10T10:33:55\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/4f/26/3a272ef4c5cacc758ef133c0c5929a685633529bd722f969347bad9e8559/kinto_http-6.0.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"466928d0261c0ac05cc1daf5128efe7d\", \n                \"downloads\": 124, \n                \"filename\": \"kinto_http-6.0.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"4f/26/3a272ef4c5cacc758ef133c0c5929a685633529bd722f969347bad9e8559/kinto_http-6.0.0-py2.py3-none-any.whl\", \n                \"size\": 32394\n            }\n        ], \n        \"6.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-08-04T14:50:18\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/3e/3b/23fc30fae4065b5963856d65d71adb93ad9eefb3dceabb9315e7e59ee8d7/kinto-http-6.1.0.tar.gz\", \n                \"md5_digest\": \"4b80324dc7fc4abaef35e065b21a6681\", \n                \"downloads\": 270, \n                \"filename\": \"kinto-http-6.1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"3e/3b/23fc30fae4065b5963856d65d71adb93ad9eefb3dceabb9315e7e59ee8d7/kinto-http-6.1.0.tar.gz\", \n                \"size\": 29346\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-08-04T14:50:15\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/4e/1e/42e4c5775e6613cb5b579a1494cd7a032ed7977ef1beb74a0d8e56daa891/kinto_http-6.1.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"eac19d8d72409badb0f27af353acf10b\", \n                \"downloads\": 519, \n                \"filename\": \"kinto_http-6.1.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"4e/1e/42e4c5775e6613cb5b579a1494cd7a032ed7977ef1beb74a0d8e56daa891/kinto_http-6.1.0-py2.py3-none-any.whl\", \n                \"size\": 32691\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-09-30T12:12:11\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/30/90/32e15fc2587a3b71359b4da00fbb323ccd00d96d034cbedd4918e613bc6d/kinto-http-7.0.0.tar.gz\", \n            \"md5_digest\": \"240367c4b9214855790f413e4bc947c3\", \n            \"downloads\": 62, \n            \"filename\": \"kinto-http-7.0.0.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"30/90/32e15fc2587a3b71359b4da00fbb323ccd00d96d034cbedd4918e613bc6d/kinto-http-7.0.0.tar.gz\", \n            \"size\": 28317\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-09-30T12:12:08\", \n            \"comment_text\": \"\", \n            \"python_version\": \"py2.py3\", \n            \"url\": \"https://pypi.python.org/packages/ed/46/c6d13b6cf3ab7f98b2b169d7a63591a5ee85adcb3a24488e9df3f350d049/kinto_http-7.0.0-py2.py3-none-any.whl\", \n            \"md5_digest\": \"06d04e1edcded0a7a129409aff8db30f\", \n            \"downloads\": 630, \n            \"filename\": \"kinto_http-7.0.0-py2.py3-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"ed/46/c6d13b6cf3ab7f98b2b169d7a63591a5ee85adcb3a24488e9df3f350d049/kinto_http-7.0.0-py2.py3-none-any.whl\", \n            \"size\": 34421\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:42:29"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://github.com/Kinto/kinto-http.py", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "Server": ["GitHub.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-GitHub-Request-Id": ["54B1D78B:C3ED:CA58C9B:585CFF95"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Date": ["Fri, 23 Dec 2016 10:42:30 GMT"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["ea1e1d06ad877450adf08d122b863cf0"], "X-Frame-Options": ["deny"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Content-Type-Options": ["nosniff"], "X-Request-Id": ["7a1ec874fbdc2ff536fcbfc1036b51ec"], "Vary": ["X-PJAX", "Accept-Encoding"], "Transfer-Encoding": ["chunked"], "X-Runtime": ["0.340445"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:42:30 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiZDUzMjc0NjFmZTk1MjI0NDViODJiYjJiZGJkMTRhYjkiLCJzcHlfcmVwbyI6IktpbnRvL2tpbnRvLWh0dHAucHkiLCJzcHlfcmVwb19hdCI6MTQ4MjQ4OTc0OSwiX2NzcmZfdG9rZW4iOiJkVXI2NTVkZ2pRZGFnZk5iVDE5c0MwdVFhZFd2NTZWMDdIRkV4U29pcFRrPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--3498f929544724b92238cf79f2503a34a830ca65; path=/; secure; HttpOnly"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/Kinto/kinto-http.py", "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:42:30"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://raw.githubusercontent.com/Kinto/kinto-http.py/master/CHANGELOG.rst", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["C71B4C26:73BD:3B6A91D:585CFF96"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-XSS-Protection": ["1; mode=block"], "Date": ["Fri, 23 Dec 2016 10:42:30 GMT"], "Source-Age": ["0"], "X-Cache-Hits": ["0"], "X-Served-By": ["cache-hhn1531-HHN"], "X-Fastly-Request-ID": ["36a946960d96beaebcee6dddd00b3a6104207e73"], "X-Geo-Block-List": [""], "Strict-Transport-Security": ["max-age=31536000"], "Access-Control-Allow-Origin": ["*"], "Vary": ["Authorization,Accept-Encoding"], "X-Timer": ["S1482489750.553421,VS0,VE119"], "Content-Encoding": ["gzip"], "X-Cache": ["MISS"], "Accept-Ranges": ["bytes"], "Cache-Control": ["max-age=300"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "ETag": ["\"ff818882688e2f9d3d5502d49adfe5f148174cbb\""], "Content-Type": ["text/plain; charset=utf-8"], "Content-Length": ["1682"], "X-Content-Type-Options": ["nosniff"], "Expires": ["Fri, 23 Dec 2016 10:47:30 GMT"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/Kinto/kinto-http.py/master/CHANGELOG.rst", "body": {"base64_string": "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", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:42:30"}], "recorded_with": "betamax/0.8.0"}