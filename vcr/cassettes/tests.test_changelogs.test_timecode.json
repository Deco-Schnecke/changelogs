{"http_interactions": [{"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/timecode/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"Cache-Control": ["max-age=600, public"], "Fastly-Debug-Digest": ["15d341ecc42867cfc73a750835f9c01f55d43cb89f4b39171b44e2378833dad5"], "Via": ["1.1 varnish", "1.1 varnish"], "Connection": ["keep-alive"], "X-Cache-Hits": ["1, 1"], "Date": ["Fri, 23 Dec 2016 10:45:22 GMT"], "X-Served-By": ["cache-iad2139-IAD, cache-hhn1525-HHN"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Access-Control-Allow-Origin": ["*"], "X-Timer": ["S1482489922.137987,VS0,VE0"], "X-XSS-Protection": ["1; mode=block"], "X-PYPI-LAST-SERIAL": ["2535587"], "X-Cache": ["HIT, HIT"], "Accept-Ranges": ["bytes"], "Content-Disposition": ["inline"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Server": ["nginx/1.10.2"], "Age": ["49176"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Length": ["7842"], "X-Frame-Options": ["deny"], "X-Content-Type-Options": ["nosniff"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/timecode/json", "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"video,timecode,smpte\", \n        \"package_url\": \"http://pypi.python.org/pypi/timecode\", \n        \"author\": \"['Erkan Ozgur Yilmaz']\", \n        \"author_email\": \"eoyilmaz@gmail.com\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"0.3.0\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"About\\n-----\\n\\nPython Module for manipulating SMPTE timecode. Supports 23.98, 24, 25, 29.97,\\n30, 50, 59.94, 60 frame rates and milliseconds (1000 fps).\\n\\nThis library is a fork of the original PyTimeCode python library. You should\\nnot use the two library together (PyTimeCode is not maintained and has known\\nbugs).\\n\\nThe math behind the drop frame calculation is based on the\\n`blog post of David Heidelberger`_ .\\n\\n.. _`blog post of David Heidelberger`: http://www.davidheidelberger.com/blog/?p=29\\n\\nSimple math operations like, addition, subtraction, multiplication or division\\nwith an integer value or with a timecode is possible. Math operations between\\ntimecodes with different frame rates are supported. So::\\n\\n    from timecode import Timecode\\n  \\n    tc1 = Timecode('29.97', '00:00:00:00')\\n    tc2 = Timecode('24', '00:00:00:10')\\n    tc3 = tc1 + tc2\\n    assert tc3.framerate == '29.97'\\n    assert tc3.frames == 12\\n    assert tc3 == '00:00:00:11'\\n\\nCreating a Timecode instance with a start timecode of '00:00:00:00' will\\nresult a timecode object where the total number of frames is 1. So::\\n\\n    tc4 = Timecode('24', '00:00:00:00')\\n    assert tc4.frames == 1\\n\\nUse the ``frame_number`` attribute if you want to get a 0 based frame number::\\n\\n    assert tc4.frame_number == 0\\n\\nFrame rates 29.97 and 59.94 are always drop frame, and all the others are non\\ndrop frame.\\n\\nThe SMPTE standard limits the timecode with 24 hours. Even though, Timecode\\ninstance will show the current timecode inline with the SMPTE standard, it will\\nkeep counting the total frames without clipping it.\\n\\nPlease report any bugs to the `GitHub`_ page.\\n\\n.. _`GitHub`: https://github.com/eoyilmaz/timecode\\n\\nCopyright 2014 Joshua Banton and PyTimeCode developers.\\n\\n\\n=======\\nChanges\\n=======\\n\\n0.3.0\\n=====\\n\\n* **New:** Renamed the library to ``timecode``.\\n\\n0.2.0\\n=====\\n\\n* **New:** Rewritten the whole library from scratch.\\n\\n* **New:** Most important change is the licencing. There was now license\\n  defined in the previous implementation. The library is now licensed under MIT\\n  license.\\n\\n* **Update:** Timecode.__init__() arguments has been changed, removed the\\n  unnecessary ``drop_frame``, ``iter_returns`` arguments.\\n  \\n  Drop frame can be interpreted from the ``framerate`` argument and\\n  ``iter_returns`` is unnecessary cause any iteration on the object will return\\n  another ``Timecode`` instance.\\n\\n  If you want to get a string representation use ``Timecode.__str__()`` or\\n  ``str(Timecode)`` or ``Timecode.__repr__()`` or ``\\\\`Timecode\\\\``` or\\n  ``'%s' % Timecode`` any other thing that will convert it to a string.\\n\\n  If you want to get an integer use ``Timecode.frames`` or\\n  ``Timecode.frame_count`` depending on what you want to get out of it.\\n\\n  So setting the ``iter_returns`` to something and nailing the output was\\n  unnecessary.\\n\\n* **Update:** Updated the drop frame calculation to a much better one, which\\n  is based on to the blog post of David Heidelberger at\\n  http://www.davidheidelberger.com/blog/?p=29\\n\\n* **New:** Added ``Timecode.__eq__()`` so it is now possible to check the\\n  equality of two timecode instances or a timecode and a string or a timecode\\n  and an integer (which will check the total frame count).\\n\\n* **Update:** ``Timecode.tc_to_frames()`` now needs a timecode as a string\\n  and will return an integer value which is the number of frames in that\\n  timecode.\\n\\n* **Update:** ``Timecode.frames_to_tc()`` now needs an integer frame count\\n  and returns 4 integers for hours, minutes, seconds and frames.\\n\\n* **Update:** ``Timecode.hrs``, ``Timecode.mins``, ``Timecode.secs`` and\\n  ``Timecode.frs`` attributes are now properties. Because it was so rare to\\n  check the individual hours, minutes, seconds or frame values, their values\\n  are calculated with ``Timecode.frames_to_tc()`` method. But in future they\\n  can still be converted to attributes and their value will be updated each\\n  time the ``Timecode.frames`` attribute is changed (so add a ``_frames``\\n  attribute and make ``frames`` a property with a getter and setter, and update\\n  the hrs, mins, secs and frs in setter etc.).\\n\\n* **Update:** Removed ``Timecode.calc_drop_frame()`` method. The drop frame\\n  calculation is neatly done inside ``Timecode.frames_to_tc()`` and\\n  ``Timecode.tc_to_frames()`` methods.\\n\\n* **Update:** Updated ``Timecode.parse_timecode()`` method to a much simpler\\n  algorithm.\\n\\n* **Update:** Removed ``Timecode.__return_item__()`` method. It is not\\n  necessary to return an item in that way anymore.\\n\\n* **Update:** Removed ``Timecode.make_timecode()`` method. It was another\\n  unnecessary method, so it is removed. Now using simple python string\\n  templates for string representations.\\n\\n* **New:** Added ``timecode.__version__`` string, and set the value to\\n  \\\"0.2.0\\\".\\n\\n* **Update:** Removed ``Timecode.set_int_framerate()`` method. Setting the\\n  framerate will automatically set the ``Timecode.int_framerate`` attribute.\", \n        \"release_url\": \"http://pypi.python.org/pypi/timecode/0.3.0\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 0, \n        \"classifiers\": [\n            \"Development Status :: 5 - Production/Stable\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python\", \n            \"Topic :: Software Development :: Libraries :: Python Modules\"\n        ], \n        \"bugtrack_url\": \"\", \n        \"name\": \"timecode\", \n        \"license\": \"UNKNOWN\", \n        \"summary\": \"SMPTE Time Code Manipulation Library\", \n        \"home_page\": \"https://github.com/eoyilmaz/timecode\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.3.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-07-08T13:51:04\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/f6/e5/12045070ef704becaf3a72127fada95634b5153c669153fa7733bd774efa/timecode-0.3.0.tar.gz\", \n                \"md5_digest\": \"d99a1227ae72f2d98dc5c8f255e19cbc\", \n                \"downloads\": 3324, \n                \"filename\": \"timecode-0.3.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"f6/e5/12045070ef704becaf3a72127fada95634b5153c669153fa7733bd774efa/timecode-0.3.0.tar.gz\", \n                \"size\": 16800\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2014-07-08T13:51:04\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/f6/e5/12045070ef704becaf3a72127fada95634b5153c669153fa7733bd774efa/timecode-0.3.0.tar.gz\", \n            \"md5_digest\": \"d99a1227ae72f2d98dc5c8f255e19cbc\", \n            \"downloads\": 3324, \n            \"filename\": \"timecode-0.3.0.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"f6/e5/12045070ef704becaf3a72127fada95634b5153c669153fa7733bd774efa/timecode-0.3.0.tar.gz\", \n            \"size\": 16800\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:45:22"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://github.com/eoyilmaz/timecode", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "Server": ["GitHub.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-GitHub-Request-Id": ["54B1D78B:C3EF:F90B781:585D0042"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Date": ["Fri, 23 Dec 2016 10:45:22 GMT"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["b9c2a2d2339d471239b174dbbc6d8be2"], "X-Frame-Options": ["deny"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Content-Type-Options": ["nosniff"], "X-Request-Id": ["7767dc2f4268c454933b6da4cd2ee107"], "Vary": ["X-PJAX", "Accept-Encoding"], "Transfer-Encoding": ["chunked"], "X-Runtime": ["0.103974"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:45:22 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiNGIzZGIwMDQzMDBkZjBiZTkzMjQxNzg4MDVmOGRjMzQiLCJzcHlfcmVwbyI6ImVveWlsbWF6L3RpbWVjb2RlIiwic3B5X3JlcG9fYXQiOjE0ODI0ODk5MjIsIl9jc3JmX3Rva2VuIjoiM0JxVG9BMlU5TEdaYlhCYUx5eHcxcE50Q2ZldE9GOUV3bW1wQWREZkZWZz0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--20e02bf56235afd0bc5aa3b37707405dd947e7e9; path=/; secure; HttpOnly"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/eoyilmaz/timecode", "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:45:22"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://raw.githubusercontent.com/eoyilmaz/timecode/master/CHANGELOG", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["C71B4C15:5B43:52D5CD9:585D0042"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-XSS-Protection": ["1; mode=block"], "Date": ["Fri, 23 Dec 2016 10:45:23 GMT"], "Source-Age": ["0"], "X-Cache-Hits": ["0"], "X-Served-By": ["cache-hhn1532-HHN"], "X-Fastly-Request-ID": ["d84299381e2da907945d0b42def923f5130f88c5"], "X-Geo-Block-List": [""], "Strict-Transport-Security": ["max-age=31536000"], "Access-Control-Allow-Origin": ["*"], "Vary": ["Authorization,Accept-Encoding"], "X-Timer": ["S1482489922.906504,VS0,VE118"], "Content-Encoding": ["gzip"], "X-Cache": ["MISS"], "Accept-Ranges": ["bytes"], "Cache-Control": ["max-age=300"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "ETag": ["\"a449950a11c19d75746b6436332cb70fff735c9f\""], "Content-Type": ["text/plain; charset=utf-8"], "Content-Length": ["1455"], "X-Content-Type-Options": ["nosniff"], "Expires": ["Fri, 23 Dec 2016 10:50:23 GMT"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/eoyilmaz/timecode/master/CHANGELOG", "body": {"base64_string": "H4sIAAAAAAAAA41XTW/cNhC9+1cQBoI4xkIO0lzqwijSBkV9SA6JcwsgcaXZFRuJVEhqhf33fUNSX5ZtxICBXX4M38y8eTN7dxf+Lv6upT6Su7hL3y/eZu+ztxfpy7W4vv5Mw+31tfjHypZERY1qlScrlBPaDMKRF96Iy9tLcTBWfDZafLSmi8d34vKPuM5rFyIZkboSl1ncaFXTKEelwdpeOqqEVzhSmopchhv3B1EUD1jilSzPlVY+z6/eFIVwXlqf+7THgDrp2ILEllX6KAbla+FrEoM1+ghrC/geu00j9vyWPpH1fLH3ppVelbJpzll0/1tXSU8cgQ847sl5J5Q+mebEL8y+Bq+W3sx+CGmJgwUAKVy9o4BL0zBjylbxXnjty9ybPPoUPG/J1wZwq4rjZURnyZH2wWRprKXSN2e8hgDDHb8M6rOPtC4/sB8wvzemIakFrlq17z3Fl569uspKIEXfdcYiUBGz2yFi+MYROjRG4iOQAR/jDY9ayY/YY9/CjYxJ+NuTJPxCGqercLFReyvtmf0vipEFRRFuv3vm9mAVwqEjJ2p4OVk5WNMKVwJIWa8d/WScF6plhyRiXIaCYbZFECXpEj5m4qEmpHmQsS7ChqPAuYPSwKzis8jVSZnescmG2F8Qzuhwf0KjVkYq0esKnP10/wB7aXFDzyfSMYXUiRq49gTXI/5qJyy15hRjCau91lSSc/x6UVSg9UiHHb4zPXNLvrfaIceTWYAQsQbCYVGCNagoZJssHGXmhcCy40UxpXphgkkBG5snEIElpFJyyUiN0Hg2gYgJEwNq9v+B77Ga433Yk9pgzy5YyjY1JEOXFFBDWM6mR750qMgjCnPSDUupouJD/PSK7jiW2B5oXBRYuBr34/L6AhucbmDr+7T5vZitvH7lXotXYoGYHY6O+JqB+VomT5NosY4B/Yj8Wc90yMkRhh45E3LiZgzrjbw0vfbYragjXTEExGNgFI+fMD3+D8ATMHw1LHU+YqZtenHJGZYxPsG6oKVqxtMw1cEaSmlNzA3l46coB9WShU3ZNzF3IThtX9bgpWfhNxptaahVWcM4WBabTjzJdvaNOYqOax7efJQnVYl/SUGk92Q5ftLjXu19d3tzMwxDVvGRenEiK017w1Zu/uzu3v2+0pIPQbFX1KCfYzsznMxU+QDg1B76BFRlTeWPVKb0s5eN8mcG5wcj5u6XuO2YYHJe59hOvF5thSqpltS4CmFJ/BofBQIvmzGyTIc3mzxselVk1dQPNFHlVqjcBCrBWJTvEtJJNj3FdI2Sq/t2z3k8REwuCmtIy2j/JYDxEoP05WOA87sLdxPAxF3xfjwTmpioTW/R31ql0SfxITb/1OvCUy+Bqa2LAju3YaUfL8FkEN0klAtPwvLYpKcxAy3GdNAGhbfFXxSlU4V6YpJZPuYNbM05Vqht0BjcetYhMwYlpAQbuKdSgrhO2epYeFTF0eulsMcZBgBR6cjgoUd4w1DEgwv3Eec38xkX88JdXS1BTPNcn1SBZKjxMPpEEdqq3jzigF2pNYorRAkTDyhaFPl4lF2c5yGe9eSPqakFU2Pcz9F5ybLIisOHXfi4C58jvjT+1CnYMdIjbwKp4x1Bvsy2Jfclde+FUxz9fO7cqyg/rBQyRHjWSNYckhgZRQV1ZCmBmr2YvA0XN2UfH96Sf5Tsxd1OWkfTHL8ccGfxdmFa4hYlm6PBFFe3vxKSPLWcHO2nTTo7huQ+iS0X+Dxo4MmFCuHWKC8onzP349bYrb488TTT4ymnwsNcimlEeTR7xUO7uRukMS3DT6sBzZtlPAZDdGcc1bOMAmzHxReF6clRxmVPtiM/xwuV5nAwz8MPLDaxGwkc+BpLLcjHZZizL38lGLiNodTn0wS4CsjXeVLgHy3TD4JQ0KvfZBOMhe2V3WVJZxf/A5ux9unlDgAA", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:45:23"}], "recorded_with": "betamax/0.8.0"}