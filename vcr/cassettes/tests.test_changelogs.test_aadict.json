{"http_interactions": [{"recorded_at": "2016-12-23T09:32:17", "response": {"url": "https://pypi.python.org/pypi/aadict/json", "headers": {"Content-Disposition": ["inline"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Accept-Ranges": ["bytes"], "X-Served-By": ["cache-iad2130-IAD, cache-hhn1535-HHN"], "Content-Length": ["8408"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Cache-Hits": ["1, 1"], "X-Frame-Options": ["deny"], "X-Content-Type-Options": ["nosniff"], "Date": ["Fri, 23 Dec 2016 09:32:17 GMT"], "X-Cache": ["HIT, HIT"], "Fastly-Debug-Digest": ["3aad3a4155893978ccebd47fe507519225480ff4cc2007b5eb9ac8118b06a8e8"], "Access-Control-Allow-Origin": ["*"], "Server": ["nginx/1.10.2"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Age": ["68119"], "Connection": ["keep-alive"], "Cache-Control": ["max-age=600, public"], "Via": ["1.1 varnish", "1.1 varnish"], "X-Timer": ["S1482485537.213688,VS0,VE0"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-XSS-Protection": ["1; mode=block"], "X-PYPI-LAST-SERIAL": ["2534893"]}, "status": {"code": 200, "message": "OK"}, "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"auto attribute access dict helpers pick omit\", \n        \"package_url\": \"http://pypi.python.org/pypi/aadict\", \n        \"author\": \"metagriffin\", \n        \"author_email\": \"mg.pypi@uberdev.org\", \n        \"download_url\": \"\", \n        \"platform\": \"any\", \n        \"version\": \"0.2.3\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"=================================\\n(Yet Another) Auto-Attribute Dict\\n=================================\\n\\nAn ``aadict`` is a python dict sub-class that allows attribute-style\\naccess to dict items, e.g. ``d.foo`` is equivalent to ``d['foo']``.\\n``aadict`` also provides a few other helpful methods, such as ``pick``\\nand ``omit`` methods. Also, an ``aadict`` is more call chaining\\nfriendly (e.g. methods such as `update` return ``self``) and is\\npickle'able.\\n\\n\\nProject\\n=======\\n\\n* Homepage: https://github.com/metagriffin/aadict\\n* Bugs: https://github.com/metagriffin/aadict/issues\\n\\n\\nTL;DR\\n=====\\n\\nInstall:\\n\\n.. code-block:: bash\\n\\n  $ pip install aadict\\n\\nUse:\\n\\n.. code-block:: python\\n\\n  from aadict import aadict\\n\\n  # attribute access\\n  d = aadict(foo='bar', zig=87)\\n  assert d.foo == d['foo'] == 'bar'\\n\\n  # helper methods\\n  assert d.pick('foo') == {'foo': 'bar'}\\n  assert d.omit('foo') == {'zig': 87}\\n\\n  # method chaining\\n  d2 = aadict(x='y').update(d).omit('zig')\\n  assert d2.x == 'y' and d2.foo == 'bar' and d2.zig is None\\n\\n  # converting a dict to an aadict recursively\\n  d3 = aadict.d2ar(dict(foo=dict(bar='zig')))\\n  assert d3.foo.bar == 'zig'\\n\\n\\nDetails\\n=======\\n\\nThe aadict module provides the following functionality:\\n\\n\\naadict\\n------\\n\\nAn `aadict` object is basically identical to a `dict` object, with the\\nexception that attributes, if not reserved for other purposes, map to\\nthe dict's items. For example, if a dict ``d`` has an item ``'foo'``,\\nthen a request for ``d.foo`` will return that item lookup. aadicts\\nalso have several helper methods, for example ``aadict.pick``. To\\nfetch the value of an item that has the same name as one of the helper\\nmethods you need to reference it by item lookup,\\ni.e. ``d['pick']``. The helper methods are:\\n\\n* **aadict.pick** instance method:\\n\\n  Returns a new aadict, reduced to only include the specified\\n  keys. Example:\\n\\n  .. code-block:: python\\n\\n    d = aadict(foo='bar', zig=87, zag=['a', 'b'])\\n    assert d.pick('foo', 'zag') == {'foo': 'bar', 'zag': ['a', 'b']}\\n\\n* **aadict.omit** instance method:\\n\\n  Identical to the ``aadict.pick`` method, but returns the complement,\\n  i.e. all of those keys that are *not* specified. Example:\\n\\n  .. code-block:: python\\n\\n    d = aadict(foo='bar', zig=87, zag=['a', 'b'])\\n    assert d.omit('foo', 'zag') == {'zig': 87}\\n\\n* **aadict.d2ar** class method:\\n\\n  Recursively converts the supplied `dict` to an `aadict`, including\\n  all sub-list and sub-dict types. Due to being recursive, but only\\n  copying dict-types, this is effectively a hybrid of a shallow and\\n  a deep clone. Example:\\n\\n  .. code-block:: python\\n\\n    d = aadict.d2ar(dict(foo=dict(bar='zig')))\\n    assert d.foo.bar == 'zig'\\n\\n  Without the recursive walking, the ``.bar`` attribute syntax\\n  would yield an AttributeError exception because d.foo would\\n  reference a `dict` type, not an `aadict`.\\n\\n* **aadict.d2a** class method:\\n\\n  Converts the supplied `dict` to an `aadict`. Example:\\n\\n  .. code-block:: python\\n\\n    d = aadict.d2a(dict(foo='bar'))\\n    assert d.foo == d['foo'] == 'bar'\\n\\n  Note that this is identical to just using the constructor,\\n  but is provided as a symmetry to the ``aadict.d2ar`` class\\n  method, e.g.:\\n\\n  .. code-block:: python\\n\\n    d = aadict(dict(foo='bar'))\\n    assert d.foo == d['foo'] == 'bar'\\n\", \n        \"release_url\": \"http://pypi.python.org/pypi/aadict/0.2.3\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 3, \n        \"classifiers\": [\n            \"Development Status :: 5 - Production/Stable\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)\", \n            \"Natural Language :: English\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"aadict\", \n        \"license\": \"GPLv3+\", \n        \"summary\": \"An auto-attribute dict (and a couple of other useful dict functions)\", \n        \"home_page\": \"http://github.com/metagriffin/aadict\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.2.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-11-12T17:07:33\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/50/30/2d6c516ff308e1a2e25b8cf4274bd0ed763861b3d2b5cd1fb54c6d59bfcb/aadict-0.2.3.tar.gz\", \n                \"md5_digest\": \"c2832f665d91026d635e7b9262bb8479\", \n                \"downloads\": 166, \n                \"filename\": \"aadict-0.2.3.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"50/30/2d6c516ff308e1a2e25b8cf4274bd0ed763861b3d2b5cd1fb54c6d59bfcb/aadict-0.2.3.tar.gz\", \n                \"size\": 16511\n            }\n        ], \n        \"0.2.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-08-18T00:49:17\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/7e/b9/2bb637d40e365282d3e26819408583f17004cf8705c94fa8f44e8ba4790f/aadict-0.2.2.tar.gz\", \n                \"md5_digest\": \"0224a75cadb04183ea0c444aaa81b362\", \n                \"downloads\": 4629, \n                \"filename\": \"aadict-0.2.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"7e/b9/2bb637d40e365282d3e26819408583f17004cf8705c94fa8f44e8ba4790f/aadict-0.2.2.tar.gz\", \n                \"size\": 17698\n            }\n        ], \n        \"0.2.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-11-20T17:51:14\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/cb/20/0c96f9bd0d95ff8f5fe89ea7c884ce1b0d81aef46762ec90cf155ba25a14/aadict-0.2.1.tar.gz\", \n                \"md5_digest\": \"35466d06c2572648ae81980457ef86f3\", \n                \"downloads\": 3050, \n                \"filename\": \"aadict-0.2.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"cb/20/0c96f9bd0d95ff8f5fe89ea7c884ce1b0d81aef46762ec90cf155ba25a14/aadict-0.2.1.tar.gz\", \n                \"size\": 16771\n            }\n        ], \n        \"0.2.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-10-19T21:26:51\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a6/22/02de4df49ebf6cdb9c37e6de923390d14c7731cade3345320f9cce34fd5a/aadict-0.2.0.tar.gz\", \n                \"md5_digest\": \"cb86df995cd4e7c15fae3f2db8397629\", \n                \"downloads\": 2407, \n                \"filename\": \"aadict-0.2.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a6/22/02de4df49ebf6cdb9c37e6de923390d14c7731cade3345320f9cce34fd5a/aadict-0.2.0.tar.gz\", \n                \"size\": 4097\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-11-12T17:07:33\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/50/30/2d6c516ff308e1a2e25b8cf4274bd0ed763861b3d2b5cd1fb54c6d59bfcb/aadict-0.2.3.tar.gz\", \n            \"md5_digest\": \"c2832f665d91026d635e7b9262bb8479\", \n            \"downloads\": 166, \n            \"filename\": \"aadict-0.2.3.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"50/30/2d6c516ff308e1a2e25b8cf4274bd0ed763861b3d2b5cd1fb54c6d59bfcb/aadict-0.2.3.tar.gz\", \n            \"size\": 16511\n        }\n    ]\n}"}}, "request": {"uri": "https://pypi.python.org/pypi/aadict/json", "headers": {"Accept": ["*/*"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept-Encoding": ["gzip, deflate"]}, "method": "GET", "body": {"encoding": "utf-8", "string": ""}}}, {"recorded_at": "2016-12-23T09:32:17", "response": {"url": "http://github.com/metagriffin/aadict", "headers": {"Connection": ["close"], "Location": ["https://github.com/metagriffin/aadict"], "Content-length": ["0"]}, "status": {"code": 301, "message": "Moved Permanently"}, "body": {"encoding": null, "string": ""}}, "request": {"uri": "http://github.com/metagriffin/aadict", "headers": {"Accept": ["*/*"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept-Encoding": ["gzip, deflate"]}, "method": "GET", "body": {"encoding": "utf-8", "string": ""}}}, {"recorded_at": "2016-12-23T09:32:18", "response": {"url": "https://github.com/metagriffin/aadict", "headers": {"Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Encoding": ["gzip"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Vary": ["X-PJAX", "Accept-Encoding"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 09:32:18 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiODU2NmU1NTFjMzA1ZTkyMDllNjA1MGY2Y2JhMjBhMzUiLCJzcHlfcmVwbyI6Im1ldGFncmlmZmluL2FhZGljdCIsInNweV9yZXBvX2F0IjoxNDgyNDg1NTM3LCJfY3NyZl90b2tlbiI6ImU4VW1aRWZZRDBuS2NNTzlHc1NETFVkeEo4VDBmZjdNaWFzN3YyZmUxUnc9IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--3526fc34bd7c88ab7edb8dfea4644ccdb42d6d3a; path=/; secure; HttpOnly"], "X-Served-By": ["a568c03544f42dddf712bab3bfd562fd"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Cache-Control": ["no-cache"], "Status": ["200 OK"], "Transfer-Encoding": ["chunked"], "X-Frame-Options": ["deny"], "Content-Type": ["text/html; charset=utf-8"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Request-Id": ["f23dcf6e19dd2044b24e7774e5947e30"], "Date": ["Fri, 23 Dec 2016 09:32:18 GMT"], "X-Runtime": ["0.284285"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-GitHub-Request-Id": ["54B1D78B:C3EB:8F3BDD4:585CEF21"], "Server": ["GitHub.com"]}, "status": {"code": 200, "message": "OK"}, "body": {"encoding": "utf-8", "base64_string": ""}}, "request": {"uri": "https://github.com/metagriffin/aadict", "headers": {"Accept": ["*/*"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept-Encoding": ["gzip, deflate"]}, "method": "GET", "body": {"encoding": "utf-8", "string": ""}}}, {"recorded_at": "2016-12-23T09:32:18", "response": {"url": "https://raw.githubusercontent.com/metagriffin/aadict/master/CHANGELOG.rst", "headers": {"Expires": ["Fri, 23 Dec 2016 09:37:18 GMT"], "X-Geo-Block-List": [""], "Strict-Transport-Security": ["max-age=31536000"], "Accept-Ranges": ["bytes"], "X-Served-By": ["cache-hhn1536-HHN"], "Content-Length": ["228"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "X-Cache-Hits": ["0"], "X-Frame-Options": ["deny"], "ETag": ["\"bba810ad714c6812036b5297270d23a12971103a\""], "Date": ["Fri, 23 Dec 2016 09:32:18 GMT"], "X-Cache": ["MISS"], "Access-Control-Allow-Origin": ["*"], "Content-Encoding": ["gzip"], "X-XSS-Protection": ["1; mode=block"], "X-GitHub-Request-Id": ["C71B4C2A:5437:F83CD1:585CEF21"], "X-Fastly-Request-ID": ["5a9f5c6ffa6be4ff8977cfbdba280e1281110ca0"], "Vary": ["Authorization,Accept-Encoding"], "Connection": ["keep-alive"], "Cache-Control": ["max-age=300"], "Via": ["1.1 varnish"], "Source-Age": ["0"], "X-Timer": ["S1482485538.366631,VS0,VE116"], "Content-Type": ["text/plain; charset=utf-8"], "X-Content-Type-Options": ["nosniff"]}, "status": {"code": 200, "message": "OK"}, "body": {"encoding": "utf-8", "base64_string": "H4sIAAAAAAAAA01PQW4CMQy85xU+tj2gFm6V9gBIPbVS1RfEm7jZCBJHjpeK32MoIHyyPTOe8TBcy20nrIk+ObnhvnPu8LpYLlbuNr/AF0YCH/aE8vTsoZBOHCFMmCuOe7pJlg+SHyp8oAg+5q6Sx1nJQ6RGNVINR2OsYzR8JFWSM+1yus+tsajBWxahoEb5PppdhdUdvNq9Pdh9ZOkKiimZQMiSdrL1BsPuDyV2yDVwaajZ8p6T29vvDsB++4/Zcth5wGotl6wefucaNHPtoAy+sLTJQ7N7mMidAFNoxUZCAQAA"}}, "request": {"uri": "https://raw.githubusercontent.com/metagriffin/aadict/master/CHANGELOG.rst", "headers": {"Accept": ["*/*"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept-Encoding": ["gzip, deflate"]}, "method": "GET", "body": {"encoding": "utf-8", "string": ""}}}], "recorded_with": "betamax/0.8.0"}