{"http_interactions": [{"response": {"status": {"code": 301, "message": "Moved Permanently"}, "headers": {"X-Cache": ["MISS, MISS"], "Via": ["1.1 varnish", "1.1 varnish"], "X-Served-By": ["cache-iad2140-IAD, cache-hhn1520-HHN"], "Age": ["0"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Cache-Hits": ["0, 0"], "Date": ["Fri, 23 Dec 2016 10:30:54 GMT"], "Fastly-Debug-Digest": ["5fc900563794cb5c4cd961dccdf95975aeb4eef63ab7354e309990faaf7d9568"], "Server": ["nginx/1.10.2"], "X-Content-Type-Options": ["nosniff"], "Location": ["/pypi/buildout.gc/json"], "Connection": ["keep-alive"], "X-Timer": ["S1482489053.895209,VS0,VE119"], "Content-Length": ["0"], "Accept-Ranges": ["bytes"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"]}, "url": "https://pypi.python.org/pypi/buildout_gc/json", "body": {"string": "", "encoding": null}}, "recorded_at": "2016-12-23T10:30:54", "request": {"method": "GET", "uri": "https://pypi.python.org/pypi/buildout_gc/json", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"]}, "body": {"string": "", "encoding": "utf-8"}}}, {"response": {"status": {"code": 200, "message": "OK"}, "headers": {"X-Cache": ["HIT, HIT"], "Via": ["1.1 varnish", "1.1 varnish"], "Date": ["Fri, 23 Dec 2016 10:30:54 GMT"], "Server": ["nginx/1.10.2"], "Content-Disposition": ["inline"], "Content-Length": ["11750"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Cache-Control": ["max-age=600, public"], "X-Served-By": ["cache-iad2146-IAD, cache-hhn1520-HHN"], "Age": ["59658"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Cache-Hits": ["1, 1"], "Fastly-Debug-Digest": ["b2d3b1921bd347f98693e3a056c69523261fe46bb53048dc2b931c567da9f7c0"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-Content-Type-Options": ["nosniff"], "X-PYPI-LAST-SERIAL": ["2535318"], "Connection": ["keep-alive"], "X-Timer": ["S1482489054.041446,VS0,VE0"], "Access-Control-Allow-Origin": ["*"], "Accept-Ranges": ["bytes"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"]}, "url": "https://pypi.python.org/pypi/buildout.gc/json", "body": {"string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"buildout extensions eggs directory clean\", \n        \"package_url\": \"http://pypi.python.org/pypi/buildout.gc\", \n        \"author\": \"Peter Uittenbroek\", \n        \"author_email\": \"uittenbroek@goldmund-wyldebeast-wunderliebe.com\", \n        \"download_url\": \"\", \n        \"platform\": \"\", \n        \"version\": \"1.2\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"Buildout Garbage Collector\\n==========================\\n\\nIntroduction\\n------------\\nThe buildout.gc extensions can be used to ensure your egg directory only contains 'used' eggs.\\nThe extension can report, move unused eggs to a specified directory or just remove egss.\\n\\nThis package is fork of https://github.com/thepjot/buildout.eggscleaner\\n\\n\\nInstallation\\n------------\\nGarbase Collector is a buildout extensions, can add it like so ::\\n\\n    [buildout]\\n    extensions =\\n            buildout.gc\\n\\n\\nOptions\\n-------\\n\\nold-eggs-directory\\n        The directory you want buildout.gc to move your unused eggs to.\\n        Should an excact egg already exist, we remove the one in the ''used'' eggs directory\\n\\nold-eggs-remove\\n        Remove eggs instead of moving\\n\\nold-eggs-factor\\n        Remove/move eggs directories when number unused eggs less <total_egss> * <factor>.\\n        Some times buildout out can be failed and in this case this extension determinate\\n        that ALL packages are not used. This parameter prevent removing ALL eggs in this case.\\n\\n\\nExample ::\\n\\n        [buildout]\\n        extensions =\\n                buildout.gc\\n        old-eggs-directory = ${buildout:directory}/old-eggs/\\n\\nTested with\\n-----------\\n\\nzc.buildout: 2.xx\\npython: 2.4.6, 2.6.8, 2.7.12, 3.3, 3.5\\n\\nWorking with other extensions\\n-----------------------------\\n\\nI looked at how buildout.dumppickedversions works and made this extension work in a similar manner.\\nThis extension will run alongside that one perfectly well.\\n\\n\\nExample outputs\\n---------------\\n\\nMoving eggs ::\\n\\n    Moved unused egg: webcouturier.dropdownmenu-2.3-py2.6.egg\\n    Moved unused egg: collective.uploadify-1.0-py2.6.egg\\n    Moved unused egg: collective.simplesocial-1.6-py2.6.egg\\n    Moved unused egg: collective.autopermission-1.0b2-py2.6.egg\\n\\nReporting ::\\n\\n    Don't have a 'old-eggs-directory' or 'old-eggs-remove' set, only reporting\\n    Can add it by adding 'old-eggs-directory = ${buildout:directory}/old-eggs' to your [buildout]\\n    Found unused egg: webcouturier.dropdownmenu-2.3-py2.6.egg\\n    Found unused egg: plone.recipe.command-1.1-py2.6.egg\\n    Found unused egg: collective.uploadify-1.0-py2.6.egg\\n    Found unused egg: Products.DocFinderTab-1.0.5-py2.6.egg\\n    Found unused egg: collective.simplesocial-1.6-py2.6.egg\\n    Found unused egg: collective.autopermission-1.0b2-py2.6.egg\\n    Found unused egg: Products.Clouseau-1.0-py2.6.egg\\n\\n\\nDetailed Documentation\\n======================\\n\\n\\nLet's create an egg to use it in our tests::\\n\\n    >>> mkdir('myegg')\\n    >>> write('myegg', 'setup.py',\\n    ... '''\\n    ... from setuptools import setup\\n    ... setup(name='myegg', version='1.0',)\\n    ... ''')\\n    >>> write('myegg', 'README', '')\\n    >>> print_(system(buildout+' setup myegg bdist_egg')), # doctest: +ELLIPSIS\\n    Running setup script 'myegg...\\n    ...\\n\\n    >>> mkdir('baregg')\\n    >>> write('baregg', 'setup.py',\\n    ... '''\\n    ... from setuptools import setup\\n    ... setup(name='baregg', version='1.0',)\\n    ... ''')\\n    >>> write('baregg', 'README', '')\\n    >>> print_(system(buildout+' setup baregg bdist_egg')), # doctest: +ELLIPSIS\\n    Running setup script 'baregg...\\n    ...\\n\\nNow let's create a buildout to install the egg and to use buildout.gc::\\n\\n    >>> write('buildout.cfg',\\n    ... '''\\n    ... [buildout]\\n    ... index = http://pypi.python.org/simple\\n    ... extensions = buildout.gc\\n    ... eggs-directory = ${buildout:directory}/eggs\\n    ... parts = foo\\n    ... find-links += %s\\n    ... [foo]\\n    ... recipe = zc.recipe.egg\\n    ... eggs = myegg\\n    ... ''' % join('myegg', 'dist'))\\n\\nRunning the buildout will print information about unused eggs::\\n\\n    >>> print_(system(buildout)), # doctest: +ELLIPSIS\\n    Installing foo.\\n    Getting distribution for 'myegg'.\\n    ...\\n    Don't have a 'old-eggs-directory' or 'old-eggs-remove' set, only reporting\\n    ...\\n\\nWhen we only want to report unused eggs we omit the ``old-eggs-directory`` and ``old-eggs-remove`` options.\\n\\n    >>> write('buildout.cfg',\\n    ... '''\\n    ... [buildout]\\n    ... index = http://pypi.python.org/simple\\n    ... extensions = buildout.gc\\n    ... eggs-directory = ${buildout:directory}/eggs\\n    ... parts = foo\\n    ... find-links += %s\\n    ... [foo]\\n    ... recipe = zc.recipe.egg\\n    ... eggs = baregg\\n    ... ''' % join('baregg', 'dist'))\\n\\n    >>> print_(system(buildout)) # doctest:+ELLIPSIS\\n    Uninstalling foo.\\n    Installing foo.\\n    Getting distribution for 'baregg'.\\n    Got baregg 1.0.\\n    Don't have a 'old-eggs-directory' or 'old-eggs-remove' set, only reporting\\n    Can add it by adding 'old-eggs-directory = ${buildout:directory}/old-eggs' to your [buildout]\\n    Found unused egg: myegg...\\n    <BLANKLINE>\\n\\n\\n\\nCheck that indeed nothing has been moved nor deleted::\\n\\n    >>> assert 'myegg' in  ''.join(os.listdir('eggs'))\\n\\nIf we want to move unused eggs, we just add an ``old-eggs-directory`` option and give a directory target::\\n\\n    >>> write('buildout.cfg',\\n    ... '''\\n    ... [buildout]\\n    ... index = http://pypi.python.org/simple\\n    ... extensions = buildout.gc\\n    ... eggs-directory = ${buildout:directory}/eggs\\n    ... old-eggs-directory = ${buildout:directory}/old-eggs\\n    ... parts = foo\\n    ... find-links += %s\\n    ... [foo]\\n    ... recipe = zc.recipe.egg\\n    ... eggs = baregg\\n    ... ''' % join('baregg', 'dist'))\\n\\n    >>> print_(system(buildout)) # doctest:+ELLIPSIS\\n    Updating foo.\\n    Moved unused egg: myegg...\\n    <BLANKLINE>\\n\\nCheck that indeed 'myegg' has been moved::\\n\\n    >>> assert 'myegg' not in  ''.join(os.listdir('eggs')), 'myegg has not been moved out of egg dir'\\n    >>> assert 'myegg' in  ''.join(os.listdir('old-eggs')), 'myegg has not been moved to old-egg dir'\\n\\nAnd baregg is still present::\\n\\n    >>> assert 'baregg' in  ''.join(os.listdir('eggs')), 'baregg is not present in egg dir'\\n\\nIf we want to remove unused eggs, we just add an ``old-eggs-remove`` option::\\n\\n    >>> write('buildout.cfg',\\n    ... '''\\n    ... [buildout]\\n    ... index = http://pypi.python.org/simple\\n    ... extensions = buildout.gc\\n    ... eggs-directory = ${buildout:directory}/eggs\\n    ... old-eggs-directory = ${buildout:directory}/old-eggs\\n    ... old-eggs-remove = true\\n    ... parts = foo\\n    ... find-links += %s\\n    ... [foo]\\n    ... recipe = zc.recipe.egg\\n    ... eggs = myegg\\n    ... ''' % join('myegg', 'dist'))\\n\\n    >>> print_(system(buildout)) # doctest:+ELLIPSIS\\n    Uninstalling foo.\\n    Installing foo.\\n    Getting distribution for 'myegg'.\\n    Got myegg 1.0.\\n    Moved unused egg: baregg...\\n    <BLANKLINE>\\n\\nCheck that indeed 'baregg' has been removed::\\n\\n    >>> assert 'baregg' not in  ''.join(os.listdir('eggs')), 'baregg has not been removed'\\n    >>> assert 'baregg' not in  ''.join(os.listdir('old-eggs')), 'baregg has been moved to old-egg dir'\\n\\nAnd 'myegg' is still present::\\n\\n    >>> assert 'myegg' in  ''.join(os.listdir('eggs')), 'myegg is not present in egg dir'\\n\\nContributors\\n============\\n\\n- Peter Uittenbroek, Author\\n- Anton Tagunov\\n\\nChange history\\n==============\\n\\n1.2.dev\\n-------\\n\\n- Fixed incorrect messages after restarting of buildout.\\n\\n1.0 (2016-01-21)\\n----------------\\n\\n- Created public fork\\n\\n0.1.5 (2012-08-17)\\n------------------\\n\\n- Redid documentation\\n  [thepjot]\\n\\n- Added doctest\\n  [thepjot]\\n\\n0.1 (internal release)\\n-----------------------\\n- Creation\\n  [thepjot]\\n\\n\", \n        \"release_url\": \"http://pypi.python.org/pypi/buildout.gc/1.2\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 2, \n        \"classifiers\": [\n            \"Framework :: Buildout\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: Zope Public License\", \n            \"Topic :: Software Development :: Build Tools\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"buildout.gc\", \n        \"license\": \"ZPL\", \n        \"summary\": \"A buildout extension to move non-used eggs to a specified directory\", \n        \"home_page\": \"https://bitbucket.org/atagunov/buildout.gc\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-01-21T12:18:16\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/39/37/2f891aa97710cb00f40b86905a81caa1aa2e76581a52c3560d21fcdb58c6/buildout.gc-1.0.zip\", \n                \"md5_digest\": \"3535e1159a83fd61db5d7580f027935c\", \n                \"downloads\": 671, \n                \"filename\": \"buildout.gc-1.0.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"39/37/2f891aa97710cb00f40b86905a81caa1aa2e76581a52c3560d21fcdb58c6/buildout.gc-1.0.zip\", \n                \"size\": 12402\n            }\n        ], \n        \"1.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-01-21T12:33:12\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/37/d8/7b5ed9abf5e0d625fb1660ad80b5ee3e2d92b733cde714988ad4193838fb/buildout.gc-1.1.zip\", \n                \"md5_digest\": \"6e9d2bcfd9554ce80f1b0befa497a7e6\", \n                \"downloads\": 381, \n                \"filename\": \"buildout.gc-1.1.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"37/d8/7b5ed9abf5e0d625fb1660ad80b5ee3e2d92b733cde714988ad4193838fb/buildout.gc-1.1.zip\", \n                \"size\": 12906\n            }\n        ], \n        \"1.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-11-28T10:21:01\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a4/66/fec0abd4c2503ec1cef72f97bfa1a9ea044621c283fee390c80d83cee76a/buildout.gc-1.2.tar.gz\", \n                \"md5_digest\": \"6060b41dd2dd5d454745d739192522ee\", \n                \"downloads\": 186, \n                \"filename\": \"buildout.gc-1.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a4/66/fec0abd4c2503ec1cef72f97bfa1a9ea044621c283fee390c80d83cee76a/buildout.gc-1.2.tar.gz\", \n                \"size\": 6583\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-11-28T10:21:01\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/a4/66/fec0abd4c2503ec1cef72f97bfa1a9ea044621c283fee390c80d83cee76a/buildout.gc-1.2.tar.gz\", \n            \"md5_digest\": \"6060b41dd2dd5d454745d739192522ee\", \n            \"downloads\": 186, \n            \"filename\": \"buildout.gc-1.2.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"a4/66/fec0abd4c2503ec1cef72f97bfa1a9ea044621c283fee390c80d83cee76a/buildout.gc-1.2.tar.gz\", \n            \"size\": 6583\n        }\n    ]\n}", "encoding": "UTF-8"}}, "recorded_at": "2016-12-23T10:30:54", "request": {"method": "GET", "uri": "https://pypi.python.org/pypi/buildout.gc/json", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"]}, "body": {"string": "", "encoding": "utf-8"}}}, {"response": {"status": {"code": 200, "message": "OK"}, "headers": {"Vary": ["Accept-Language, Cookie, Accept-Encoding"], "X-Served-By": ["app-104"], "Server": ["nginx"], "X-Render-Time": ["0.209429979324"], "Date": ["Fri, 23 Dec 2016 10:30:54 GMT"], "Content-Type": ["text/html; charset=utf-8"], "X-Content-Type-Options": ["nosniff"], "X-Static-Version": ["e72177d765d6"], "Connection": ["keep-alive"], "Content-Encoding": ["gzip"], "Transfer-Encoding": ["chunked"], "X-Request-Count": ["635"], "X-Frame-Options": ["SAMEORIGIN"], "Cache-Control": ["max-age=900"], "X-Version": ["e72177d765d6"], "X-Cache-Info": ["caching"], "Strict-Transport-Security": ["max-age=31536000"], "Content-Language": ["en"]}, "url": "https://bitbucket.org/atagunov/buildout.gc/src/", "body": {"encoding": "utf-8", "base64_string": ""}}, "recorded_at": "2016-12-23T10:30:54", "request": {"method": "GET", "uri": "https://bitbucket.org/atagunov/buildout.gc/src/", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"]}, "body": {"string": "", "encoding": "utf-8"}}}, {"response": {"status": {"code": 200, "message": "OK"}, "headers": {"Vary": ["Accept-Language, Cookie"], "X-Served-By": ["app-106"], "Server": ["nginx"], "X-Render-Time": ["0.0260031223297"], "Date": ["Fri, 23 Dec 2016 10:30:54 GMT"], "Last-Modified": ["Mon, 28 Nov 2016 10:19:50 GMT"], "Content-Type": ["text/plain"], "X-Content-Type-Options": ["nosniff"], "X-Static-Version": ["e72177d765d6"], "Connection": ["keep-alive"], "Content-Length": ["337"], "Accept-Ranges": ["bytes"], "X-Frame-Options": ["SAMEORIGIN"], "ETag": ["\"7313f45e968d9849466f84bd4323e4b3\""], "X-Request-Count": ["416"], "Cache-Control": ["max-age=900"], "X-Version": ["e72177d765d6"], "X-Cache-Info": ["caching"], "Strict-Transport-Security": ["max-age=31536000"], "Content-Language": ["en"]}, "url": "https://bitbucket.org/atagunov/buildout.gc/raw/8f37ffb6a95ccb7f709c9eeb309308d103416030/CHANGES.txt", "body": {"string": "Change history\n==============\n\n1.2.dev\n-------\n\n- Fixed incorrect messages after restarting of buildout.\n\n1.0 (2016-01-21)\n----------------\n\n- Created public fork\n\n0.1.5 (2012-08-17)\n------------------\n\n- Redid documentation\n  [thepjot]\n\n- Added doctest\n  [thepjot]\n\n0.1 (internal release)\n-----------------------\n- Creation\n  [thepjot]\n", "encoding": "ISO-8859-1"}}, "recorded_at": "2016-12-23T10:30:54", "request": {"method": "GET", "uri": "https://bitbucket.org/atagunov/buildout.gc/raw/8f37ffb6a95ccb7f709c9eeb309308d103416030/CHANGES.txt", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"]}, "body": {"string": "", "encoding": "utf-8"}}}], "recorded_with": "betamax/0.8.0"}