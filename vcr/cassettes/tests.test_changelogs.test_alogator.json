{"recorded_with": "betamax/0.8.0", "http_interactions": [{"recorded_at": "2016-12-23T10:27:27", "response": {"body": {"string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"django,app,logging,event,action,aggregator,alogator\", \n        \"package_url\": \"http://pypi.python.org/pypi/alogator\", \n        \"author\": \"arteria GmbH\", \n        \"author_email\": \"admin@arteria.ch\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"OS Independent\", \n        \"version\": \"0.2.0\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"Alogator\\n============\\n\\nAlogator is an aggregated logging actor system.\\n\\n\\n.. contents:: Table of Contents\\n\\n\\nInstallation\\n------------\\n\\nTo get the latest stable release from PyPi\\n\\n.. code-block:: bash\\n\\n    pip install alogator\\n\\nTo get the latest commit from GitHub\\n\\n.. code-block:: bash\\n\\n    pip install -e git+git://github.com/arteria/alogator.git#egg=alogator\\n\\n.. TODO: Describe further installation steps (edit / remove the examples below):\\n\\nAdd ``alogator`` to your ``INSTALLED_APPS`` and define a logger\\n\\n.. code-block:: python\\n\\n    INSTALLED_APPS = (\\n        ...,\\n        'alogator',\\n    )\\n\\n    LOGFILE_PATH = os.path.join(os.path.join(BASE_DIR, 'logs/'), \\\"alogator.log\\\")\\n\\n    LOGGING = {\\n        'version': 1,\\n        'disable_existing_loggers': False,\\n        'filters': {\\n            'require_debug_false': {\\n                '()': 'django.utils.log.RequireDebugFalse'\\n            }\\n        },\\n        'formatters': {\\n            'standard': {\\n                'format': \\\"[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s\\\",\\n                'datefmt': \\\"%d/%b/%Y %H:%M:%S\\\"\\n            },\\n        },\\n        'handlers': {\\n            'logfile': {\\n                'level': 'DEBUG',\\n                'class': 'logging.handlers.RotatingFileHandler',\\n                'filename': LOGFILE_PATH,\\n                'maxBytes': 1000000,\\n                'backupCount': 0,\\n                'formatter': 'standard',\\n            }\\n        },\\n        'loggers': {\\n            'alogator': {\\n                'handlers': ['logfile'],\\n                'level': 'DEBUG',\\n            },\\n        }\\n    }\\n\\n\\n\\n\\nDon't forget to create the tables for your database\\n\\n.. code-block:: bash\\n\\n    ./manage.py syncdb alogator\\n    # python manage.py migrate\\n\\n\\nUsage\\n-----\\n\\nSetup your logfiles, search patterns and actors in the admin backend.\\n\\nTo run one (scan all logfiles for patterns) just call the ``scanlogfiles`` management command.\\n\\n.. code-block:: bash\\n    \\n    python manage.py scanlogfiles\\n\\nYou can use ``alogator_cli`` to check the log files in a project. Simple add paths to settings files as arguments. Be aware that you have to run the project, so you need to first activate your virtualenv if you have one.\\n\\n.. code-block:: bash\\n\\n    # if you have a virtualenv\\n    . /path/to/env/bin/activate\\n\\n    alogator_cli /path/to/project/settings.py\\n\\nTo run this continously you could setup a cronjob. For example, to run this every other minute use\\n\\n.. code-block:: bash\\n\\n    crontab -e\\n    \\nThan add \\n\\n.. code-block:: bash\\n\\n    */2 * * * * /path/to/your/manage.py scanlogfiles\\n    \\nYou may have to activate your virtualenv depending on your setup.\\n\\n\\n\\nTODO\\n----\\n\\n* Customizable temporary working dir instead of /tmp\\n* Customizable subject, eg. [Alogator] (to filter inbox)\\n* Add \\\"To mute this actor, visit...\\\" in message/email.\\n\\nHistroy\\n-------\\n\\nPlease refer to CHANGELOG.txt\\n\\n\\nContribute\\n----------\\n\\nIf you want to contribute to this project, simply send us a pull request. Thanks. :)\", \n        \"release_url\": \"http://pypi.python.org/pypi/alogator/0.2.0\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 0, \n        \"classifiers\": [\n            \"Development Status :: 5 - Production/Stable\", \n            \"Framework :: Django\", \n            \"Framework :: Django\", \n            \"Framework :: Django :: 1.4\", \n            \"Framework :: Django :: 1.5\", \n            \"Framework :: Django :: 1.6\", \n            \"Framework :: Django :: 1.7\", \n            \"Framework :: Django :: 1.8\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2\", \n            \"Programming Language :: Python :: 3\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"alogator\", \n        \"license\": \"The MIT License\", \n        \"summary\": \"Alogator is an aggregated logging actor system.\", \n        \"home_page\": \"https://github.com/arteria/alogator\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.2.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-05-22T13:41:42\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/ea/89/d4150b75dc6ed29933906508985dfd702a8ee91e8f00d62bdd0758c11b2b/alogator-0.2.0.tar.gz\", \n                \"md5_digest\": \"4004df59835a81f30c64c781c26fcd7e\", \n                \"downloads\": 3267, \n                \"filename\": \"alogator-0.2.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"ea/89/d4150b75dc6ed29933906508985dfd702a8ee91e8f00d62bdd0758c11b2b/alogator-0.2.0.tar.gz\", \n                \"size\": 10726\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2015-05-22T13:41:42\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/ea/89/d4150b75dc6ed29933906508985dfd702a8ee91e8f00d62bdd0758c11b2b/alogator-0.2.0.tar.gz\", \n            \"md5_digest\": \"4004df59835a81f30c64c781c26fcd7e\", \n            \"downloads\": 3267, \n            \"filename\": \"alogator-0.2.0.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"ea/89/d4150b75dc6ed29933906508985dfd702a8ee91e8f00d62bdd0758c11b2b/alogator-0.2.0.tar.gz\", \n            \"size\": 10726\n        }\n    ]\n}", "encoding": "UTF-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/alogator/json", "headers": {"X-Frame-Options": ["deny"], "X-PYPI-LAST-SERIAL": ["2534732"], "Access-Control-Allow-Origin": ["*"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Accept-Ranges": ["bytes"], "X-Content-Type-Options": ["nosniff"], "X-Timer": ["S1482488847.507290,VS0,VE0"], "Via": ["1.1 varnish", "1.1 varnish"], "X-Served-By": ["cache-iad2130-IAD, cache-hhn1540-HHN"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Age": ["76776"], "Date": ["Fri, 23 Dec 2016 10:27:27 GMT"], "Fastly-Debug-Digest": ["bec37c04571b24d712ade314653f1a72180e574e94a302cd312d1f65c414c8e3"], "Server": ["nginx/1.10.2"], "X-XSS-Protection": ["1; mode=block"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Content-Length": ["6228"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Cache-Hits": ["1, 1"], "Content-Disposition": ["inline"], "X-Cache": ["HIT, HIT"], "Connection": ["keep-alive"], "Cache-Control": ["max-age=600, public"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://pypi.python.org/pypi/alogator/json"}}, {"recorded_at": "2016-12-23T10:27:28", "response": {"body": {"base64_string": "", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/arteria/alogator", "headers": {"Content-Encoding": ["gzip"], "Date": ["Fri, 23 Dec 2016 10:27:28 GMT"], "Server": ["GitHub.com"], "X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["54B1D78B:C3EB:8FBF30C:585CFC0F"], "Transfer-Encoding": ["chunked"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["X-PJAX", "Accept-Encoding"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Request-Id": ["7e0c5393e3ea367d79340332eb6fba87"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-Content-Type-Options": ["nosniff"], "Status": ["200 OK"], "X-Runtime": ["0.284042"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["55557c365974809f4e10ed787a2656a4"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:27:28 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiMTZhYTg4MDNiMTc2M2UxYjFjM2Q2YTNlOTRjMTY5OWMiLCJzcHlfcmVwbyI6ImFydGVyaWEvYWxvZ2F0b3IiLCJzcHlfcmVwb19hdCI6MTQ4MjQ4ODg0NywiX2NzcmZfdG9rZW4iOiJTSStTOHU3K0V5SWJRWDMzRzlGekJDR1RQUEdwWnJqcXVVRGtZNHpUcUlVPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--51cd37411e082d320b8a8010545ec9d0da82dadd; path=/; secure; HttpOnly"], "Cache-Control": ["no-cache"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://github.com/arteria/alogator"}}, {"recorded_at": "2016-12-23T10:27:28", "response": {"body": {"base64_string": "H4sIAAAAAAAAA0WNMQ7CMAxF95zij3SgKuwZOAESN7Di0FptbJSGIm6PEZWYbD/b/8UYcTAdTXTsEGMMR4TgFUN/7ocvgaMLM1rN62QL424VopSabNLe+3ZdKM2YzOYdEEsTU1p+cM88/TNvudiWGUzeKEg95CUtTc6aoZDSWLI2JCs+cO8/10dWrPasyY+SccZB1D1u2XJd3deFD2ErKCPTAAAA", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/arteria/alogator/master/CHANGELOG.txt", "headers": {"Content-Encoding": ["gzip"], "Expires": ["Fri, 23 Dec 2016 10:32:28 GMT"], "ETag": ["\"4928fac2bbe39bc2cba191cf64565a90b3f067e2\""], "X-Frame-Options": ["deny"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "X-Cache": ["MISS"], "X-Fastly-Request-ID": ["c0f2aa7a4ce86cbc0abe2546515932e0d3ed5dba"], "Accept-Ranges": ["bytes"], "X-Content-Type-Options": ["nosniff"], "X-Geo-Block-List": [""], "Cache-Control": ["max-age=300"], "Via": ["1.1 varnish"], "Access-Control-Allow-Origin": ["*"], "X-Served-By": ["cache-hhn1545-HHN"], "Content-Type": ["text/plain; charset=utf-8"], "Date": ["Fri, 23 Dec 2016 10:27:28 GMT"], "Source-Age": ["0"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["Authorization,Accept-Encoding"], "X-GitHub-Request-Id": ["C71B4C18:C465:105E805:585CFC0C"], "Content-Length": ["165"], "X-Cache-Hits": ["0"], "X-Timer": ["S1482488848.458603,VS0,VE122"], "Connection": ["keep-alive"], "Strict-Transport-Security": ["max-age=31536000"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://raw.githubusercontent.com/arteria/alogator/master/CHANGELOG.txt"}}]}