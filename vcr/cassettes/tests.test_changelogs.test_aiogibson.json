{"recorded_with": "betamax/0.8.0", "http_interactions": [{"request": {"method": "GET", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"]}, "body": {"encoding": "utf-8", "string": ""}, "uri": "https://pypi.python.org/pypi/aiogibson/json"}, "response": {"status": {"message": "OK", "code": 200}, "url": "https://pypi.python.org/pypi/aiogibson/json", "headers": {"Content-Length": ["12158"], "Connection": ["keep-alive"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Age": ["64599"], "Fastly-Debug-Digest": ["559cb6d40540d564e1813e7563587d1721c035de0dbceb621f80a7a1d2d28e92"], "Accept-Ranges": ["bytes"], "Via": ["1.1 varnish", "1.1 varnish"], "Content-Disposition": ["inline"], "X-Served-By": ["cache-iad2124-IAD, cache-hhn1535-HHN"], "X-Timer": ["S1482488775.433368,VS0,VE7"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "X-Cache": ["HIT, HIT"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-XSS-Protection": ["1; mode=block"], "X-Cache-Hits": ["1, 1"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Content-Type-Options": ["nosniff"], "Cache-Control": ["max-age=600, public"], "X-Frame-Options": ["deny"], "Date": ["Fri, 23 Dec 2016 10:26:15 GMT"], "Server": ["nginx/1.10.2"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-PYPI-LAST-SERIAL": ["2535168"], "Access-Control-Allow-Origin": ["*"]}, "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": null, \n        \"package_url\": \"http://pypi.python.org/pypi/aiogibson\", \n        \"author\": \"Nikolay Novik\", \n        \"author_email\": \"nickolainovik@gmail.com\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"POSIX\", \n        \"version\": \"0.1.3\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"aiogibson\\n=========\\n\\n.. image:: https://travis-ci.org/jettify/aiogibson.svg?branch=master\\n    :target: https://travis-ci.org/jettify/aiogibson\\n    :alt: |Build status|\\n.. image:: https://coveralls.io/repos/jettify/aiogibson/badge.png?branch=master\\n    :target: https://coveralls.io/r/jettify/aiogibson?branch=master\\n    :alt: |Coverage|\\n.. image:: https://pypip.in/v/aiogibson/badge.svg\\n    :target: https://pypi.python.org/pypi/aiogibson/\\n    :alt: |Latest PyPI version|\\n.. image:: https://pypip.in/d/aiogibson/badge.svg\\n    :target: https://pypi.python.org/pypi/aiogibson/\\n    :alt: |Number of PyPI downloads|\\n.. image:: https://pypip.in/license/aiogibson/badge.svg\\n    :target: https://pypi.python.org/pypi/aiogibson/\\n    :alt: |License|\\n\\n\\n**aiogibson** is a library for accessing a gibson_ cache database\\nfrom the asyncio_ (PEP-3156/tulip) framework.\\n\\nGibson is a high efficiency, tree based memory cache server.\\nIt uses a special trie_ structure allowing the\\nuser to perform operations on multiple key sets using a prefix\\nexpression achieving the same performance grades in the worst case,\\neven better on an average case then regular cache implementations\\nbased on hash tables.\\n\\n\\nCode heavily reused from awesome aioredis_ library. ``GibsonPool``,\\n``GibsonConnection``, almost direct copy of ``RedisPool`` and\\n``RedisConnection``, so I highly recommend to checkout aioredis_.\\n\\n\\nDocumentation\\n-------------\\nhttp://aiogibson.readthedocs.org/\\n\\n\\nInstallation\\n------------\\n\\nMake sure that you have gibson_ server compiled and running. The easiest way\\nto install *aiogibson* is by using the package on PyPi::\\n\\n   pip install aiogibson\\n\\n\\nExample\\n-------\\n\\n.. code:: python\\n\\n    import asyncio\\n    from aiogibson import create_gibson\\n\\n    loop = asyncio.get_event_loop()\\n\\n\\n    @asyncio.coroutine\\n    def go():\\n        gibson = yield from create_gibson('/tmp/gibson.sock', loop=loop)\\n        # set value\\n        yield from gibson.set(b'foo', b'bar', 7)\\n        yield from gibson.set(b'numfoo', 100, 7)\\n\\n        # get value\\n        result = yield from gibson.get(b'foo')\\n        print(result)\\n\\n        # set ttl to the value\\n        yield from gibson.ttl(b'foo', 10)\\n\\n        # increment given key\\n        yield from gibson.inc(b'numfoo')\\n\\n        # decrement given key\\n        yield from gibson.dec(b'numfoo')\\n\\n        # lock key from modification\\n        yield from gibson.lock(b'numfoo')\\n\\n        # unlock given key\\n        yield from gibson.unlock(b'numfoo')\\n\\n        # fetch keys with given prefix\\n        yield from gibson.keys(b'foo')\\n\\n        # delete value\\n        yield from gibson.delete(b'foo')\\n\\n\\n    loop.run_until_complete(go())\\n\\nUnderlying data structure trie_ allows us to perform operations on multiple\\nkey sets using a prefix expression:\\n\\n\\nMulti Commands\\n--------------\\n\\n.. code:: python\\n\\n    import asyncio\\n    from aiogibson import create_gibson\\n\\n    loop = asyncio.get_event_loop()\\n\\n\\n    @asyncio.coroutine\\n    def go():\\n        gibson = yield from create_gibson('/tmp/gibson.sock', loop=loop)\\n\\n        # set the value for keys verifying the given prefix\\n        yield from gibson.mset(b'fo', b'bar', 7)\\n        yield from gibson.mset(b'numfo', 100, 7)\\n\\n        # get the values for keys with given prefix\\n        result = yield from gibson.mget(b'fo')\\n\\n        # set the TTL for keys verifying the given prefix\\n        yield from gibson.mttl(b'fo', 10)\\n\\n        # increment by one keys verifying the given prefix.\\n        yield from gibson.minc(b'numfo')\\n\\n        # decrement by one keys verifying the given prefix\\n        yield from gibson.mdec(b'numfoo')\\n\\n        # lock keys with prefix from modification\\n        yield from gibson.mlock(b'fo')\\n\\n        # unlock keys with given prefix\\n        yield from gibson.munlock(b'fo')\\n\\n        # delete keys verifying the given prefix.\\n        yield from gibson.mdelete(b'fo')\\n\\n        # return list of keys with given prefix ``fo``\\n        yield from gibson.keys(b'fo')\\n\\n        # count items for a given prefi\\n        info = yield from gibson.stats()\\n\\n\\n    loop.run_until_complete(go())\\n\\n**aiogibson** has connection pooling support using context-manager:\\n\\n\\nConnection Pool Example\\n-----------------------\\n\\n.. code:: python\\n\\n    import asyncio\\n    from aiogibson import create_pool\\n\\n    loop = asyncio.get_event_loop()\\n\\n    @asyncio.coroutine\\n    def go():\\n        pool = yield from create_pool('/tmp/gibson.sock', minsize=5, maxsize=10,\\n                                      loop=loop)\\n        # using context manager\\n        with (yield from pool) as gibson:\\n            yield from gibson.set('foo', 'bar')\\n            value = yield from gibson.get('foo')\\n            print(value)\\n\\n        # NOTE: experimental feature\\n        # or without context manager\\n        yield from pool.set('foo', 'bar')\\n        resp = yield from pool.get('foo')\\n        yield from pool.delete('foo')\\n\\n        pool.clear()\\n\\n    loop.run_until_complete(go())\\n\\n\\nAlso you can have simple low-level interface to *gibson* server:\\n\\n\\nLow Level Commands\\n------------------\\n\\n.. code:: python\\n\\n    import asyncio\\n    from aiogibson import create_gibson\\n\\n    loop = asyncio.get_event_loop()\\n\\n\\n    @asyncio.coroutine\\n    def go():\\n        gibson = yield from create_connection('/tmp/gibson.sock', loop=loop)\\n\\n        # set value\\n        yield from gibson.execute(b'set', b'foo', b'bar', 7)\\n\\n        # get value\\n        result = yield from gibson.execute(b'get', b'foo')\\n        print(result)\\n        # delete value\\n        yield from gibson.execute(b'del', b'foo')\\n\\n\\n    loop.run_until_complete(go())\\n\\n\\nRequirements\\n------------\\n\\n* Python_ 3.3+\\n* asyncio_ or Python_ 3.4+\\n\\n\\nLicense\\n-------\\n\\nThe *aiogibson* is offered under MIT license.\\n\\n.. _Python: https://www.python.org\\n.. _asyncio: http://docs.python.org/3.4/library/asyncio.html\\n.. _gibson: http://gibson-db.in/\\n.. _aioredis: https://github.com/aio-libs/aioredis\\n.. _trie: http://en.wikipedia.org/wiki/Trie\\n\\nChanges\\n-------\\n\\n0.1.3 (2015-02-10)\\n^^^^^^^^^^^^^^^^^^\\n* Documentation published on http://aiogibson.readthedocs.org/:\\n\\n* Added wait closed finalizer;\\n\\n* Improved test coverage to 99%;\\n\\n* Fixed bug with canceled future;\\n\\n* Added limit argument to mget command;\\n\\n0.1.2 (2014-10-15)\\n^^^^^^^^^^^^^^^^^^\\n* Changed Reader interface to be similar to hiredis;\\n\\n* Most methods from high level interface now return Future;\\n\\n* Connection pool, works as drop in replacement for high level connection;\\n\\n* Added more docstrings;\\n\\n\\n0.1.1 (2014-09-06)\\n^^^^^^^^^^^^^^^^^^\\n* Improved protocol parser;\\n\\n* Added type checking in high-level commands;\\n\\n* Added check for None arguments in connection execute command;\\n\\n\\n0.1.0 (2014-08-17)\\n^^^^^^^^^^^^^^^^^^\\n* Initial release;\", \n        \"release_url\": \"http://pypi.python.org/pypi/aiogibson/0.1.3\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 3, \n        \"classifiers\": [\n            \"Development Status :: 4 - Beta\", \n            \"Environment :: Web Environment\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Operating System :: POSIX\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Topic :: Software Development\", \n            \"Topic :: Software Development :: Libraries\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"aiogibson\", \n        \"license\": \"MIT\", \n        \"summary\": \"asyncio (PEP 3156) Gibson cache support\", \n        \"home_page\": \"https://github.com/jettify/aiogibson\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-08-17T21:08:03\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/8f/5e/ec3b8c9d617842f041b5a02c0c75e1df39e8fd5f05937f50bccb7ebaf9c6/aiogibson-0.1.0.tar.gz\", \n                \"md5_digest\": \"058fbdef6ea72315f9b5b6ed994de591\", \n                \"downloads\": 1966, \n                \"filename\": \"aiogibson-0.1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"8f/5e/ec3b8c9d617842f041b5a02c0c75e1df39e8fd5f05937f50bccb7ebaf9c6/aiogibson-0.1.0.tar.gz\", \n                \"size\": 10227\n            }\n        ], \n        \"0.1.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-06T20:31:46\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a9/85/98e33e7c10cb21dd348c01c80b138e9a48fc4aa40a91a7c2a2ff3dabc150/aiogibson-0.1.1.tar.gz\", \n                \"md5_digest\": \"60d74a4986f8ab28c0bda2c9a8dc93e1\", \n                \"downloads\": 1621, \n                \"filename\": \"aiogibson-0.1.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a9/85/98e33e7c10cb21dd348c01c80b138e9a48fc4aa40a91a7c2a2ff3dabc150/aiogibson-0.1.1.tar.gz\", \n                \"size\": 12542\n            }\n        ], \n        \"0.1.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-10-15T18:41:40\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/f2/69/82aaa1bd7cce20f1ed4db413d5aabfdbb6a4c7a785f9707ae79db8e10d6d/aiogibson-0.1.2.tar.gz\", \n                \"md5_digest\": \"eb906f7f08395d706fb80bf91d362e0d\", \n                \"downloads\": 1541, \n                \"filename\": \"aiogibson-0.1.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"f2/69/82aaa1bd7cce20f1ed4db413d5aabfdbb6a4c7a785f9707ae79db8e10d6d/aiogibson-0.1.2.tar.gz\", \n                \"size\": 13437\n            }\n        ], \n        \"0.1.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-02-10T21:27:00\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/c3/b3/e6eb82732d0051d4b104bcb9987323db399677bd52ddb85663da41593081/aiogibson-0.1.3.tar.gz\", \n                \"md5_digest\": \"9eefd7219013b29a7fc0e0bd9feea031\", \n                \"downloads\": 1414, \n                \"filename\": \"aiogibson-0.1.3.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"c3/b3/e6eb82732d0051d4b104bcb9987323db399677bd52ddb85663da41593081/aiogibson-0.1.3.tar.gz\", \n                \"size\": 14205\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2015-02-10T21:27:00\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/c3/b3/e6eb82732d0051d4b104bcb9987323db399677bd52ddb85663da41593081/aiogibson-0.1.3.tar.gz\", \n            \"md5_digest\": \"9eefd7219013b29a7fc0e0bd9feea031\", \n            \"downloads\": 1414, \n            \"filename\": \"aiogibson-0.1.3.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"c3/b3/e6eb82732d0051d4b104bcb9987323db399677bd52ddb85663da41593081/aiogibson-0.1.3.tar.gz\", \n            \"size\": 14205\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:26:15"}, {"request": {"method": "GET", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"]}, "body": {"encoding": "utf-8", "string": ""}, "uri": "https://github.com/jettify/aiogibson"}, "response": {"status": {"message": "OK", "code": 200}, "url": "https://github.com/jettify/aiogibson", "headers": {"X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Served-By": ["e68303a089d42a09a9545cb48f3ff7a6"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Runtime": ["0.088574"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Date": ["Fri, 23 Dec 2016 10:26:15 GMT"], "X-GitHub-Request-Id": ["54B1D78B:C3EE:E61B2B4:585CFBC7"], "Server": ["GitHub.com"], "Content-Encoding": ["gzip"], "X-Content-Type-Options": ["nosniff"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:26:15 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiMDllZmU5ZTgzZjlhMGQ3YmNlMzUxZjBhN2Q2YjZkOTMiLCJzcHlfcmVwbyI6ImpldHRpZnkvYWlvZ2lic29uIiwic3B5X3JlcG9fYXQiOjE0ODI0ODg3NzUsIl9jc3JmX3Rva2VuIjoiQ3FvajhOZ0dLYThWWjJjaWhaenA5SzNBK1BJL25xUkJLUXNOTGpRb3hORT0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--37dcb195f71fee3401123938115e4f1ba37f5252; path=/; secure; HttpOnly"], "Content-Type": ["text/html; charset=utf-8"], "Status": ["200 OK"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-Request-Id": ["0ee9e4490ac3c18c91e87994e393edf9"], "X-XSS-Protection": ["1; mode=block"], "X-Frame-Options": ["deny"], "Cache-Control": ["no-cache"], "Transfer-Encoding": ["chunked"]}, "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:26:16"}, {"request": {"method": "GET", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"]}, "body": {"encoding": "utf-8", "string": ""}, "uri": "https://raw.githubusercontent.com/jettify/aiogibson/master/CHANGES.txt"}, "response": {"status": {"message": "OK", "code": 200}, "url": "https://raw.githubusercontent.com/jettify/aiogibson/master/CHANGES.txt", "headers": {"Content-Length": ["416"], "Connection": ["keep-alive"], "Accept-Ranges": ["bytes"], "Via": ["1.1 varnish"], "X-GitHub-Request-Id": ["C71B4C14:2ADB7:BE4B25:585CFBC8"], "X-Cache-Hits": ["0"], "X-Timer": ["S1482488776.216614,VS0,VE115"], "Strict-Transport-Security": ["max-age=31536000"], "X-Cache": ["MISS"], "Vary": ["Authorization,Accept-Encoding"], "Expires": ["Fri, 23 Dec 2016 10:31:16 GMT"], "X-Fastly-Request-ID": ["01da98c89753d163721a76ed4cf634c10b9c45df"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["cache-hhn1542-HHN"], "X-Content-Type-Options": ["nosniff"], "Cache-Control": ["max-age=300"], "X-Frame-Options": ["deny"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "Date": ["Fri, 23 Dec 2016 10:26:16 GMT"], "Content-Encoding": ["gzip"], "Source-Age": ["0"], "Content-Type": ["text/plain; charset=utf-8"], "Access-Control-Allow-Origin": ["*"], "ETag": ["\"a27c849c2806cb44060a702bf467dfd5c5f79dae\""], "X-Geo-Block-List": [""]}, "body": {"base64_string": "H4sIAAAAAAAAA3WRz27bMAzG734KXgZ0xZzY2fonzWnIUGCH7bAHGKBIjCxUEg1Kbro9fSmlTQwU0cWSSX78feR2UNFiatrjaZpu0S++wtWq62/abtX23efm74fTXMMP0lPAmFV2FGGcdt6lAQ3IY8h5fFgulSPrdoniglGZLEHSaUFslw+NCHw3RtIPymXQnpLc9y4q7/4jb0r8ZxiZnuV3xiQpcmVlETLBev2pZjy6FwnvJgsHlwfQKmr0RWfKE+Pm3MS7IF0U20pcJILFohmCimZzNL2qpr+J47a/uWB6W6dl4I8YQgYXM/Je6Uq1Q0jSxysur8ExGpcqxC8SAwHzQCbBnilI1A7g8Rn9TCPSARgFPcLj2cGWYkR9HDKR/wIH4qcEKoFhGqVcakYv9dXanngurk/Fs2kEYoSyi8wu2oJY/fdv/rt1291e8H/aiXwyafIwKk5vCzuq538jgh5QP4l4wSs47TtOHXiapdfMiv2bIp52lErlmR7wBfWUcbayyty9M9+3/d0l5uiyU17G5FElGeor8GUcLfMCAAA=", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:26:16"}]}