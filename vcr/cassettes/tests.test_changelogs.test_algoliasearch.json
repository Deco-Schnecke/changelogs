{"recorded_with": "betamax/0.8.0", "http_interactions": [{"recorded_at": "2016-12-23T10:27:08", "response": {"body": {"string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"algolia\", \n        \"package_url\": \"http://pypi.python.org/pypi/algoliasearch\", \n        \"author\": \"Algolia Team\", \n        \"author_email\": \"support@algolia.com\", \n        \"download_url\": \"\", \n        \"platform\": \"\", \n        \"version\": \"1.11.0\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"<!--NO_HTML-->\\n\\n# Algolia Search API Client for Python\\n\\nWe implemented an asynchronous version of the client that may suit your need if\\nyou are using a framework such as `aiohttp` in your backend. This version can\\nbe found [here](https://github.com/algolia/algoliasearch-client-python-async).\\n\\n\\n\\n\\n\\n[Algolia Search](https://www.algolia.com) is a hosted full-text, numerical, and faceted search engine capable of delivering realtime results from the first keystroke.\\n\\n\\nOur Python client lets you easily use the [Algolia Search API](https://www.algolia.com/doc/rest) from your backend. It wraps the [Algolia Search REST API](https://www.algolia.com/doc/rest).\\n\\n\\n\\n[![Build Status](https://travis-ci.org/algolia/algoliasearch-client-python.svg?branch=master)](https://travis-ci.org/algolia/algoliasearch-client-python) [![PyPI version](https://badge.fury.io/py/algoliasearch.svg?branch=master)](http://badge.fury.io/py/algoliasearch) [![Coverage Status](https://coveralls.io/repos/algolia/algoliasearch-client-python/badge.svg?branch=master)](https://coveralls.io/r/algolia/algoliasearch-client-python)\\n\\n\\n\\n\\n\\n\\n\\n## Table of Contents\\n\\n**Getting Started**\\n\\n1. [Getting started](#getting-started)\\n1. [Quick Start](#quick-start)\\n1. [Guides & Tutorials](#guides--tutorials)\\n\\n\\n**Commands Reference**\\n\\nGetting started\\n\\n1. [Install](#install)\\n1. [Init index](#init-index---init_index)\\n\\nSearch\\n\\n1. [Search in an index](#search-in-an-index---search)\\n1. [Find by IDs](#find-by-ids---get_objects)\\n\\nIndexing\\n\\n1. [Add objects](#add-objects---add_objects)\\n1. [Update objects](#update-objects---save_objects)\\n1. [Partial update objects](#partial-update-objects---partial_update_objects)\\n1. [Delete objects](#delete-objects---delete_objects)\\n\\nSettings\\n\\n1. [Get settings](#get-settings---get_settings)\\n1. [Set settings](#set-settings)\\n\\nManage Indices\\n\\n1. [List indices](#list-indices---list_indexes)\\n1. [Delete index](#delete-index---delete_index)\\n1. [Clear index](#clear-index---clear_index)\\n1. [Copy index](#copy-index---copy_index)\\n1. [Move index](#move-index---move_index)\\n\\nApi Keys\\n\\n1. [Generate key](#generate-key---generate_secured_api_key)\\n\\n\\nSynonyms\\n\\n1. [Save synonym](#save-synonym---save_synonym)\\n1. [Batch synonyms](#batch-synonyms---batch_synonyms)\\n1. [Editing Synonyms](#editing-synonyms)\\n1. [Delete Synonyms](#delete-synonyms---delete_synonyms)\\n1. [Clear all synonyms](#clear-all-synonyms---clear_synonyms)\\n1. [Get synonym](#get-synonym---get_synonym)\\n1. [Search synonyms](#search-synonyms---search_synonyms)\\n\\n\\nAdvanced\\n\\n1. [Custom batch](#custom-batch---batch)\\n1. [Wait for operations](#wait-for-operations---wait_task)\\n1. [Multiple queries](#multiple-queries---multiple_queries)\\n1. [Delete by query](#delete-by-query---delete_by_query)\\n1. [Backup / Export an index](#backup--export-an-index---browse)\\n1. [List api keys](#list-api-keys---list_api_keys)\\n1. [Add user key](#add-user-key---add_user_key)\\n1. [Update user key](#update-user-key---update_user_key)\\n1. [Delete user key](#delete-user-key---delete_user_key)\\n1. [Get key permissions](#get-key-permissions---get_user_key_acl)\\n1. [Get Logs](#get-logs---get_logs)\\n\\n\\n\\n## Guides & Tutorials\\n\\nCheck our [online guides](https://www.algolia.com/doc):\\n\\n * [Data Formatting](https://www.algolia.com/doc/indexing/formatting-your-data)\\n * [Import and Synchronize data](https://www.algolia.com/doc/indexing/import-synchronize-data/python)\\n * [Autocomplete](https://www.algolia.com/doc/search/auto-complete)\\n * [Instant search page](https://www.algolia.com/doc/search/instant-search)\\n * [Filtering and Faceting](https://www.algolia.com/doc/search/filtering-faceting)\\n * [Sorting](https://www.algolia.com/doc/relevance/sorting)\\n * [Ranking Formula](https://www.algolia.com/doc/relevance/ranking)\\n * [Typo-Tolerance](https://www.algolia.com/doc/relevance/typo-tolerance)\\n * [Geo-Search](https://www.algolia.com/doc/geo-search/geo-search-overview)\\n * [Security](https://www.algolia.com/doc/security/best-security-practices)\\n * [API-Keys](https://www.algolia.com/doc/security/api-keys)\\n * [REST API](https://www.algolia.com/doc/rest)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n<!--/NO_HTML-->\\n\\n\\n\\n\\n## Getting Started\\n\\n### Install\\n\\n\\n\\n\\nInstall AlgoliaSearch using pip:\\n\\n```bash\\npip install --upgrade algoliasearch\\n```\\n\\n\\n### Init index - `init_index`\\n\\nTo initialize the client, you need your **Application ID** and **API Key**. You can find both of them on [your Algolia account](https://www.algolia.com/api-keys).\\n\\n```python\\nfrom algoliasearch import algoliasearch\\n\\nclient = algoliasearch.Client(\\\"YourApplicationID\\\", 'YourAPIKey')\\nindex = client.init_index(\\\"contact\\\")\\n```\\n\\n**Note**: If you use this API Client with Google AppEngine (Thanks [@apassant](https://github.com/apassant)), it will use `urlfetch` instead of using the `request` module. Please be aware of [urlfetch's limits](https://cloud.google.com/appengine/docs/python/urlfetch/), and note that SSL certificates will not be verified for calls to domains other than algolia.net due to the lack of SNI support in `urlfetch`. To run unit tests on the AppEngine stub, please define an `APPENGINE_RUNTIME` enviroment variable.\\n\\n\\n\\n### Quick Start\\n\\n\\n\\nIn 30 seconds, this quick start tutorial will show you how to index and search objects.\\n\\nWithout any prior configuration, you can start indexing [500 contacts](https://github.com/algolia/algoliasearch-client-csharp/blob/master/contacts.json) in the ```contacts``` index using the following code:\\n```python\\nindex = client.init_index(\\\"contact\\\")\\nbatch = json.load(open('contacts.json'))\\nindex.add_objects(batch)\\n```\\n\\nYou can now search for contacts using firstname, lastname, company, etc. (even with typos):\\n\\n```python\\n# search by firstname\\nprint index.search(\\\"jimmie\\\")\\n# search a firstname with typo\\nprint index.search(\\\"jimie\\\")\\n# search for a company\\nprint index.search(\\\"california paint\\\")\\n# search for a firstname & company\\nprint index.search(\\\"jimmie paint\\\")\\n```\\n\\nSettings can be customized to tune the search behavior. For example, you can add a custom sort by number of followers to the already great built-in relevance:\\n\\n```python\\nindex.set_settings({\\\"customRanking\\\": [\\\"desc(followers)\\\"]})\\n```\\n\\nYou can also configure the list of attributes you want to index by order of importance (first = most important):\\n\\n```python\\nindex.set_settings({\\\"searchableAttributes\\\": [\\\"lastname\\\", \\\"firstname\\\", \\\"company\\\", \\n                                         \\\"email\\\", \\\"city\\\", \\\"address\\\"]})\\n```\\n\\nSince the engine is designed to suggest results as you type, you'll generally search by prefix. In this case the order of attributes is very important to decide which hit is the best:\\n\\n```python\\nprint index.search(\\\"or\\\")\\nprint index.search(\\\"jim\\\")\\n```\\n\\n\\n**Note:** If you are building a web application, you may be more interested in using our [JavaScript client](https://github.com/algolia/algoliasearch-client-js) to perform queries. It brings two benefits:\\n  * Your users get a better response time by not going through your servers\\n  * It will offload unnecessary tasks from your servers\\n\\n```html\\n<script src=\\\"https://cdn.jsdelivr.net/algoliasearch/3/algoliasearch.min.js\\\"></script>\\n<script>\\nvar client = algoliasearch('ApplicationID', 'apiKey');\\nvar index = client.initIndex('indexName');\\n\\n// perform query \\\"jim\\\"\\nindex.search('jim', searchCallback);\\n\\n// the last optional argument can be used to add search parameters\\nindex.search(\\n  'jim', {\\n    hitsPerPage: 5,\\n    facets: '*',\\n    maxValuesPerFacet: 10\\n  },\\n  searchCallback\\n);\\n\\nfunction searchCallback(err, content) {\\n  if (err) {\\n    console.error(err);\\n    return;\\n  }\\n\\n  console.log(content);\\n}\\n</script>\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n## Search\\n\\n### Search in an index - `search`\\n\\n\\n**Notes:** If you are building a web application, you may be more interested in using our [JavaScript client](https://github.com/algolia/algoliasearch-client-js) to perform queries. It brings two benefits:\\n  * Your users get a better response time by not going through your servers\\n  * It will offload unnecessary tasks from your servers.\\n\\n\\nTo perform a search, you only need to initialize the index and perform a call to the search function.\\n\\nThe search query allows only to retrieve 1000 hits. If you need to retrieve more than 1000 hits (e.g. for SEO), you can use [Backup / Retrieve all index content](#backup--export-an-index).\\n\\n```python\\nindex = client.init_index(\\\"contacts\\\")\\nres = index.search(\\\"query string\\\")\\nres = index.search(\\\"query string\\\", { \\\"attributesToRetrieve\\\": \\\"firstname,lastname\\\", \\\"hitsPerPage\\\": 20})\\n```\\n\\n### Search Response Format\\n\\n#### Sample\\n\\nThe server response will look like:\\n\\n```json\\n{\\n  \\\"hits\\\": [\\n    {\\n      \\\"firstname\\\": \\\"Jimmie\\\",\\n      \\\"lastname\\\": \\\"Barninger\\\",\\n      \\\"objectID\\\": \\\"433\\\",\\n      \\\"_highlightResult\\\": {\\n        \\\"firstname\\\": {\\n          \\\"value\\\": \\\"<em>Jimmie</em>\\\",\\n          \\\"matchLevel\\\": \\\"partial\\\"\\n        },\\n        \\\"lastname\\\": {\\n          \\\"value\\\": \\\"Barninger\\\",\\n          \\\"matchLevel\\\": \\\"none\\\"\\n        },\\n        \\\"company\\\": {\\n          \\\"value\\\": \\\"California <em>Paint</em> & Wlpaper Str\\\",\\n          \\\"matchLevel\\\": \\\"partial\\\"\\n        }\\n      }\\n    }\\n  ],\\n  \\\"page\\\": 0,\\n  \\\"nbHits\\\": 1,\\n  \\\"nbPages\\\": 1,\\n  \\\"hitsPerPage\\\": 20,\\n  \\\"processingTimeMS\\\": 1,\\n  \\\"query\\\": \\\"jimmie paint\\\",\\n  \\\"params\\\": \\\"query=jimmie+paint&attributesToRetrieve=firstname,lastname&hitsPerPage=50\\\"\\n}\\n```\\n\\n#### Fields\\n\\n- `hits` (array): The hits returned by the search, sorted according to the ranking formula.\\n\\n    Hits are made of the JSON objects that you stored in the index; therefore, they are mostly schema-less. However, Algolia does enrich them with a few additional fields:\\n\\n    - `_highlightResult` (object, optional): Highlighted attributes. *Note: Only returned when [attributesToHighlight](#attributestohighlight) is non-empty.*\\n\\n        - `${attribute_name}` (object): Highlighting for one attribute.\\n\\n            - `value` (string): Markup text with occurrences highlighted. The tags used for highlighting are specified via [highlightPreTag](#highlightpretag) and [highlightPostTag](#highlightposttag).\\n\\n            - `matchLevel` (string, enum) = {`none` | `partial` | `full`}: Indicates how well the attribute matched the search query.\\n\\n            - `matchedWords` (array): List of words *from the query* that matched the object.\\n\\n            - `fullyHighlighted` (boolean): Whether the entire attribute value is highlighted.\\n\\n    - `_snippetResult` (object, optional): Snippeted attributes. *Note: Only returned when [attributesToSnippet](#attributestosnippet) is non-empty.*\\n\\n        - `${attribute_name}` (object): Snippeting for the corresponding attribute.\\n\\n            - `value` (string): Markup text with occurrences highlighted and optional ellipsis indicators. The tags used for highlighting are specified via [highlightPreTag](#highlightpretag) and [highlightPostTag](#highlightposttag). The text used to indicate ellipsis is specified via [snippetEllipsisText](#snippetellipsistext).\\n\\n            - `matchLevel` (string, enum) = {`none` | `partial` | `full`}: Indicates how well the attribute matched the search query.\\n\\n    - `_rankingInfo` (object, optional): Ranking information. *Note: Only returned when [getRankingInfo](#getrankinginfo) is `true`.*\\n\\n        - `nbTypos` (integer): Number of typos encountered when matching the record. Corresponds to the `typos` ranking criterion in the ranking formula.\\n\\n        - `firstMatchedWord` (integer): Position of the most important matched attribute in the attributes to index list. Corresponds to the `attribute` ranking criterion in the ranking formula.\\n\\n        - `proximityDistance` (integer): When the query contains more than one word, the sum of the distances between matched words. Corresponds to the `proximity` criterion in the ranking formula.\\n\\n        - `userScore` (integer): Custom ranking for the object, expressed as a single numerical value. Conceptually, it's what the position of the object would be in the list of all objects sorted by custom ranking. Corresponds to the `custom` criterion in the ranking formula.\\n\\n        - `geoDistance` (integer): Distance between the geo location in the search query and the best matching geo location in the record, divided by the geo precision.\\n\\n        - `geoPrecision` (integer): Precision used when computed the geo distance, in meters. All distances will be floored to a multiple of this precision.\\n\\n        - `nbExactWords` (integer): Number of exactly matched words. If `alternativeAsExact` is set, it may include plurals and/or synonyms.\\n\\n        - `words` (integer): Number of matched words, including prefixes and typos.\\n\\n        - `filters` (integer): *This field is reserved for advanced usage.* It will be zero in most cases.\\n\\n    - `_distinctSeqID` (integer): *Note: Only returned when [distinct](#distinct) is non-zero.* When two consecutive results have the same value for the attribute used for \\\"distinct\\\", this field is used to distinguish between them.\\n\\n- `nbHits` (integer): Number of hits that the search query matched.\\n\\n- `page` (integer): Index of the current page (zero-based). See the [page](#page) search parameter. *Note: Not returned if you use `offset`/`length` for pagination.*\\n\\n- `hitsPerPage` (integer): Maximum number of hits returned per page. See the [hitsPerPage](#hitsperpage) search parameter. *Note: Not returned if you use `offset`/`length` for pagination.*\\n\\n- `nbPages` (integer): Number of pages corresponding to the number of hits. Basically, `ceil(nbHits / hitsPerPage)`. *Note: Not returned if you use `offset`/`length` for pagination.*\\n\\n- `processingTimeMS` (integer): Time that the server took to process the request, in milliseconds. *Note: This does not include network time.*\\n\\n- `query` (string): An echo of the query text. See the [query](#query) search parameter.\\n\\n- `queryAfterRemoval` (string, optional): *Note: Only returned when [removeWordsIfNoResults](#removewordsifnoresults) is set to `lastWords` or `firstWords`.* A markup text indicating which parts of the original query have been removed in order to retrieve a non-empty result set. The removed parts are surrounded by `<em>` tags.\\n\\n- `params` (string, URL-encoded): An echo of all search parameters.\\n\\n- `message` (string, optional): Used to return warnings about the query.\\n\\n\\n- `aroundLatLng` (string, optional): *Note: Only returned when [aroundLatLngViaIP](#aroundlatlngviaip) is set.* The computed geo location. **Warning: for legacy reasons, this parameter is a string and not an object.** Format: `${lat},${lng}`, where the latitude and longitude are expressed as decimal floating point numbers.\\n\\n\\n- `automaticRadius` (integer, optional): *Note: Only returned for geo queries without an explicitly specified radius (see `aroundRadius`).* The automatically computed radius. **Warning: for legacy reasons, this parameter is a string and not an integer.**\\n\\nWhen [getRankingInfo](#getrankinginfo) is set to `true`, the following additional fields are returned:\\n\\n- `serverUsed` (string): Actual host name of the server that processed the request. (Our DNS supports automatic failover and load balancing, so this may differ from the host name used in the request.)\\n\\n- `parsedQuery` (string): The query string that will be searched, after normalization. Normalization includes removing stop words (if [removeStopWords](#removestopwords) is enabled), and transforming portions of the query string into phrase queries (see [advancedSyntax](#advancedsyntax)).\\n\\n- `timeoutCounts` (boolean): Whether a timeout was hit when computing the facet counts. When `true`, the counts will be interpolated (i.e. approximate). See also `exhaustiveFacetsCount`.\\n\\n- `timeoutHits` (boolean): Whether a timeout was hit when retrieving the hits. When true, some results may be missing.\\n\\n... and ranking information is also added to each of the hits (see above).\\n\\nWhen [facets](#facets) is non-empty, the following additional fields are returned:\\n\\n- `facets` (object): Maps each facet name to the corresponding facet counts:\\n\\n    - `${facet_name}` (object): Facet counts for the corresponding facet name:\\n\\n        - `${facet_value}` (integer): Count for this facet value.\\n\\n- `facets_stats` (object, optional): *Note: Only returned when at least one of the returned facets contains numerical values.* Statistics for numerical facets:\\n\\n    - `${facet_name}` (object): The statistics for a given facet:\\n\\n        - `min` (integer | float): The minimum value in the result set.\\n\\n        - `max` (integer | float): The maximum value in the result set.\\n\\n        - `avg` (integer | float): The average facet value in the result set.\\n\\n        - `sum` (integer | float): The sum of all values in the result set.\\n\\n- `exhaustiveFacetsCount` (boolean): Whether the counts are exhaustive (`true`) or approximate (`false`). *Note: When using [distinct](#distinct), the facet counts cannot be exhaustive.*\\n\\n### Search Parameters\\n\\nHere is the list of parameters you can use with the search method (`search` [scope](#scope)):\\nParameters that can also be used in a setSettings also have the `indexing` [scope](#scope)\\n\\n**Search**\\n\\n- [query](#query) `search`\\n\\n**Attributes**\\n\\n- [attributesToRetrieve](#attributestoretrieve) `settings`, `search`\\n- [restrictSearchableAttributes](#restrictsearchableattributes) `search`\\n\\n**Filtering / Faceting**\\n\\n- [filters](#filters) `search`\\n- [facets](#facets) `search`\\n- [maxValuesPerFacet](#maxvaluesperfacet) `settings`, `search`\\n\\n**Highlighting / Snippeting**\\n\\n- [attributesToHighlight](#attributestohighlight) `settings`, `search`\\n- [attributesToSnippet](#attributestosnippet) `settings`, `search`\\n- [highlightPreTag](#highlightpretag) `settings`, `search`\\n- [highlightPostTag](#highlightposttag) `settings`, `search`\\n- [snippetEllipsisText](#snippetellipsistext) `settings`, `search`\\n- [restrictHighlightAndSnippetArrays](#restricthighlightandsnippetarrays) `settings`, `search`\\n\\n**Pagination**\\n\\n- [page](#page) `search`\\n- [hitsPerPage](#hitsperpage) `settings`, `search`\\n- [offset](#offset) `search`\\n- [length](#length) `search`\\n\\n**Typos**\\n\\n- [minWordSizefor1Typo](#minwordsizefor1typo) `settings`, `search`\\n- [minWordSizefor2Typos](#minwordsizefor2typos) `settings`, `search`\\n- [typoTolerance](#typotolerance) `settings`, `search`\\n- [allowTyposOnNumericTokens](#allowtyposonnumerictokens) `settings`, `search`\\n- [ignorePlurals](#ignoreplurals) `settings`, `search`\\n- [disableTypoToleranceOnAttributes](#disabletypotoleranceonattributes) `settings`, `search`\\n\\n**Geo-Search**\\n\\n- [aroundLatLng](#aroundlatlng) `search`\\n- [aroundLatLngViaIP](#aroundlatlngviaip) `search`\\n- [aroundRadius](#aroundradius) `search`\\n- [aroundPrecision](#aroundprecision) `search`\\n- [minimumAroundRadius](#minimumaroundradius) `search`\\n- [insideBoundingBox](#insideboundingbox) `search`\\n- [insidePolygon](#insidepolygon) `search`\\n\\n**Query Strategy**\\n\\n- [queryType](#querytype) `settings`, `search`\\n- [removeWordsIfNoResults](#removewordsifnoresults) `settings`, `search`\\n- [advancedSyntax](#advancedsyntax) `settings`, `search`\\n- [optionalWords](#optionalwords) `settings`, `search`\\n- [removeStopWords](#removestopwords) `settings`, `search`\\n- [disableExactOnAttributes](#disableexactonattributes) `settings`, `search`\\n- [exactOnSingleWordQuery](#exactonsinglewordquery) `settings`, `search`\\n- [alternativesAsExact](#alternativesasexact) `settings`, `search`\\n\\n**Advanced**\\n\\n- [distinct](#distinct) `settings`, `search`\\n- [getRankingInfo](#getrankinginfo) `search`\\n- [numericFilters (deprecated)](#numericfilters-deprecated) `search`\\n- [tagFilters (deprecated)](#tagfilters-deprecated) `search`\\n- [facetFilters (deprecated)](#facetfilters-deprecated) `search`\\n- [analytics](#analytics) `search`\\n- [analyticsTags](#analyticstags) `search`\\n- [synonyms](#synonyms) `search`\\n- [replaceSynonymsInHighlight](#replacesynonymsinhighlight) `search`, `settings`\\n- [minProximity](#minproximity) `search`, `settings`\\n- [responseFields](#responsefields) `search`, `settings`\\n\\n### Multiple queries - `multiple_queries`\\n\\nYou can send multiple queries with a single API call using a batch of queries:\\n\\n```python\\n# perform 3 queries in a single API call:\\n# - 1st query targets index `categories`\\n# - 2nd and 3rd queries target index `products` \\nresults = self.client.multiple_queries([{\\\"indexName\\\" : \\\"categories\\\", \\\"query\\\" : myQueryString, \\\"hitsPerPage\\\": 3}\\n  , {\\\"indexName\\\" : \\\"categories\\\", \\\"query\\\" : myQueryString, \\\"hitsPerPage\\\": 3, \\\"filters\\\": \\\"_tags:promotion\\\"}\\n  , {\\\"indexName\\\" : \\\"categories\\\", \\\"query\\\" : myQueryString, \\\"hitsPerPage\\\": 10}])\\n\\nprint results[\\\"results\\\"]\\n```\\n\\nYou can specify a `strategy` parameter to optimize your multiple queries:\\n\\n- `none`: Execute the sequence of queries until the end.\\n- `stopIfEnoughMatches`: Execute the sequence of queries until the number of hits is reached by the sum of hits.\\n\\n#### Response\\n\\nThe resulting JSON contains the following fields:\\n\\n- `results` (array): The results for each request, in the order they were submitted. The contents are the same as in [Search in an index](#search-in-an-index---search).\\n\\n    Each result also includes the following additional fields:\\n\\n    - `index` (string): The name of the targeted index.\\n\\n    - `processed` (boolean, optional): *Note: Only returned when `strategy` is `stopIfEnoughmatches`.* Whether the query was processed.\\n\\n\\n\\n### Find by IDs - `get_objects`\\n\\nYou can easily retrieve an object using its `objectID` and optionally specify a comma separated list of attributes you want:\\n\\n```python\\n# Retrieves all attributes\\nindex.get_object(\\\"myID\\\")\\n# Retrieves firstname and lastname attributes\\nres = index.get_object(\\\"myID\\\", \\\"firstname,lastname\\\")\\n# Retrieves only the firstname attribute\\nres = index.get_object(\\\"myID\\\", \\\"firstname\\\")\\n```\\n\\nYou can also retrieve a set of objects:\\n\\n```python\\nres = index.get_objects([\\\"myID1\\\", \\\"myID2\\\"])\\n```\\n\\n\\n\\n\\n## Indexing\\n\\n\\n\\n### Add objects - `add_objects`\\n\\nEach entry in an index has a unique identifier called `objectID`. There are two ways to add an entry to the index:\\n\\n 1. Supplying your own `objectID`.\\n 2. Using automatic `objectID` assignment. You will be able to access it in the answer.\\n\\nYou don't need to explicitly create an index, it will be automatically created the first time you add an object.\\nObjects are schema less so you don't need any configuration to start indexing. If you wish to configure things, the settings section provides details about advanced settings.\\n\\nExample with automatic `objectID` assignments:\\n\\n```python\\nres = index.add_objects([{\\\"firstname\\\": \\\"Jimmie\\\", \\n                         \\\"lastname\\\": \\\"Barninger\\\"},\\n                        {\\\"firstname\\\": \\\"Warren\\\", \\n                         \\\"lastname\\\": \\\"Speach\\\"}])\\n```\\n\\nExample with manual `objectID` assignments:\\n\\n```python\\nres = index.add_objects([{\\\"objectID\\\": \\\"1\\\",\\n                         \\\"firstname\\\": \\\"Jimmie\\\",\\n                         \\\"lastname\\\": \\\"Barninger\\\"},\\n                        {\\\"objectID\\\": \\\"2\\\",\\n                         \\\"firstname\\\": \\\"Warren\\\",\\n                         \\\"lastname\\\": \\\"Speach\\\"}])\\n```\\n\\nTo add a single object, use the `[Add object](#add-object---add_object)` method:\\n\\n```python\\nres = index.add_object({\\\"firstname\\\": \\\"Jimmie\\\", \\n                       \\\"lastname\\\": \\\"Barninger\\\"}, \\\"myID\\\")\\nprint \\\"ObjectID=%s\\\" % res[\\\"objectID\\\"]\\n```\\n\\n### Update objects - `save_objects`\\n\\nYou have three options when updating an existing object:\\n\\n 1. Replace all its attributes.\\n 2. Replace only some attributes.\\n 3. Apply an operation to some attributes.\\n\\nExample on how to replace all attributes existing objects:\\n\\n```python\\nres = index.save_objects([{\\\"firstname\\\": \\\"Jimmie\\\", \\n                          \\\"lastname\\\": \\\"Barninger\\\",\\n                           \\\"objectID\\\": \\\"myID1\\\"},\\n                          {\\\"firstname\\\": \\\"Warren\\\", \\n                          \\\"lastname\\\": \\\"Speach\\\",\\n                           \\\"objectID\\\": \\\"myID2\\\"}])\\n```\\n\\nTo update a single object, you can use the `save_object` method:\\n\\n```python\\nindex.save_object({\\\"firstname\\\": \\\"Jimmie\\\", \\n                  \\\"lastname\\\": \\\"Barninger\\\", \\n                  \\\"city\\\": \\\"New York\\\",\\n                  \\\"objectID\\\": \\\"myID\\\"})\\n```\\n\\n\\n### Partial update objects - `partial_update_objects`\\n\\nYou have many ways to update an object's attributes:\\n\\n 1. Set the attribute value\\n 2. Add a string or number element to an array\\n 3. Remove an element from an array\\n 4. Add a string or number element to an array if it doesn't exist\\n 5. Increment an attribute\\n 6. Decrement an attribute\\n\\nExample to update only the city attribute of an existing object:\\n\\n```python\\nindex.partial_update_object({\\\"city\\\": \\\"San Francisco\\\", \\n                           \\\"objectID\\\": \\\"myID\\\"})\\n```\\n\\nExample to add a tag:\\n\\n```python\\nindex.partial_update_object({\\\"_tags\\\": { \\\"value\\\": \\\"MyTag\\\", \\\"_operation\\\": \\\"Add\\\"}, \\n                           \\\"objectID\\\": \\\"myID\\\"})\\n```\\n\\nExample to remove a tag:\\n\\n```python\\nindex.partial_update_object({\\\"_tags\\\": { \\\"value\\\": \\\"MyTag\\\", \\\"_operation\\\": \\\"Remove\\\"}, \\n                           \\\"objectID\\\": \\\"myID\\\"})\\n```\\n\\nExample to add a tag if it doesn't exist:\\n\\n```python\\nindex.partial_update_object({\\\"_tags\\\": { \\\"value\\\": \\\"MyTag\\\", \\\"_operation\\\": \\\"AddUnique\\\"}, \\n                           \\\"objectID\\\": \\\"myID\\\"})\\n```\\n\\nExample to increment a numeric value:\\n\\n```python\\nindex.partial_update_object({\\\"price\\\": { \\\"value\\\": 42, \\\"_operation\\\": \\\"Increment\\\"}, \\n                           \\\"objectID\\\": \\\"myID\\\"})\\n```\\n\\nNote: Here we are incrementing the value by `42`. To increment just by one, put\\n`value:1`.\\n\\nExample to decrement a numeric value:\\n\\n```python\\nindex.partial_update_object({\\\"price\\\": { \\\"value\\\": 42, \\\"_operation\\\": \\\"Decrement\\\"}, \\n                           \\\"objectID\\\": \\\"myID\\\"})\\n```\\n\\nNote: Here we are decrementing the value by `42`. To decrement just by one, put\\n`value:1`.\\n\\nTo partial update multiple objects using one API call, you can use the `[Partial update objects](#partial-update-objects---partial_update_objects)` method:\\n\\n```python\\nres = index.partial_update_objects([{\\\"firstname\\\": \\\"Jimmie\\\", \\n                                   \\\"objectID\\\": \\\"myID1\\\"},\\n                                  {\\\"firstname\\\": \\\"Warren\\\", \\n                                   \\\"objectID\\\": \\\"myID2\\\"}])\\n```\\n\\n\\n### Delete objects - `delete_objects`\\n\\nYou can delete objects using their `objectID`:\\n\\n```python\\nres = index.delete_objects([\\\"myID1\\\", \\\"myID2\\\"])\\n```\\n\\nTo delete a single object, you can use the `[Delete object](#delete-object---delete_object)` method:\\n\\n```python\\nindex.delete_object(\\\"myID\\\")\\n```\\n\\n### Delete by query - `delete_by_query`\\n\\nYou can delete all objects matching a single query with the following code. Internally, the API client performs the query, deletes all matching hits, and waits until the deletions have been applied.\\n\\n\\nTake your precautions when using this method. Calling it with an empty query will result in cleaning the index of all its records.\\n\\n```python\\nparams = {}\\nindex.delete_by_query(\\\"John\\\", params)\\n```\\n\\n### Wait for operations - `wait_task`\\n\\nAll write operations in Algolia are asynchronous by design.\\n\\nIt means that when you add or update an object to your index, our servers will\\nreply to your request with a `taskID` as soon as they understood the write\\noperation.\\n\\nThe actual insert and indexing will be done after replying to your code.\\n\\nYou can wait for a task to complete using the `waitTask` method on the `taskID` returned by a write operation.\\n\\nFor example, to wait for indexing of a new object:\\n\\n```python\\nres = index.add_object({\\\"firstname\\\": \\\"Jimmie\\\", \\n                       \\\"lastname\\\": \\\"Barninger\\\"})\\nindex.wait_task(res[\\\"taskID\\\"])\\n```\\n\\nIf you want to ensure multiple objects have been indexed, you only need to check\\nthe biggest `taskID`.\\n\\n\\n## Settings\\n\\n\\n\\n### Get settings - `get_settings`\\n\\nYou can retrieve settings:\\n\\n```python\\nsettings = index.get_settings()\\nprint settings\\n```\\n\\n### Set settings\\n\\n```python\\nindex.set_settings({\\\"customRanking\\\": [\\\"desc(followers)\\\"]})\\n```\\n\\n**Warning**\\n\\nPerformance wise, it's better to do a `` before pushing the data\\n\\n#### Replica settings\\n\\nYou can forward all settings updates to the replicas of an index by using the `forwardToReplicas` option:\\n\\n```python\\nindex.set_settings({\\\"customRanking\\\": [\\\"desc(followers)\\\"]}, True)\\n```\\n\\n\\n\\n### Index settings parameters\\n\\nHere is the list of parameters you can use with the set settings method (`settings` [scope](#scope)).\\n\\n\\nParameters that can be overridden at search time also have the `search` [scope](#scope).\\n\\n**Attributes**\\n\\n- [searchableAttributes](#searchableattributes) `settings`\\n- [attributesForFaceting](#attributesforfaceting) `settings`\\n- [attributesToRetrieve](#attributestoretrieve) `settings`, `search`\\n- [unretrievableAttributes](#unretrievableattributes) `settings`\\n\\n**Ranking**\\n\\n- [ranking](#ranking) `settings`\\n- [customRanking](#customranking) `settings`\\n- [replicas](#replicas) `settings`\\n\\n**Filtering / Faceting**\\n\\n- [maxValuesPerFacet](#maxvaluesperfacet) `settings`, `search`\\n\\n**Highlighting / Snippeting**\\n\\n- [attributesToHighlight](#attributestohighlight) `settings`, `search`\\n- [attributesToSnippet](#attributestosnippet) `settings`, `search`\\n- [highlightPreTag](#highlightpretag) `settings`, `search`\\n- [highlightPostTag](#highlightposttag) `settings`, `search`\\n- [snippetEllipsisText](#snippetellipsistext) `settings`, `search`\\n\\n**Pagination**\\n\\n- [hitsPerPage](#hitsperpage) `settings`, `search`\\n\\n**Typos**\\n\\n- [minWordSizefor1Typo](#minwordsizefor1typo) `settings`, `search`\\n- [minWordSizefor2Typos](#minwordsizefor2typos) `settings`, `search`\\n- [typoTolerance](#typotolerance) `settings`, `search`\\n- [allowTyposOnNumericTokens](#allowtyposonnumerictokens) `settings`, `search`\\n- [ignorePlurals](#ignoreplurals) `settings`, `search`\\n- [disableTypoToleranceOnAttributes](#disabletypotoleranceonattributes) `settings`, `search`\\n- [separatorsToIndex](#separatorstoindex) `settings`\\n\\n**Query Strategy**\\n\\n- [queryType](#querytype) `settings`, `search`\\n- [removeWordsIfNoResults](#removewordsifnoresults) `settings`, `search`\\n- [advancedSyntax](#advancedsyntax) `settings`, `search`\\n- [optionalWords](#optionalwords) `settings`, `search`\\n- [removeStopWords](#removestopwords) `settings`, `search`\\n- [disablePrefixOnAttributes](#disableprefixonattributes) `settings`\\n- [disableExactOnAttributes](#disableexactonattributes) `settings`, `search`\\n- [exactOnSingleWordQuery](#exactonsinglewordquery) `settings`, `search`\\n- [alternativesAsExact](#alternativesasexact) `settings`, `search`\\n\\n**Advanced**\\n\\n- [attributeForDistinct](#attributefordistinct) `settings`\\n- [distinct](#distinct) `settings`, `search`\\n- [numericAttributesForFiltering](#numericattributesforfiltering) `settings`\\n- [allowCompressionOfIntegerArray](#allowcompressionofintegerarray) `settings`\\n- [altCorrections](#altcorrections) `settings`\\n- [placeholders](#placeholders) `settings`\\n\\n## Parameters\\n\\n### Overview\\n\\n#### Scope\\n\\nEach parameter in this page has a scope. Depending on the scope, you can use the parameter within the `setSettings`\\nand/or the `search` method\\n\\nThey are three scopes:\\n\\n- `settings`: The setting can only be used in the `setSettings` method\\n- `search`: The setting can only be used in the `search` method\\n- `settings` `search`: The setting can be used in the `setSettings` method and be override in the`search` method\\n\\n\\n#### Parameters List\\n\\n**Search**\\n\\n- [query](#query) `search`\\n\\n**Attributes**\\n\\n- [searchableAttributes](#searchableattributes) `settings`\\n- [attributesForFaceting](#attributesforfaceting) `settings`\\n- [unretrievableAttributes](#unretrievableattributes) `settings`\\n- [attributesToRetrieve](#attributestoretrieve) `settings`, `search`\\n- [restrictSearchableAttributes](#restrictsearchableattributes) `search`\\n\\n**Ranking**\\n\\n- [ranking](#ranking) `settings`\\n- [customRanking](#customranking) `settings`\\n- [replicas](#replicas) `settings`\\n\\n**Filtering / Faceting**\\n\\n- [filters](#filters) `search`\\n- [facets](#facets) `search`\\n- [maxValuesPerFacet](#maxvaluesperfacet) `settings`, `search`\\n\\n**Highlighting / Snippeting**\\n\\n- [attributesToHighlight](#attributestohighlight) `settings`, `search`\\n- [attributesToSnippet](#attributestosnippet) `settings`, `search`\\n- [highlightPreTag](#highlightpretag) `settings`, `search`\\n- [highlightPostTag](#highlightposttag) `settings`, `search`\\n- [snippetEllipsisText](#snippetellipsistext) `settings`, `search`\\n- [restrictHighlightAndSnippetArrays](#restricthighlightandsnippetarrays) `settings`, `search`\\n\\n**Pagination**\\n\\n- [page](#page) `search`\\n- [hitsPerPage](#hitsperpage) `settings`, `search`\\n- [offset](#offset) `search`\\n- [length](#length) `search`\\n\\n**Typos**\\n\\n- [minWordSizefor1Typo](#minwordsizefor1typo) `settings`, `search`\\n- [minWordSizefor2Typos](#minwordsizefor2typos) `settings`, `search`\\n- [typoTolerance](#typotolerance) `settings`, `search`\\n- [allowTyposOnNumericTokens](#allowtyposonnumerictokens) `settings`, `search`\\n- [ignorePlurals](#ignoreplurals) `settings`, `search`\\n- [disableTypoToleranceOnAttributes](#disabletypotoleranceonattributes) `settings`, `search`\\n- [separatorsToIndex](#separatorstoindex) `settings`\\n\\n**Geo-Search**\\n\\n- [aroundLatLng](#aroundlatlng) `search`\\n- [aroundLatLngViaIP](#aroundlatlngviaip) `search`\\n- [aroundRadius](#aroundradius) `search`\\n- [aroundPrecision](#aroundprecision) `search`\\n- [minimumAroundRadius](#minimumaroundradius) `search`\\n- [insideBoundingBox](#insideboundingbox) `search`\\n- [insidePolygon](#insidepolygon) `search`\\n\\n**Query Strategy**\\n\\n- [queryType](#querytype) `settings`, `search`\\n- [removeWordsIfNoResults](#removewordsifnoresults) `settings`, `search`\\n- [advancedSyntax](#advancedsyntax) `settings`, `search`\\n- [optionalWords](#optionalwords) `settings`, `search`\\n- [removeStopWords](#removestopwords) `settings`, `search`\\n- [disablePrefixOnAttributes](#disableprefixonattributes) `settings`\\n- [disableExactOnAttributes](#disableexactonattributes) `settings`, `search`\\n- [exactOnSingleWordQuery](#exactonsinglewordquery) `settings`, `search`\\n- [alternativesAsExact](#alternativesasexact) `settings`, `search`\\n\\n**Advanced**\\n\\n- [attributeForDistinct](#attributefordistinct) `settings`\\n- [distinct](#distinct) `settings`, `search`\\n- [getRankingInfo](#getrankinginfo) `search`\\n- [numericAttributesForFiltering](#numericattributesforfiltering) `settings`\\n- [allowCompressionOfIntegerArray](#allowcompressionofintegerarray) `settings`\\n- [numericFilters (deprecated)](#numericfilters-deprecated) `search`\\n- [tagFilters (deprecated)](#tagfilters-deprecated) `search`\\n- [facetFilters (deprecated)](#facetfilters-deprecated) `search`\\n- [analytics](#analytics) `search`\\n- [analyticsTags](#analyticstags) `search`\\n- [synonyms](#synonyms) `search`\\n- [replaceSynonymsInHighlight](#replacesynonymsinhighlight) `search`, `settings`\\n- [placeholders](#placeholders) `settings`\\n- [altCorrections](#altcorrections) `settings`\\n- [minProximity](#minproximity) `search`, `settings`\\n- [responseFields](#responsefields) `search`, `settings`\\n\\n### Search\\n\\n#### query\\n\\n- scope: `search`\\n- type: `string`\\n- default: `\\\"\\\"`\\n\\n\\nThe instant search query string, used to set the string you want to search in your index. If no query parameter is set, the textual search will match with all the objects.\\n\\n### Attributes\\n\\n#### searchableAttributes\\n\\n- scope: `settings`\\n- type: `array of strings`\\n- default: `*`\\n- formerly known as: `attributesToIndex`\\n\\n\\nThe list of attributes you want index (i.e. to make searchable).\\n\\nIf set to null, all textual and numerical attributes of your objects are indexed.\\nMake sure you updated this setting to get optimal results.\\n\\nThis parameter has two important uses:\\n\\n1. **Limit the attributes to index.** For example, if you store the URL of a picture, you want to store it and be able to retrieve it, but you probably don't want to search in the URL.\\n\\n2. **Control part of the ranking.** The contents of the `searchableAttributes` parameter impacts ranking in two complementary ways:\\n\\n    First, the order in which attributes are listed defines their ranking priority: matches in attributes at the beginning of the list will be considered more important than matches in attributes further down the list. To assign the same priority to several attributes, pass them within the same string, separated by commas. For example, by specifying `[\\\"title,\\\"alternative_title\\\", \\\"text\\\"]`, `title` and `alternative_title` will have the same priority, but a higher priority than `text`.\\n\\n    Then, within the same attribute, matches near the beginning of the text will be considered more important than matches near the end. You can disable this behavior by wrapping your attribute name inside an `unordered()` modifier. For example, `[\\\"title\\\", \\\"unordered(text)\\\"]` will consider all positions inside the `text` attribute as equal, but positions inside the `title` attribute will still matter.\\n\\n**Note:** To get a full description of how the ranking works, you can have a look at our [Ranking guide](https://www.algolia.com/doc/guides/relevance/ranking).\\n\\n\\n#### attributesForFaceting\\n\\n- scope: `settings`\\n- type: `array of strings`\\n- default: `null`\\n\\n\\nThe list of attributes you want to use for faceting.\\nAll strings within these attributes will be extracted and added as facets.\\nIf set to `null`, no attribute is used for faceting.\\n\\n\\n#### unretrievableAttributes\\n\\n- scope: `settings`\\n- type: `array of strings`\\n- default: `null`\\n\\n\\nThe list of attributes that cannot be retrieved at query time.\\nThis feature allows you to have attributes that are used for indexing\\nand/or ranking but cannot be retrieved.\\n\\n**Warning**: For testing purposes, this setting is ignored when you're using the **admin** API key.\\n\\n#### attributesToRetrieve\\n\\n- scope: `settings`, `search`\\n- type: `array of strings`\\n- default: `*`\\n\\n\\nA string that contains the list of attributes you want to retrieve in order to minimize the size of the JSON answer.\\n\\nAttributes are separated with a comma (for example `\\\"name,address\\\"`).\\nYou can also use a string array encoding (for example `[\\\"name\\\",\\\"address\\\"]` ).\\nBy default, all attributes are retrieved.\\nYou can also use `*` to retrieve all values when an **attributesToRetrieve** setting is specified for your index.\\n\\n**Note:** `objectID` is always retrieved, even when not specified.\\n\\n\\n#### restrictSearchableAttributes\\n\\n- scope: `search`\\n- type: `array of strings`\\n- default: `searchableAttributes`\\n\\n\\nList of attributes you want to use for textual search (must be a subset of the `searchableAttributes` index setting).\\nAttributes are separated with a comma such as `\\\"name,address\\\"`.\\nYou can also use JSON string array encoding such as `encodeURIComponent(\\\"[\\\\\\\"name\\\\\\\",\\\\\\\"address\\\\\\\"]\\\")`.\\nBy default, all attributes specified in the `searchableAttributes` settings are used to search.\\n\\n\\n### Ranking\\n\\n#### ranking\\n\\n- scope: `settings`\\n- type: `array of strings`\\n- default: `['typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom']`\\n\\n\\nControls the way results are sorted.\\n\\nWe have nine available criterion:\\n\\n* `typo`: Sort according to number of typos.\\n* `geo`: Sort according to decreasing distance when performing a geo location based search.\\n* `words`: Sort according to the number of query words matched by decreasing order. This parameter is useful when you use the `optionalWords` query parameter to have results with the most matched words first.\\n* `proximity`: Sort according to the proximity of the query words in hits.\\n* `attribute`: Sort according to the order of attributes defined by searchableAttributes.\\n* `exact`:\\n  * If the user query contains one word: sort objects having an attribute that is exactly the query word before others. For example, if you search for the TV show \\\"V\\\", you want to find it with the \\\"V\\\" query and avoid getting all popular TV shows starting by the letter V before it.\\n  * If the user query contains multiple words: sort according to the number of words that matched exactly (not as a prefix).\\n* `custom`: Sort according to a user defined formula set in the `customRanking` attribute.\\n* `asc(attributeName)`: Sort according to a numeric attribute using ascending order. `attributeName` can be the name of any numeric attribute in your records (integer, double or boolean).\\n* `desc(attributeName)`: Sort according to a numeric attribute using descending order. `attributeName` can be the name of any numeric attribute in your records (integer, double or boolean).\\n\\nTo get a full description of how the Ranking works,\\nyou can have a look at our [Ranking guide](https://www.algolia.com/doc/guides/relevance/ranking).\\n\\n#### customRanking\\n\\n- scope: `settings`\\n- type: `array of strings`\\n- default: `[]`\\n\\n\\nLets you specify part of the ranking.\\n\\nThe syntax of this condition is an array of strings containing attributes\\nprefixed by the asc (ascending order) or desc (descending order) operator.\\n\\nFor example, `\\\"customRanking\\\" => [\\\"desc(population)\\\", \\\"asc(name)\\\"]`.\\n\\nTo get a full description of how the Custom Ranking works,\\nyou can have a look at our [Ranking guide](https://www.algolia.com/doc/guides/relevance/ranking).\\n\\n#### replicas\\n\\n- scope: `settings`\\n- type: `array of strings`\\n- default: `[]`\\n- formerly known as: `slaves`\\n\\n\\nThe list of indices on which you want to replicate all write operations.\\n\\nIn order to get response times in milliseconds, we pre-compute part of the ranking during indexing.\\n\\nIf you want to use different ranking configurations depending of the use case,\\nyou need to create one index per ranking configuration.\\n\\nThis option enables you to perform write operations only on this index and automatically\\nupdate replica indices with the same operations.\\n\\n### Filtering / Faceting\\n\\n#### filters\\n\\n- scope: `search`\\n- type: `string`\\n- default: `\\\"\\\"`\\n\\n\\nFilter the query with numeric, facet or/and tag filters.\\n\\nThe syntax is a SQL like syntax, you can use the OR and AND keywords.\\nThe syntax for the underlying numeric, facet and tag filters is the same than in the other filters:\\n\\n`available=1 AND (category:Book OR NOT category:Ebook) AND _tags:public`\\n`date: 1441745506 TO 1441755506 AND inStock > 0 AND author:\\\"John Doe\\\"`\\n\\nIf no attribute name is specified,\\nthe filter applies to `_tags`.\\n\\nFor example: `public OR user_42` will translate to `_tags:public OR _tags:user_42`.\\n\\nThe list of keywords is:\\n\\n* `OR`: create a disjunctive filter between two filters.\\n* `AND`: create a conjunctive filter between two filters.\\n* `TO`: used to specify a range for a numeric filter.\\n* `NOT`: used to negate a filter. The syntax with the `-` isn\\u2019t allowed.\\n\\n**Note:** To specify a value with spaces or with a value equal to a keyword, it's possible to add quotes.\\n\\n**Warnings:**\\n\\n* Like for the other filters (for performance reasons), it's not possible to have `FILTER1 OR (FILTER2 AND FILTER3)`.\\n* It is not possible to mix different categories of filters inside an OR like: `num=3 OR tag1 OR facet:value`.\\n* It is not possible to negate a group; only individual filters can be negated:  `NOT(FILTER1 OR (FILTER2))` is not allowed.\\n\\n\\n#### facets\\n\\n- scope: `search`\\n- type: `string`\\n- default: `\\\"\\\"`\\n\\n\\nYou can use [facets](#facets) to retrieve only a part of your attributes declared in\\n**[attributesForFaceting](#attributesforfaceting)** attributes.\\nIt will not filter your results, if you want to filter results you should use [filters](#filters).\\n\\nFor each of the declared attributes, you'll be able to retrieve a list of the most relevant facet values,\\nand their associated count for the current query.\\n\\n**Example**\\n\\nIf you have defined in your **[attributesForFaceting](#attributesforfaceting)**:\\n\\n```\\n[\\\"category\\\", \\\"author\\\", \\\"nb_views\\\", \\\"nb_downloads\\\"]\\n```\\n\\n... but, for the current search, you want to retrieve facet values only for `category` and `author`, then you can specify:\\n\\n```\\n[\\\"category\\\", \\\"author\\\"]\\n```\\n\\n**Warnings**\\n\\n- When using [facets](#facets) in a search query, only attributes that have been added in **attributesForFaceting** index setting can be used in this parameter.\\nYou can also use `*` to perform faceting on all attributes specified in `attributesForFaceting`.\\nIf the number of results is important, the count can be approximate,\\nthe attribute `exhaustiveFacetsCount` in the response is true when the count is exact.\\n\\n#### maxValuesPerFacet\\n\\n- scope: `settings`, `search`\\n- type: `integer`\\n- default: `\\\"\\\"`\\n\\n\\nLimit the number of facet values returned for each facet.\\n\\nFor example, `maxValuesPerFacet=10` will retrieve a maximum of 10 values per facet.\\n\\n**Warnings**\\n\\n- The engine has a hard limit on the `maxValuesPerFacet` of `1000`. Any value above that will be interpreted by the engine as being `1000`.\\n\\n### Highlighting / Snippeting\\n\\n#### attributesToHighlight\\n\\n- scope: `settings`, `search`\\n- type: `array of strings`\\n- default: `null`\\n\\n\\nDefault list of attributes to highlight.\\nIf set to null, all indexed attributes are highlighted.\\n\\nA string that contains the list of attributes you want to highlight according to the query.\\nAttributes are separated by commas.\\nYou can also use a string array encoding (for example `[\\\"name\\\",\\\"address\\\"]`).\\nIf an attribute has no match for the query, the raw value is returned.\\nBy default, all indexed attributes are highlighted (as long as they are strings).\\nYou can use `*` if you want to highlight all attributes.\\n\\nA matchLevel is returned for each highlighted attribute and can contain:\\n\\n* `full`: If all the query terms were found in the attribute.\\n* `partial`: If only some of the query terms were found.\\n* `none`: If none of the query terms were found.\\n\\n#### attributesToSnippet\\n\\n- scope: `settings`, `search`\\n- type: `array of strings`\\n- default: `null`\\n\\n\\nDefault list of attributes to snippet alongside the number of words to return (syntax is `attributeName:nbWords`).\\nIf set to null, no snippet is computed.\\n\\n#### highlightPreTag\\n\\n- scope: `settings`, `search`\\n- type: `string`\\n- default: `<em>`\\n\\n\\nSpecify the string that is inserted before the highlighted parts in the query result (defaults to `<em>`).\\n\\n\\n\\n#### highlightPostTag\\n\\n- scope: `settings`, `search`\\n- type: `string`\\n- default: `</em>`\\n\\n\\nSpecify the string that is inserted after the highlighted parts in the query result (defaults to `</em>`).\\n\\n\\n\\n#### snippetEllipsisText\\n\\n- scope: `settings`, `search`\\n- type: `string`\\n- default: `\\u2026`\\n\\n\\nString used as an ellipsis indicator when a snippet is truncated.\\n\\n**Note:** Defaults to an empty string for all accounts created before 10/2/2016, and to `\\u2026` (U+2026) for accounts created after that date.\\n\\n#### restrictHighlightAndSnippetArrays\\n\\n- scope: `settings`, `search`\\n- type: `boolean`\\n- default: `false`\\n\\n\\nIf set to true, restrict arrays in highlights and snippets to items that matched the query at least partially else return all array items in highlights and snippets.\\n\\n### Pagination\\n\\n#### page\\n\\n- scope: `search`\\n- type: `integer`\\n- default: `0`\\n\\n\\nPagination parameter used to select the page to retrieve.\\n\\n**Warning:** Page is zero based. Thus, to retrieve the 10th page, you need to set `page=9`.\\n\\n#### hitsPerPage\\n\\n- scope: `settings`, `search`\\n- type: `integer`\\n- default: `20`\\n\\n\\nPagination parameter used to select the number of hits per page.\\n\\n#### offset\\n\\n- scope: `search`\\n- type: `integer`\\n- default: `null`\\n\\n\\nOffset of the first hit to return (zero-based).\\n\\n**Warning:** In most cases, `page`/`hitsPerPage` is the recommended method for pagination; `offset`/`length` is reserved for advanced use.\\n\\n#### length\\n\\n- scope: `search`\\n- type: `integer`\\n- default: `null`\\n\\n\\nNumber of hits to return.\\n\\n**Warning:** In most cases, `page`/`hitsPerPage` is the recommended method for pagination; `offset`/`length` is reserved for advanced use.\\n\\n### Typos\\n\\n#### minWordSizefor1Typo\\n\\n- scope: `settings`, `search`\\n- type: `integer`\\n- default: `4`\\n\\n\\nThe minimum number of characters needed to accept one typo.\\n\\n#### minWordSizefor2Typos\\n\\n- scope: `settings`, `search`\\n- type: `integer`\\n- default: `8`\\n\\n\\nThe minimum number of characters needed to accept two typos.\\n\\n#### typoTolerance\\n\\n- scope: `settings`, `search`\\n- type: `boolean`\\n- default: `true`\\n\\n\\nThis option allows you to control the number of typos allowed in the result set:\\n\\n* `true`: The typo tolerance is enabled and all matching hits are retrieved (default behavior).\\n* `false`: The typo tolerance is disabled. All results with typos will be hidden.\\n* `min`: Only keep results with the minimum number of typos. For example, if one result matches without typos, then all results with typos will be hidden.\\n* `strict`: Hits matching with 2 typos are not retrieved if there are some matching without typos.\\n\\n\\n#### allowTyposOnNumericTokens\\n\\n- scope: `settings`, `search`\\n- type: `boolean`\\n- default: `true`\\n\\n\\nIf set to false, disables typo tolerance on numeric tokens (numbers).\\n\\n#### ignorePlurals\\n\\n- scope: `settings`, `search`\\n- type: `boolean`\\n- default: `false`\\n\\n\\nIf set to true, plural won't be considered as a typo. For example, car and cars, or foot and feet will be considered as equivalent. Defaults to false.\\n\\n#### disableTypoToleranceOnAttributes\\n\\n- scope: `settings`, `search`\\n- type: `string`\\n- default: `\\\"\\\"`\\n\\n\\nList of attributes on which you want to disable typo tolerance\\n(must be a subset of the `searchableAttributes` index setting).\\n\\nAttributes are separated with a comma such as `\\\"name,address\\\"`.\\nYou can also use JSON string array encoding such as `encodeURIComponent(\\\"[\\\\\\\"name\\\\\\\",\\\\\\\"address\\\\\\\"]\\\")`.\\n\\n#### separatorsToIndex\\n\\n- scope: `settings`\\n- type: `string`\\n- default: `\\\"\\\"`\\n\\n\\nSpecify the separators (punctuation characters) to index.\\n\\nBy default, separators are not indexed.\\n\\n**Example:** Use `+#` to be able to search for \\\"Google+\\\" or \\\"C#\\\".\\n\\n\\n\\n### Geo-Search\\n\\nGeo search requires that you provide at least one geo location in each record at indexing time, under the `_geoloc` attribute. Each location must be an object with two numeric `lat` and `lng` attributes. You may specify either one location:\\n\\n```\\n{\\n  \\\"_geoloc\\\": {\\n    \\\"lat\\\": 48.853409,\\n    \\\"lng\\\": 2.348800\\n  }\\n}\\n```\\n\\n... or an array of locations:\\n\\n```\\n{\\n  \\\"_geoloc\\\": [\\n    {\\n      \\\"lat\\\": 48.853409,\\n      \\\"lng\\\": 2.348800\\n    },\\n    {\\n      \\\"lat\\\": 48.547456,\\n      \\\"lng\\\": 2.972075\\n    }\\n  ]\\n}\\n```\\n\\n\\n\\n\\n#### aroundLatLng\\n\\n- scope: `search`\\n- type: `string`\\n- default: ``\\n\\n\\nSearch for entries around a given location (specified as two floats separated by a comma).\\n\\nFor example, `aroundLatLng=47.316669,5.016670`.\\n\\n- By default the maximum distance is automatically guessed based on the density of the area\\nbut you can specify it manually in meters with the **aroundRadius** parameter.\\nThe precision for ranking can be set with **aroundPrecision** parameter.\\n- If you set aroundPrecision=100, the distances will be considered by ranges of 100m.\\n- For example all distances 0 and 100m will be considered as identical for the \\\"geo\\\" ranking parameter.\\n\\nWhen `aroundRadius` is not set, the radius is computed automatically using the density of the area; you can retrieve the computed value in the `automaticRadius` attribute of the response.\\nYou can also use the `minimumAroundRadius` query parameter to specify a minimum radius in meters for the automatic computation of `aroundRadius`.\\n\\n\\n\\n\\n\\n#### aroundLatLngViaIP\\n\\n- scope: `search`\\n- type: `string`\\n- default: `false`\\n\\n\\nSearch for entries around a given latitude/longitude automatically computed from user IP address.\\n\\nTo enable it, use `aroundLatLngViaIP=true`.\\n\\nYou can specify the maximum distance in meters with the `aroundRadius` parameter\\nand the precision for ranking with `aroundPrecision`.\\n\\nFor example:\\n- if you set aroundPrecision=100,\\ntwo objects that are in the range 0-99m\\nwill be considered as identical in the ranking for the \\\"geo\\\" ranking parameter (same for 100-199, 200-299, ... ranges).\\n\\n\\n\\n#### aroundRadius\\n\\n- scope: `search`\\n- type: `integer`, `\\\"all\\\"`\\n- default: `null`\\n\\n\\nControl the radius associated with a geo search. Defined in meters.\\n\\nIf not set, the radius is computed automatically using the density of the area. You can retrieve the computed radius in the `automaticRadius` attribute of the response. You can also specify a minimum value for the automatic radius by using the `minimumAroundRadius` query parameter. You can specify `aroundRadius=all` if you want to compute the geo distance without filtering in a geo area; this option will be faster than specifying a big integer value.\\n\\n#### aroundPrecision\\n\\n- scope: `search`\\n- type: `integer`\\n- default: `null`\\n\\n\\nControl the precision of a geo search. Defined in meters. For example, if you set `aroundPrecision=100`, two objects that are in the range 0-99m will be considered as identical in the ranking for the `geo` ranking parameter (same for 100-199, 200-299, \\u2026 ranges).\\n\\n#### minimumAroundRadius\\n\\n- scope: `search`\\n- type: `integer`\\n- default: `null`\\n\\n\\nDefine the minimum radius used for a geo search when `aroundRadius` is not set. The radius is computed automatically using the density of the area. You can retrieve the computed radius in the `automaticRadius` attribute of the answer.\\n\\n#### insideBoundingBox\\n\\n- scope: `search`\\n- type: `string`\\n- default: `null`\\n\\n\\nSearch entries inside a given area defined by the two extreme points of a rectangle\\n(defined by 4 floats: p1Lat,p1Lng,p2Lat,p2Lng).\\nFor example:\\n- `insideBoundingBox=47.3165,4.9665,47.3424,5.0201`\\n\\nYou can use several bounding boxes (OR) by passing more than 4 values.\\nFor example: instead of having 4 values you can pass 8 to search inside the UNION of two bounding boxes.\\n\\n#### insidePolygon\\n\\n- scope: `search`\\n- type: `string`\\n- default: ``\\n\\n\\nSearch entries inside a given area defined by a set of points\\n(defined by a minimum of 6 floats: p1Lat,p1Lng,p2Lat,p2Lng,p3Lat,p3Long).\\n\\nFor example:\\n`InsidePolygon=47.3165,4.9665,47.3424,5.0201,47.32,4.98`).\\n\\n\\n### Query Strategy\\n\\n#### queryType\\n\\n- scope: `settings`, `search`\\n- type: `enum`\\n- default: `'prefixLast'`\\n\\n\\nSelects how the query words are interpreted. It can be one of the following values:\\n* `prefixAll`:\\nAll query words are interpreted as prefixes. This option is not recommended.\\n* `prefixLast`:\\nOnly the last word is interpreted as a prefix (default behavior).\\n* `prefixNone`:\\nNo query word is interpreted as a prefix. This option is not recommended.\\n\\n#### removeWordsIfNoResults\\n\\n- scope: `settings`, `search`\\n- type: `string`\\n- default: `'none'`\\n\\n\\nThis option is used to select a strategy in order to avoid having an empty result page.\\nThere are four different options:\\n\\n- `lastWords`:\\nWhen a query does not return any results, the last word will be added as optional.\\nThe process is repeated with n-1 word, n-2 word, ... until there are results.\\n- `firstWords`:\\nWhen a query does not return any results, the first word will be added as optional.\\nThe process is repeated with second word, third word, ... until there are results.\\n- `allOptional`:\\nWhen a query does not return any results, a second trial will be made with all words as optional.\\nThis is equivalent to transforming the AND operand between query terms to an OR operand.\\n- `none`:\\nNo specific processing is done when a query does not return any results (default behavior).\\n\\n\\n#### advancedSyntax\\n\\n- scope: `settings`, `search`\\n- type: `boolean`\\n- default: `false`\\n\\n\\nEnables the advanced query syntax.\\n\\nThis syntax allow to do two things:\\n\\n* **Phrase query**: A phrase query defines a particular sequence of terms. A phrase query is built by Algolia's query parser for words surrounded by `\\\"`. For example, `\\\"search engine\\\"` will retrieve records having `search` next to `engine` only. Typo tolerance is _disabled_ on phrase queries.\\n* **Prohibit operator**: The prohibit operator excludes records that contain the term after the `-` symbol. For example, `search -engine` will retrieve records containing `search` but not `engine`.\\n\\n\\n#### optionalWords\\n\\n- scope: `settings`, `search`\\n- type: `array of strings`\\n- default: `[]`\\n\\n\\nA string that contains the comma separated list of words that should be considered as optional when found in the query.\\n\\n#### removeStopWords\\n\\n- scope: `settings`, `search`\\n- type: `boolean`, `array of strings`\\n- default: `false`\\n\\n\\nRemove stop words from the query **before** executing it. It can be:\\n\\n- a **boolean**: enable or disable stop words for all 41 supported languages; or\\n- a **list of language ISO codes** (as a comma-separated string) for which stop words should be enabled.\\n\\nIn most use-cases, **we don\\u2019t recommend enabling this option**.\\n\\nList of 41 supported languages with their associated iso code: Arabic=`ar`, Armenian=`hy`, Basque=`eu`, Bengali=`bn`, Brazilian=`pt-br`, Bulgarian=`bg`, Catalan=`ca`, Chinese=`zh`, Czech=`cs`, Danish=`da`, Dutch=`nl`, English=`en`, Finnish=`fi`, French=`fr`, Galician=`gl`, German=`de`, Greek=`el`, Hindi=`hi`, Hungarian=`hu`, Indonesian=`id`, Irish=`ga`, Italian=`it`, Japanese=`ja`, Korean=`ko`, Kurdish=`ku`, Latvian=`lv`, Lithuanian=`lt`, Marathi=`mr`, Norwegian=`no`, Persian (Farsi)=`fa`, Polish=`pl`, Portugese=`pt`, Romanian=`ro`, Russian=`ru`, Slovak=`sk`, Spanish=`es`, Swedish=`sv`, Thai=`th`, Turkish=`tr`, Ukranian=`uk`, Urdu=`ur`.\\n\\nStop words removal is applied on query words that are not interpreted as a prefix. The behavior depends of the `queryType` parameter:\\n\\n* `queryType=prefixLast` means the last query word is a prefix and it won\\u2019t be considered for stop words removal\\n* `queryType=prefixNone` means no query word are prefix, stop words removal will be applied on all query words\\n* `queryType=prefixAll` means all query terms are prefix, stop words won\\u2019t be removed\\n\\nThis parameter is useful when you have a query in natural language like \\u201cwhat is a record?\\u201d.\\nIn this case, before executing the query, we will remove \\u201cwhat\\u201d, \\u201cis\\u201d and \\u201ca\\u201d in order to just search for \\u201crecord\\u201d.\\nThis removal will remove false positive because of stop words, especially when combined with optional words.\\nFor most use cases, it is better to not use this feature as people search by keywords on search engines.\\n\\n\\n\\n\\n#### disablePrefixOnAttributes\\n\\n- scope: `settings`\\n- type: `array of strings`\\n- default: `[]`\\n\\n\\nList of attributes on which you want to disable prefix matching\\n(must be a subset of the `searchableAttributes` index setting).\\n\\nThis setting is useful on attributes that contain string that should not be matched as a prefix\\n(for example a product SKU).\\n\\n\\n#### disableExactOnAttributes\\n\\n- scope: `settings`, `search`\\n- type: `array of strings`\\n- default: `[]`\\n\\n\\nList of attributes on which you want to disable the computation of `exact` criteria\\n(must be a subset of the `searchableAttributes` index setting).\\n\\n#### exactOnSingleWordQuery\\n\\n- scope: `settings`, `search`\\n- type: `string`\\n- default: `attribute`\\n\\n\\nThis parameter control how the `exact` ranking criterion is computed when the query contains one word. There are three different values:\\n\\n* `none`: no exact on single word query\\n* `word`: exact set to 1 if the query word is found in the record. The query word needs to have at least 3 chars and not be part of our stop words dictionary\\n* `attribute` (default): exact set to 1 if there is an attribute containing a string equals to the query\\n\\n#### alternativesAsExact\\n\\n- scope: `settings`, `search`\\n- type: `string`\\n- default: `['ignorePlurals', 'singleWordSynonym']`\\n\\n\\nSpecify the list of approximation that should be considered as an exact match in the ranking formula:\\n\\n* `ignorePlurals`: alternative words added by the ignorePlurals feature\\n* `singleWordSynonym`: single-word synonym (For example \\\"NY\\\" = \\\"NYC\\\")\\n* `multiWordsSynonym`: multiple-words synonym (For example \\\"NY\\\" = \\\"New York\\\")\\n\\n### Advanced\\n\\n#### attributeForDistinct\\n\\n- scope: `settings`\\n- type: `string`\\n- default: `null`\\n\\n\\nThe name of the attribute used for the `Distinct` feature.\\n\\nThis feature is similar to the SQL \\\"distinct\\\" keyword.\\nWhen enabled in queries with the `distinct=1` parameter,\\nall hits containing a duplicate value for this attribute are removed from the results.\\n\\nFor example, if the chosen attribute is `show_name` and several hits have the same value for `show_name`,\\nthen only the first one is kept and the others are removed from the results.\\n\\nTo get a full understanding of how `Distinct` works,\\nyou can have a look at our [guide on distinct](https://www.algolia.com/doc/search/distinct).\\n\\n#### distinct\\n\\n- scope: `settings`, `search`\\n- type: `integer`\\n- default: `0`\\n\\n\\nIf set to 1,\\nenables the distinct feature, disabled by default, if the `attributeForDistinct` index setting is set.\\n\\nThis feature is similar to the SQL \\\"distinct\\\" keyword.\\nWhen enabled in a query with the `distinct=1` parameter,\\nall hits containing a duplicate value for the attributeForDistinct attribute are removed from results.\\n\\nFor example, if the chosen attribute is `show_name` and several hits have the same value for `show_name`,\\nthen only the best one is kept and the others are removed.\\n\\nTo get a full understanding of how `Distinct` works,\\nyou can have a look at our [guide on distinct](https://www.algolia.com/doc/search/distinct).\\n\\n\\n#### getRankingInfo\\n\\n- scope: `search`\\n- type: `boolean`\\n- default: `false`\\n\\n\\nIf set to true,\\nthe result hits will contain ranking information in the **_rankingInfo** attribute.\\n\\n#### numericAttributesForFiltering\\n\\n- scope: `settings`\\n- type: `array of strings`\\n- default: ``\\n- formerly known as: `numericAttributesToIndex`\\n\\n\\nAll numerical attributes are automatically indexed as numerical filters\\n(allowing filtering operations like `<` and `<=`).\\nIf you don't need filtering on some of your numerical attributes,\\nyou can specify this list to speed up the indexing.\\n\\nIf you only need to filter on a numeric value with the `=` operator,\\nyou can speed up the indexing by specifying the attribute with `equalOnly(AttributeName)`.\\nThe other operators will be disabled.\\n\\n#### allowCompressionOfIntegerArray\\n\\n- scope: `settings`\\n- type: `boolean`\\n- default: `false`\\n\\n\\nAllows compression of big integer arrays.\\n\\nIn data-intensive use-cases,\\nwe recommended enabling this feature and then storing the list of user IDs or rights as an integer array.\\nWhen enabled, the integer array is reordered to reach a better compression ratio.\\n\\n#### numericFilters (deprecated)\\n\\n- scope: `search`\\n- type: `array of strings`\\n- default: `[]`\\n\\n\\n*This parameter is deprecated. Please use [filters](#filters) instead.*\\n\\nA string that contains the comma separated list of numeric filters you want to apply.\\nThe filter syntax is `attributeName` followed by `operand` followed by `value`.\\nSupported operands are `<`, `<=`, `=`, `>` and `>=`.\\n\\nYou can easily perform range queries via the `:` operator.\\nThis is equivalent to combining a `>=` and `<=` operand.\\n\\nFor example, `numericFilters=price:10 to 1000`.\\n\\nYou can also mix OR and AND operators.\\nThe OR operator is defined with a parenthesis syntax.\\n\\nFor example, `(code=1 AND (price:[0-100] OR price:[1000-2000]))`\\ntranslates to `encodeURIComponent(\\\"code=1,(price:0 to 100,price:1000 to 2000)\\\")`.\\n\\nYou can also use a string array encoding (for example `numericFilters: [\\\"price>100\\\",\\\"price<1000\\\"]`).\\n\\n#### tagFilters (deprecated)\\n\\n- scope: `search`\\n- type: `string`\\n- default: `\\\"\\\"`\\n\\n\\n*This parameter is deprecated. Please use [filters](#filters) instead.*\\n\\nFilter the query by a set of tags.\\n\\nYou can AND tags by separating them with commas.\\nTo OR tags, you must add parentheses.\\n\\nFor example, `tagFilters=tag1,(tag2,tag3)` means *tag1 AND (tag2 OR tag3)*.\\n\\nYou can also use a string array encoding.\\n\\nFor example, `tagFilters: [\\\"tag1\\\",[\\\"tag2\\\",\\\"tag3\\\"]]` means *tag1 AND (tag2 OR tag3)*.\\n\\nNegations are supported via the `-` operator, prefixing the value.\\n\\nFor example: `tagFilters=tag1,-tag2`.\\n\\nAt indexing, tags should be added in the **_tags** attribute of objects.\\n\\nFor example `{\\\"_tags\\\":[\\\"tag1\\\",\\\"tag2\\\"]}`.\\n\\n#### facetFilters (deprecated)\\n\\n- scope: `search`\\n- type: `string`\\n- default: `\\\"\\\"`\\n\\n\\n*This parameter is deprecated. Please use [filters](#filters) instead.*\\n\\nFilter the query with a list of facets. Facets are separated by commas and is encoded as `attributeName:value`.\\nTo OR facets, you must add parentheses.\\n\\nFor example: `facetFilters=(category:Book,category:Movie),author:John%20Doe`.\\n\\nYou can also use a string array encoding.\\n\\nFor example, `[[\\\"category:Book\\\",\\\"category:Movie\\\"],\\\"author:John%20Doe\\\"]`.\\n\\n#### analytics\\n\\n- scope: `search`\\n- type: `boolean`\\n- default: `true`\\n\\n\\nIf set to false, this query will not be taken into account in the analytics feature.\\n\\n#### analyticsTags\\n\\n- scope: `search`\\n- type: `array of strings`\\n- default: `null`\\n\\n\\nIf set, tag your query with the specified identifiers. Tags can then be used in the Analytics to analyze a subset of searches only.\\n\\n#### synonyms\\n\\n- scope: `search`\\n- type: `boolean`\\n- default: `true`\\n\\n\\nIf set to `false`, the search will not use the synonyms defined for the targeted index.\\n\\n#### replaceSynonymsInHighlight\\n\\n- scope: `search`, `settings`\\n- type: `boolean`\\n- default: `true`\\n\\n\\nIf set to `false`, words matched via synonym expansion will not be replaced by the matched synonym in the highlighted result.\\n\\n#### placeholders\\n\\n- scope: `settings`\\n- type: `hash of array of words`\\n- default: ``\\n\\n\\nThis is an advanced use-case to define a token substitutable by a list of words\\nwithout having the original token searchable.\\n\\nIt is defined by a hash associating placeholders to lists of substitutable words.\\n\\nFor example, `\\\"placeholders\\\": { \\\"<streetnumber>\\\": [\\\"1\\\", \\\"2\\\", \\\"3\\\", ..., \\\"9999\\\"]}`\\nwould allow it to be able to match all street numbers. We use the `< >` tag syntax\\nto define placeholders in an attribute.\\n\\nFor example:\\n\\n* Push a record with the placeholder:\\n`{ \\\"name\\\" : \\\"Apple Store\\\", \\\"address\\\" : \\\"&lt;streetnumber&gt; Opera street, Paris\\\" }`.\\n* Configure the placeholder in your index settings:\\n`\\\"placeholders\\\": { \\\"<streetnumber>\\\" : [\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\", ... ], ... }`.\\n\\n#### altCorrections\\n\\n- scope: `settings`\\n- type: `array of objects`\\n- default: `[]`\\n\\n\\nSpecify alternative corrections that you want to consider.\\n\\nEach alternative correction is described by an object containing three attributes:\\n\\n* `word` (string): The word to correct.\\n* `correction` (string): The corrected word.\\n* `nbTypos` (integer): The number of typos (1 or 2) that will be considered for the ranking algorithm (1 typo is better than 2 typos).\\n\\nFor example:\\n\\n```\\n\\\"altCorrections\\\": [\\n  { \\\"word\\\" : \\\"foot\\\", \\\"correction\\\": \\\"feet\\\", \\\"nbTypos\\\": 1 },\\n  { \\\"word\\\": \\\"feet\\\", \\\"correction\\\": \\\"foot\\\", \\\"nbTypos\\\": 1 }\\n]\\n```\\n\\n#### minProximity\\n\\n- scope: `search`, `settings`\\n- type: `integer`\\n- default: `1`\\n\\n\\nConfigure the precision of the `proximity` ranking criterion. By default, the minimum (and best) proximity value distance between 2 matching words is 1. Setting it to 2 (or 3) would allow 1 (or 2) words to be found between the matching words without degrading the proximity ranking value.\\n\\nConsidering the query *\\u201cjavascript framework\\u201d*, if you set `minProximity=2`, the records *\\u201cJavaScript framework\\u201d* and *\\u201cJavaScript charting framework\\u201d* will get the same proximity score, even if the second contains a word between the two matching words.\\n\\n**Note:** the maximum `minProximity` that can be set is 7. Any higher value will disable the `proximity` criterion from the ranking formula.\\n\\n#### responseFields\\n\\n- scope: `search`, `settings`\\n- type: `array of strings`\\n- default: `*`\\n\\n\\nChoose which fields the response will contain. Applies to search and browse queries.\\n\\nBy default, all fields are returned. If this parameter is specified, only the fields explicitly listed will be returned, unless `*` is used, in which case all fields are returned. Specifying an empty list or unknown field names is an error.\\n\\nThis parameter is mainly intended to limit the response size. For example, for complex queries, echoing of request parameters in the response's `params` field can be undesirable.\\n\\nSome fields cannot be filtered out:\\n\\n- warning `message`\\n- `cursor` in browse queries\\n- fields triggered explicitly via [getRankingInfo](#getrankinginfo)\\n\\n\\n## Manage Indices\\n\\n\\n\\n### Create an index\\n\\nTo create an index, you need to perform any indexing operation like:\\n- set settings\\n- add object\\n\\n### List indices - `list_indexes`\\n\\nYou can list all your indices along with their associated information (number of entries, disk size, etc.) with the `list_indexes` method:\\n\\n```python\\nprint client.list_indexes()\\n```\\n\\n\\n\\n\\n### Delete index - `delete_index`\\n\\nYou can delete an index using its name:\\n\\n```python\\nclient.delete_index(\\\"contacts\\\")\\n```\\n\\n\\n### Clear index - `clear_index`\\n\\nYou can delete the index contents without removing settings and index specific API keys by using the `clearIndex` command:\\n\\n```python\\nindex.clear_index()\\n```\\n\\n\\n### Copy index - `copy_index`\\n\\nYou can copy an existing index using the `copy` command.\\n\\n**Warning**: The copy command will overwrite the destination index.\\n\\n```python\\n# Copy MyIndex in MyIndexCopy\\nprint client.copy_index(\\\"MyIndex\\\", \\\"MyIndexCopy\\\")\\n```\\n\\n\\n### Move index - `move_index`\\n\\nIn some cases, you may want to totally reindex all your data. In order to keep your existing service\\nrunning while re-importing your data we recommend the usage of a temporary index plus an atomical\\nmove using the `move_index` method.\\n\\n```python\\n# Rename MyNewIndex in MyIndex (and overwrite it)\\nprint client.move_index(\\\"MyNewIndex\\\", \\\"MyIndex\\\")\\n```\\n\\n**Note**:\\n\\nThe move_index method will overwrite the destination index, and delete the temporary index.\\n\\n**Warning**\\n\\nThe move_index operation will override all settings of the destination,\\nThere is one exception for the [replicas](#replicas) parameter which is not impacted.\\n\\nFor example, if you want to fully update your index `MyIndex` every night, we recommend the following process:\\n\\n 1. Get settings and synonyms from the old index using [Get settings](#get-settings---get_settings)\\n  and [Get synonym](#get-synonym---get_synonym).\\n 1. Apply settings and synonyms to the temporary index `MyTmpIndex`, (this will create the `MyTmpIndex` index)\\n  using [Set settings](#set-settings) and [Batch synonyms](#batch-synonyms---batch_synonyms)\\n  (make sure to remove the [replicas](#replicas) parameter from the settings if it exists).\\n 1. Import your records into a new index using [Add objects](#add-objects---add_objects).\\n 1. Atomically replace the index `MyIndex` with the content and settings of the index `MyTmpIndex`\\n using the [Move index](#move-index---move_index) method.\\n This will automatically override the old index without any downtime on the search.\\n 1. You'll end up with only one index called `MyIndex`, that contains the records and settings pushed to `MyTmpIndex`\\n and the replica-indices that were initially attached to `MyIndex` will be in sync with the new data.\\n\\n\\n\\n\\n\\n\\n## Api Keys\\n\\n### Overview\\n\\nWhen creating your Algolia Account, you'll notice there are 3 different API Keys:\\n\\n- **Admin API Key** - it provides full control of all your indices.\\n*The admin API key should always be kept secure;\\ndo NOT give it to anybody; do NOT use it from outside your back-end as it will\\nallow the person who has it to query/change/delete data*\\n\\n- **Search-Only API Key** - It allows you to search on every indices.\\n\\n- **Monitoring API Key** - It allows you to access the [Monitoring API](https://www.algolia.com/doc/rest-api/monitoring)\\n\\n#### Other types of API keys\\n\\nThe *Admin API Key* and *Search-Only API Key* both have really large scope and sometimes you want to give a key to\\nsomeone that have restricted permissions, can it be an index, a rate limit, a validity limit, ...\\n\\nTo address those use-cases we have two differents type of keys:\\n\\n- **Secured API Keys**\\n\\nWhen you need to restrict the scope of the *Search Key*, we recommend to use *Secured API Key*.\\nYou can generate them on the fly (without any call to the API)\\nfrom the *Search Only API Key* or any search *User Key* using the [Generate key](#generate-key---generate_secured_api_key) method\\n\\n- **User API Keys**\\n\\nIf *Secured API Keys* does not meet your requirements, you can make use of *User keys*.\\nManaging and especially creating those keys requires a call to the API.\\n\\nWe have several methods to manage them:\\n- [Add user key](#add-user-key---add_user_key)\\n- [Update user key](#update-user-key---update_user_key)\\n- [Delete user key](#delete-user-key---delete_user_key)\\n- [List api keys](#list-api-keys---list_api_keys)\\n- [Get key permissions](#get-key-permissions---get_user_key_acl)\\n\\n### Generate key - `generate_secured_api_key`\\n\\nWhen you need to restrict the scope of the *Search Key*, we recommend to use *Secured API Key*.\\nYou can generate a *Secured API Key* from the *Search Only API Key* or any search *User API Key*\\n\\nThere is a few things to know about *Secured API Keys*\\n- They always need to be generated **on your backend** using one of our API Client \\n- You can generate them on the fly (without any call to the API)\\n- They will not appear on the dashboard as they are generated without any call to the API\\n- The key you use to generate it **needs to become private** and you should not use it in your frontend.\\n- The generated secured API key **will inherit any restriction from the search key it has been generated from**\\n\\nYou can then use the key in your frontend code\\n\\n```js\\nvar client = algoliasearch('YourApplicationID', '<%= public_api_key %>');\\n\\nvar index = client.initIndex('indexName')\\n\\nindex.search('something', function(err, content) {\\n  if (err) {\\n    console.error(err);\\n    return;\\n  }\\n\\n  console.log(content);\\n});\\n```\\n\\n#### Filters\\n\\nEvery filter set in the API key will always be applied. On top of that [filters](#filters) can be applied\\nin the query parameters.\\n\\n```python\\n# generate a public API key for user 42. Here, records are tagged with:\\n#  - 'user_XXXX' if they are visible by user XXXX\\npublic_key = client.generate_secured_api_key('YourSearchOnlyApiKey', {'filters': '_tags:user_42'})\\n```\\n\\n**Warning**:\\n\\nIf you set filters in the key `groups:admin`, and `groups:press OR groups:visitors` in the query parameters,\\nthis will be equivalent to `groups:admin AND (groups:press OR groups:visitors)`\\n\\n##### Having one API Key per User\\n\\nOne of the usage of secured API keys, is to have allow users to see only part of an index, when this index\\ncontains the data of all users.\\nIn that case, you can tag all records with their associated `user_id` in order to add a `user_id=42` filter when\\ngenerating the *Secured API Key* to retrieve only what a user is tagged in.\\n\\n**Warning**\\nIf you're generating *Secured API Keys* using the [JavaScript client](http://github.com/algolia/algoliasearch-client-js) in your frontend,\\nit will result in a security breach since the user is able to modify the `tagFilters` you've set\\nby modifying the code from the browser.\\n\\n#### Valid Until\\n\\nYou can set a Unix timestamp used to define the expiration date of the API key\\n\\n```python\\n# generate a public API key that is valid for 1 hour:\\nvalid_until = Time.now.to_i + 3600\\npublic_key = client.generate_secured_api_key('YourSearchOnlyApiKey', {'validUntil': valid_until})\\n```\\n\\n#### Index Restriction\\n\\nYou can restrict the key to a list of index names allowed for the secured API key\\n\\n```python\\n# generate a public API key that is restricted to 'index1' and 'index2':\\npublic_key = client.generate_secured_api_key('YourSearchOnlyApiKey', {'restrictIndices': 'index1,index2'})\\n```\\n\\n#### Rate Limiting\\n\\nIf you want to rate limit a secured API Key, the API key you generate the secured api key from need to be rate-limited.\\nYou can do that either via the dashboard or via the API using the\\n[Add user key](#add-user-key---add_user_key) or [Update user key](#update-user-key---update_user_key) method\\n\\n##### User Rate Limiting\\n\\nBy default the rate limits will only use the `IP`.\\n\\nThis can be an issue when several of your end users are using the same IP.\\nTo avoid that, you can set a `userToken` query parameter when generating the key.\\n\\nWhen set, a unique user will be identified by his `IP + user_token` instead of only by his `IP`.\\n\\nThis allows you to restrict a single user to performing a maximum of `N` API calls per hour,\\neven if he shares his `IP` with another user.\\n\\n```python\\n# generate a public API key for user 42. Here, records are tagged with:\\n#  - 'user_XXXX' if they are visible by user XXXX\\npublic_key = client.generate_secured_api_key('YourSearchOnlyApiKey', {'filters': '_tags:user_42', 'userToken': 'user_42'})\\n```\\n\\n#### Network restriction\\n\\nFor more protection against API key leaking and reuse you can restrict the key to be valid only from specific IPv4 networks\\n\\n```python\\n# generate a public API key that is restricted to '192.168.1.0/24':\\npublic_key = client.generate_secured_api_key('YourSearchOnlyApiKey', {'restrictSources': '192.168.1.0/24'})\\n```\\n\\n\\n\\n\\n\\n## Synonyms\\n\\n### Save synonym - `save_synonym`\\n\\nThis method saves a single synonym record into the index.\\n\\nIn this example, we specify true to forward the creation to replica indices.\\nBy default the behavior is to save only on the specified index.\\n\\n```python\\nindex.save_synonym({\\n  'objectID': 'a-unique-identifier',\\n  'type': 'synonym',\\n  'synonyms': ['car', 'vehicle', 'auto']\\n}, 'a-unique-identifier', True)\\n```\\n\\n### Batch synonyms - `batch_synonyms`\\n\\nUse the batch method to create a large number of synonyms at once,\\nforward them to replica indices if desired,\\nand optionally replace all existing synonyms\\non the index with the content of the batch using the replaceExistingSynonyms parameter.\\n\\nYou should always use replaceExistingSynonyms to atomically replace all synonyms\\non a production index. This is the only way to ensure the index always\\nhas a full list of synonyms to use during the indexing of the new list.\\n\\n```python\\n# Batch synonyms, with replica forwarding and atomic replacement of existing synonyms\\nindex.batch_synonyms([{\\n  'objectID': 'a-unique-identifier',\\n  'type': 'synonym',\\n  'synonyms': ['car', 'vehicle', 'auto']\\n}, {\\n  'objectID': 'another-unique-identifier',\\n  'type': 'synonym',\\n  'synonyms': ['street', 'st']\\n}], True, True)\\n```\\n\\n### Editing Synonyms\\n\\nUpdating the value of a specific synonym record is the same as creating one.\\nMake sure you specify the same objectID used to create the record and the synonyms\\nwill be updated.\\nWhen updating multiple synonyms in a batch call (but not all synonyms),\\nmake sure you set replaceExistingSynonyms to false (or leave it out,\\nfalse is the default value).\\nOtherwise, the entire synonym list will be replaced only partially with the records\\nin the batch update.\\n\\n### Delete Synonyms - `delete_synonyms`\\n\\nUse the normal index delete method to delete synonyms,\\nspecifying the objectID of the synonym record you want to delete.\\nForward the deletion to replica indices by setting the forwardToReplicas parameter to true.\\n\\n```python\\n# Delete and forward to replicas\\nindex.delete_synonym('a-unique-identifier', True)\\n```\\n\\n### Clear all synonyms - `clear_synonyms`\\n\\nThis is a convenience method to delete all synonyms at once.\\nIt should not be used on a production index to then push a new list of synonyms:\\nthere would be a short period of time during which the index would have no synonyms\\nat all.\\n\\nTo atomically replace all synonyms of an index,\\nuse the batch method with the replaceExistingSynonyms parameter set to true.\\n\\n```python\\n# Clear synonyms and forward to replicas\\nindex.clear_synonyms(True)\\n```\\n\\n### Get synonym - `get_synonym`\\n\\nSearch for synonym records by their objectID or by the text they contain.\\nBoth methods are covered here.\\n\\n```python\\nsynonym = index.get_synonym('a-unique-identifier')\\n```\\n\\n### Search synonyms - `search_synonyms`\\n\\nSearch for synonym records similar to how you\\u2019d search normally.\\n\\nAccepted search parameters:\\n- query: the actual search query to find synonyms. Use an empty query to browse all the synonyms of an index.\\n- type: restrict the search to a specific type of synonym. Use an empty string to search all types (default behavior). Multiple types can be specified using a comma-separated list or an array.\\n- page: the page to fetch when browsing through several pages of results. This value is zero-based.\\nhitsPerPage: the number of synonyms to return for each call. The default value is 100.\\n\\n```python\\n# Searching for \\\"street\\\" in synonyms and one-way synonyms; fetch the second page with 10 hits per page\\nresults = index.search_synonyms('street', ['synonym', 'oneWaySynonym'], 1, 10)\\n```\\n\\n\\n\\n## Advanced\\n\\n### Custom batch - `batch`\\n\\nYou may want to perform multiple operations with one API call to reduce latency.\\n\\n\\n\\nIf you have one index per user, you may want to perform a batch operations across severals indexes.\\nWe expose a method to perform this type of batch:\\n\\n```python\\nres = index.batch([\\n\\t{\\\"action\\\": \\\"addObject\\\", \\\"indexName\\\": \\\"index1\\\", {\\\"firstname\\\": \\\"Jimmie\\\", \\\"lastname\\\": \\\"Barninger\\\"}},\\n\\t{\\\"action\\\": \\\"addObject\\\", \\\"indexName\\\": \\\"index2\\\", {\\\"firstname\\\": \\\"Warren\\\", \\\"lastname\\\": \\\"Speach\\\"}}])\\n```\\n\\nThe attribute **action** can have these values:\\n\\n- addObject\\n- updateObject\\n- partialUpdateObject\\n- partialUpdateObjectNoCreate\\n- deleteObject\\n\\n### Backup / Export an index - `browse`\\n\\nThe `search` method cannot return more than 1,000 results. If you need to\\nretrieve all the content of your index (for backup, SEO purposes or for running\\na script on it), you should use the `browse` method instead. This method lets\\nyou retrieve objects beyond the 1,000 limit.\\n\\nThis method is optimized for speed. To make it fast, distinct, typo-tolerance,\\nword proximity, geo distance and number of matched words are disabled. Results\\nare still returned ranked by attributes and custom ranking.\\n\\n\\nIt will return a `cursor` alongside your data, that you can then use to retrieve\\nthe next chunk of your records.\\n\\nYou can specify custom parameters (like `page` or `hitsPerPage`) on your first\\n`browse` call, and these parameters will then be included in the `cursor`. Note\\nthat it is not possible to access records beyond the 1,000th on the first call.\\n\\n#### Response Format\\n\\n##### Sample\\n\\n```json\\n{\\n  \\\"hits\\\": [\\n    {\\n      \\\"firstname\\\": \\\"Jimmie\\\",\\n      \\\"lastname\\\": \\\"Barninger\\\",\\n      \\\"objectID\\\": \\\"433\\\"\\n    }\\n  ],\\n  \\\"processingTimeMS\\\": 7,\\n  \\\"query\\\": \\\"\\\",\\n  \\\"params\\\": \\\"filters=level%3D20\\\",\\n  \\\"cursor\\\": \\\"ARJmaWx0ZXJzPWxldmVsJTNEMjABARoGODA4OTIzvwgAgICAgICAgICAAQ==\\\"\\n}\\n```\\n\\n##### Fields\\n\\n- `cursor` (string, optional): A cursor to retrieve the next chunk of data. If absent, it means that the end of the index has been reached.\\n\\n- `query` (string): Query text used to filter the results.\\n\\n- `params` (string, URL-encoded): Search parameters used to filter the results.\\n\\n- `processingTimeMS` (integer): Time that the server took to process the request, in milliseconds. *Note: This does not include network time.*\\n\\nThe following fields are provided for convenience purposes, and **only when the browse is not filtered**:\\n\\n- `nbHits` (integer): Number of objects in the index.\\n\\n- `page` (integer): Index of the current page (zero-based).\\n\\n- `hitsPerPage` (integer): Maximum number of hits returned per page.\\n\\n- `nbPages` (integer): Number of pages corresponding to the number of hits. Basically, `ceil(nbHits / hitsPerPage)`.\\n\\n\\n#### Example\\n\\n```python\\n# Iterate with a filter over the index\\nres = self.index.browse_all({\\\"query\\\": \\\"test\\\", \\\"filters\\\": \\\"i<42\\\"})\\nfor hit in res\\n\\t# Do something\\n\\n# Retrieve the next cursor from the browse method\\nres = self.index.browse_from({\\\"query\\\": \\\"test\\\", \\\"filters\\\": \\\"i<42\\\"}, None)\\nprint res[\\\"cursor\\\"]\\n```\\n\\n\\n\\n\\n### List api keys - `list_api_keys`\\n\\nTo list existing keys, you can use:\\n\\n```python\\n# Lists global API Keys\\nclient.list_user_keys()\\n# Lists API Keys that can access only to this index\\nindex.list_user_keys()\\n```\\n\\nEach key is defined by a set of permissions that specify the authorized actions. The different permissions are:\\n\\n* **search**: Allowed to search.\\n* **browse**: Allowed to retrieve all index contents via the browse API.\\n* **addObject**: Allowed to add/update an object in the index.\\n* **deleteObject**: Allowed to delete an existing object.\\n* **deleteIndex**: Allowed to delete index content.\\n* **settings**: allows to get index settings.\\n* **editSettings**: Allowed to change index settings.\\n* **analytics**: Allowed to retrieve analytics through the analytics API.\\n* **listIndexes**: Allowed to list all accessible indexes.\\n\\n### Add user key - `add_user_key`\\n\\nTo create API keys:\\n\\n```python\\n# Creates a new global API key that can only perform search actions\\nres = client.add_user_key([\\\"search\\\"])\\nprint res[\\\"key\\\"]\\n# Creates a new API key that can only perform search action on this index\\nres = index.add_user_key([\\\"search\\\"])\\nprint res[\\\"key\\\"]\\n```\\n\\nYou can also create an API Key with advanced settings:\\n\\n<table><tbody>\\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>validity</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Add a validity period. The key will be valid for a specific period of time (in seconds).</p>\\n\\n      </td>\\n    </tr>\\n    \\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>maxQueriesPerIPPerHour</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Specify the maximum number of API calls allowed from an IP address per hour. Each time an API call is performed with this key, a check is performed. If the IP at the source of the call did more than this number of calls in the last hour, a 403 code is returned. Defaults to 0 (no rate limit). This parameter can be used to protect you from attempts at retrieving your entire index contents by massively querying the index.</p>\\n\\n<p>Note: If you are sending the query through your servers, you must use the <code>enable_rate_limit_forward(&quot;TheAdminAPIKey&quot;, &quot;EndUserIP&quot;, &quot;APIKeyWithRateLimit&quot;)</code> function to enable rate-limit.</p>\\n\\n      </td>\\n    </tr>\\n    \\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>maxHitsPerQuery</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Specify the maximum number of hits this API key can retrieve in one call. Defaults to 0 (unlimited). This parameter can be used to protect you from attempts at retrieving your entire index contents by massively querying the index.</p>\\n\\n      </td>\\n    </tr>\\n    \\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>indexes</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Specify the list of targeted indices. You can target all indices starting with a prefix or ending with a suffix using the &#39;*&#39; character. For example, &quot;dev_*&quot; matches all indices starting with &quot;dev_&quot; and &quot;*_dev&quot; matches all indices ending with &quot;_dev&quot;. Defaults to all indices if empty or blank.</p>\\n\\n      </td>\\n    </tr>\\n    \\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>referers</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Specify the list of referers. You can target all referers starting with a prefix, ending with a suffix using the &#39;*&#39; character. For example, &quot;<a href=\\\"https://algolia.com/%5C*\\\">https://algolia.com/\\\\*</a>&quot; matches all referers starting with &quot;<a href=\\\"https://algolia.com/\\\">https://algolia.com/</a>&quot; and &quot;*.algolia.com&quot; matches all referers ending with &quot;.algolia.com&quot;. If you want to allow the domain algolia.com you can use &quot;*algolia.com/*&quot;. Defaults to all referers if empty or blank.</p>\\n\\n      </td>\\n    </tr>\\n    \\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>queryParameters</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Specify the list of query parameters. You can force the query parameters for a query using the url string format (param1=X&amp;param2=Y...).</p>\\n\\n      </td>\\n    </tr>\\n    \\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>description</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Specify a description to describe where the key is used.</p>\\n\\n      </td>\\n    </tr>\\n    \\n\\n</tbody></table>\\n\\n```python\\n# Creates a new index specific API key valid for 300 seconds, with a rate limit of 100 calls per hour per IP and a maximum of 20 hits\\n\\nparams = {\\n\\t'validity': 300,\\n\\t'maxQueriesPerIPPerHour': 100,\\n\\t'maxHitsPerQuery': 20,\\n\\t'indexes': ['dev_*'],\\n\\t'referers': ['algolia.com/*'],\\n\\t'queryParameters': 'typoTolerance=strict&ignorePlurals=false',\\n\\t'description': 'Limited search only API key for algolia.com'\\n}\\n\\nres = client.add_user_key(params)\\nprint res[\\\"key\\\"]\\n```\\n\\n### Update user key - `update_user_key`\\n\\nTo update the permissions of an existing key:\\n\\n```python\\n# Update an existing global API key that is valid for 300 seconds\\nres = client.update_user_key(\\\"myAPIKey\\\", [\\\"search\\\"], 300)\\nprint res[\\\"key\\\"]\\n# Update an existing index specific API key valid for 300 seconds, with a rate limit of 100 calls per hour per IP and a maximum of 20 hits\\nres = index.update_user_key(\\\"myAPIKey\\\", [\\\"search\\\"], 300, 100, 20)\\nprint res[\\\"key\\\"]\\n```\\n\\nTo get the permissions of a given key:\\n\\n```python\\n# Gets the rights of a global key\\nprint client.get_user_key_acl(\\\"f420238212c54dcfad07ea0aa6d5c45f\\\")\\n# Gets the rights of an index specific key\\nprint index.get_user_key_acl(\\\"71671c38001bf3ac857bc82052485107\\\")\\n```\\n\\n### Delete user key - `delete_user_key`\\n\\nTo delete an existing key:\\n\\n```python\\n# Deletes a global key\\nprint client.delete_user_key(\\\"f420238212c54dcfad07ea0aa6d5c45f\\\")\\n# Deletes an index specific key\\nprint index.delete_user_key(\\\"71671c38001bf3ac857bc82052485107\\\")\\n```\\n\\n### Get key permissions - `get_user_key_acl`\\n\\n\\n\\nTo get the permissions of a given key:\\n\\n```python\\n# Gets the rights of a global key\\nprint client.get_user_key_acl(\\\"f420238212c54dcfad07ea0aa6d5c45f\\\")\\n# Gets the rights of an index specific key\\nprint index.get_user_key_acl(\\\"71671c38001bf3ac857bc82052485107\\\")\\n```\\n\\n### Get Logs - `get_logs`\\n\\nYou can retrieve the latest logs via this API. Each log entry contains:\\n\\n* Timestamp in ISO-8601 format\\n* Client IP\\n* Request Headers (API Key is obfuscated)\\n* Request URL\\n* Request method\\n* Request body\\n* Answer HTTP code\\n* Answer body\\n* SHA1 ID of entry\\n\\nYou can retrieve the logs of your last 1,000 API calls and browse them using the offset/length parameters:\\n\\n<table><tbody>\\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>offset</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Specify the first entry to retrieve (0-based, 0 is the most recent log entry). Defaults to 0.</p>\\n\\n      </td>\\n    </tr>\\n    \\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>length</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Specify the maximum number of entries to retrieve starting at the offset. Defaults to 10. Maximum allowed value: 1,000.</p>\\n\\n      </td>\\n    </tr>\\n    \\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>onlyErrors</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Retrieve only logs with an HTTP code different than 200 or 201. (deprecated)</p>\\n\\n      </td>\\n    </tr>\\n    \\n  \\n    <tr>\\n      <td valign='top'>\\n        <div class='client-readme-param-container'>\\n          <div class='client-readme-param-container-inner'>\\n            <div class='client-readme-param-name'><code>type</code></div>\\n            \\n          </div>\\n        </div>\\n      </td>\\n      <td class='client-readme-param-content'>\\n        <p>Specify the type of logs to retrieve:</p>\\n\\n<ul>\\n<li><code>query</code>: Retrieve only the queries.</li>\\n<li><code>build</code>: Retrieve only the build operations.</li>\\n<li><code>error</code>: Retrieve only the errors (same as <code>onlyErrors</code> parameters).</li>\\n</ul>\\n\\n      </td>\\n    </tr>\\n    \\n</tbody></table>\\n\\n```python\\n# Get last 10 log entries\\nprint client.get_logs()\\n# Get last 100 log entries\\nprint client.get_logs(0, 100)\\n```\\n\\n\\n### REST API\\n\\nWe've developed API clients for the most common programming languages and platforms.\\nThese clients are advanced wrappers on top of our REST API itself and have been made\\nin order to help you integrating the service within your apps:\\nfor both indexing and search.\\n\\nEverything that can be done using the REST API can be done using those clients.\\n\\nThe REST API lets your interact directly with Algolia platforms from anything that can send an HTTP request\\n[Go to the REST API doc](https://algolia.com/doc/rest)\\n\\n\\n\\n\\n\\n## Troubleshooting\\n\\n### Unreachable hosts\\n\\nIf you are seeing an error for `Unreachable hosts` when pushing data to Algolia, this is caused by `PyOpenSSL` and older versions of Python. You can see [more information here](https://github.com/algolia/algoliasearch-client-python/issues/30).\\n\\nTo fix, either upgrade your Python version or [your urllib3](https://github.com/algolia/algoliasearch-client-python/issues/30#issuecomment-151933567).\\n\\n\", \n        \"release_url\": \"http://pypi.python.org/pypi/algoliasearch/1.11.0\", \n        \"downloads\": {\n            \"last_month\": 1, \n            \"last_week\": 1, \n            \"last_day\": 1\n        }, \n        \"_pypi_ordering\": 62, \n        \"classifiers\": [\n            \"Development Status :: 5 - Production/Stable\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2\", \n            \"Programming Language :: Python :: 2.6\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.2\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Programming Language :: Python :: 3.5\", \n            \"Topic :: Internet\", \n            \"Topic :: Internet :: WWW/HTTP\", \n            \"Topic :: Internet :: WWW/HTTP :: Indexing/Search\"\n        ], \n        \"bugtrack_url\": \"\", \n        \"name\": \"algoliasearch\", \n        \"license\": \"MIT License\", \n        \"summary\": \"Algolia Search API Client for Python\", \n        \"home_page\": \"https://github.com/algolia/algoliasearch-client-python\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"1.1.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-11-08T19:15:33\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/4a/f3/2d547944a1f08597b4642d098f17f7649ac8cccdc44d252ae24cf680e7e1/algoliasearch-1.1.1.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"e545a74f4bf1d31f0b1cd4538a0e647f\", \n                \"downloads\": 2685, \n                \"filename\": \"algoliasearch-1.1.1.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"4a/f3/2d547944a1f08597b4642d098f17f7649ac8cccdc44d252ae24cf680e7e1/algoliasearch-1.1.1.macosx-10.9-intel.exe\", \n                \"size\": 69338\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-11-08T19:15:26\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/ef/d5/c7c9491225aac6ae24a2a21cf133ba1ef92fed3eda86ef8a87a96614c198/algoliasearch-1.1.1.tar.gz\", \n                \"md5_digest\": \"ebb6a142484e3060c0ab2ef000f54c26\", \n                \"downloads\": 2851, \n                \"filename\": \"algoliasearch-1.1.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"ef/d5/c7c9491225aac6ae24a2a21cf133ba1ef92fed3eda86ef8a87a96614c198/algoliasearch-1.1.1.tar.gz\", \n                \"size\": 8214\n            }\n        ], \n        \"1.2.10\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-04-18T12:19:42\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/03/7e/b4e7c66aadffd3abc659324dc62982d6d9bdba735627855ec9e4907cb7b1/algoliasearch-1.2.10.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"36f90fa144688df6fd5abc27e90f7842\", \n                \"downloads\": 1968, \n                \"filename\": \"algoliasearch-1.2.10.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"03/7e/b4e7c66aadffd3abc659324dc62982d6d9bdba735627855ec9e4907cb7b1/algoliasearch-1.2.10.macosx-10.9-intel.exe\", \n                \"size\": 72023\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-04-18T12:19:39\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/85/6e/56a695a877d81b4207d4c80ccf35224f7b222a6c2e1429646892c69c5056/algoliasearch-1.2.10.tar.gz\", \n                \"md5_digest\": \"64d36b7958fbdf976a1ee5e37df2e722\", \n                \"downloads\": 2917, \n                \"filename\": \"algoliasearch-1.2.10.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"85/6e/56a695a877d81b4207d4c80ccf35224f7b222a6c2e1429646892c69c5056/algoliasearch-1.2.10.tar.gz\", \n                \"size\": 9454\n            }\n        ], \n        \"1.1.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-06T09:06:00\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/ef/a9/a405e74e2c67153e1cced3d464b39cfebd50e7e46ca6a5f2df442cd698bd/algoliasearch-1.1.3.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"2f1044bf4db193586f2c9bff6664a3ba\", \n                \"downloads\": 2204, \n                \"filename\": \"algoliasearch-1.1.3.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"ef/a9/a405e74e2c67153e1cced3d464b39cfebd50e7e46ca6a5f2df442cd698bd/algoliasearch-1.1.3.macosx-10.9-intel.exe\", \n                \"size\": 69716\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-06T09:05:57\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/c4/dd/fae1596ea5722e8658637d442a3ffddf32988b62f98a1e9314db2d33924e/algoliasearch-1.1.3.tar.gz\", \n                \"md5_digest\": \"54cff1e0fb11f070f02d835ceb5ac64f\", \n                \"downloads\": 2776, \n                \"filename\": \"algoliasearch-1.1.3.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"c4/dd/fae1596ea5722e8658637d442a3ffddf32988b62f98a1e9314db2d33924e/algoliasearch-1.1.3.tar.gz\", \n                \"size\": 8609\n            }\n        ], \n        \"1.1.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-05T18:37:09\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/5a/5c/16968a8c4a893a8e7db0bc90ebda0a6108de850d97a1212c675a1c04d035/algoliasearch-1.1.2.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"013aafc42e620be86449b4326cbf0102\", \n                \"downloads\": 2199, \n                \"filename\": \"algoliasearch-1.1.2.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"5a/5c/16968a8c4a893a8e7db0bc90ebda0a6108de850d97a1212c675a1c04d035/algoliasearch-1.1.2.macosx-10.9-intel.exe\", \n                \"size\": 69683\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-05T18:37:06\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a0/aa/245bb03e73ef8484ff3b2bd570b39107a46ad4ecbbcdeec3a8529f0356ff/algoliasearch-1.1.2.tar.gz\", \n                \"md5_digest\": \"ef1cf50214d04c72e8da31b13db98dda\", \n                \"downloads\": 2822, \n                \"filename\": \"algoliasearch-1.1.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a0/aa/245bb03e73ef8484ff3b2bd570b39107a46ad4ecbbcdeec3a8529f0356ff/algoliasearch-1.1.2.tar.gz\", \n                \"size\": 8580\n            }\n        ], \n        \"1.1.5\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-06T10:36:49\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/fc/25/26b96409f227939c340cd2882e2190719aa9541db5359c2d0f5cfece513b/algoliasearch-1.1.5.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"e9dffb63045b98432bd671032c52e560\", \n                \"downloads\": 2189, \n                \"filename\": \"algoliasearch-1.1.5.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"fc/25/26b96409f227939c340cd2882e2190719aa9541db5359c2d0f5cfece513b/algoliasearch-1.1.5.macosx-10.9-intel.exe\", \n                \"size\": 69491\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-06T10:36:47\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a1/75/b5ae96d36a7b9cd44658a3e4bfefac910330e32346ddd9224b913e810ead/algoliasearch-1.1.5.tar.gz\", \n                \"md5_digest\": \"c13df02dea5e3c26d88d1d16eebda1dd\", \n                \"downloads\": 2789, \n                \"filename\": \"algoliasearch-1.1.5.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a1/75/b5ae96d36a7b9cd44658a3e4bfefac910330e32346ddd9224b913e810ead/algoliasearch-1.1.5.tar.gz\", \n                \"size\": 8403\n            }\n        ], \n        \"1.1.4\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-06T09:20:33\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/28/81/07b820e55a5521e09796b87edf3073cd3c4862428fc2b6812f71f7a167de/algoliasearch-1.1.4.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"f68b222a6f08c0a5eb13db99fda4c479\", \n                \"downloads\": 2203, \n                \"filename\": \"algoliasearch-1.1.4.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"28/81/07b820e55a5521e09796b87edf3073cd3c4862428fc2b6812f71f7a167de/algoliasearch-1.1.4.macosx-10.9-intel.exe\", \n                \"size\": 69405\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-06T09:20:30\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/93/6e/26bfc78ffbb4fbf375131ea9ed46a7670b563cf8b15ad5bbf76b1056f5df/algoliasearch-1.1.4.tar.gz\", \n                \"md5_digest\": \"27e8cd0681fb8b6fb1692cc075563f88\", \n                \"downloads\": 2777, \n                \"filename\": \"algoliasearch-1.1.4.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"93/6e/26bfc78ffbb4fbf375131ea9ed46a7670b563cf8b15ad5bbf76b1056f5df/algoliasearch-1.1.4.tar.gz\", \n                \"size\": 8318\n            }\n        ], \n        \"1.0.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-10-11T10:38:59\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/b1/81/5d34fe268825c4bae18d9b43220da7f140311b7531a6bcfc6035f39b2a5f/algoliasearch-1.0.2.macosx-10.8-intel.exe\", \n                \"md5_digest\": \"1cef9a16ff9664dc562b12c9b51e6373\", \n                \"downloads\": 2300, \n                \"filename\": \"algoliasearch-1.0.2.macosx-10.8-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"b1/81/5d34fe268825c4bae18d9b43220da7f140311b7531a6bcfc6035f39b2a5f/algoliasearch-1.0.2.macosx-10.8-intel.exe\", \n                \"size\": 68259\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-10-11T10:38:55\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/8f/97/ee6fa2865b21f5526379d320ddcff3593fadd459dfd76ab881ca2a88a6a9/algoliasearch-1.0.2.tar.gz\", \n                \"md5_digest\": \"4022b392e739fca5f140a4af6908e1c8\", \n                \"downloads\": 3055, \n                \"filename\": \"algoliasearch-1.0.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"8f/97/ee6fa2865b21f5526379d320ddcff3593fadd459dfd76ab881ca2a88a6a9/algoliasearch-1.0.2.tar.gz\", \n                \"size\": 7168\n            }\n        ], \n        \"1.1.6\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-10T09:02:35\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/58/f3/dc45831417bdc2183e87c3e4de5c1af8e05f8be6420390c94c5364cef81f/algoliasearch-1.1.6.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"be01f9daf737db1f26e230398da1d4a7\", \n                \"downloads\": 2202, \n                \"filename\": \"algoliasearch-1.1.6.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"58/f3/dc45831417bdc2183e87c3e4de5c1af8e05f8be6420390c94c5364cef81f/algoliasearch-1.1.6.macosx-10.9-intel.exe\", \n                \"size\": 69489\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-10T09:02:32\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/15/af/6189cf1c51382b10cf622d66c5f3eee53e6de7c156e87d02279d930350cf/algoliasearch-1.1.6.tar.gz\", \n                \"md5_digest\": \"ff550cb3c3c362144167aea912e660b6\", \n                \"downloads\": 2766, \n                \"filename\": \"algoliasearch-1.1.6.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"15/af/6189cf1c51382b10cf622d66c5f3eee53e6de7c156e87d02279d930350cf/algoliasearch-1.1.6.tar.gz\", \n                \"size\": 8397\n            }\n        ], \n        \"1.2.5\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-01-31T00:45:33\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/49/fc/9a67308754758c4cfe12171f581998e2260531f95460f1dd0cc763375b3b/algoliasearch-1.2.5.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"09dbce5c9e1a6298a786be3574f1ea50\", \n                \"downloads\": 2120, \n                \"filename\": \"algoliasearch-1.2.5.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"49/fc/9a67308754758c4cfe12171f581998e2260531f95460f1dd0cc763375b3b/algoliasearch-1.2.5.macosx-10.9-intel.exe\", \n                \"size\": 70314\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-01-31T00:45:28\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/4e/ea/2fea0a8674fd42ed517a3735f8ac1c4dbeb2ee87365e695a3025acebce45/algoliasearch-1.2.5.tar.gz\", \n                \"md5_digest\": \"52aa9ab160374d7cd5586d4070831021\", \n                \"downloads\": 2495, \n                \"filename\": \"algoliasearch-1.2.5.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"4e/ea/2fea0a8674fd42ed517a3735f8ac1c4dbeb2ee87365e695a3025acebce45/algoliasearch-1.2.5.tar.gz\", \n                \"size\": 8346\n            }\n        ], \n        \"1.2.14\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-08-22T14:17:17\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/90/83/99951fb82a4bf28e1a433594baf55e9d19f90cde3bee5d41b2c64291c5be/algoliasearch-1.2.14.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"44e3d08bd4a2767d5d091ea7f88b40f5\", \n                \"downloads\": 1647, \n                \"filename\": \"algoliasearch-1.2.14.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"90/83/99951fb82a4bf28e1a433594baf55e9d19f90cde3bee5d41b2c64291c5be/algoliasearch-1.2.14.macosx-10.9-intel.exe\", \n                \"size\": 73050\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-08-22T14:17:09\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/cc/ee/3efcecaf5d0d8329f23244b32c50e8d0547270e452e4d22f1bd36669439d/algoliasearch-1.2.14.tar.gz\", \n                \"md5_digest\": \"5550f3f17903c6d031d7bc1a1f43bf75\", \n                \"downloads\": 1737, \n                \"filename\": \"algoliasearch-1.2.14.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"cc/ee/3efcecaf5d0d8329f23244b32c50e8d0547270e452e4d22f1bd36669439d/algoliasearch-1.2.14.tar.gz\", \n                \"size\": 10522\n            }\n        ], \n        \"1.0.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-10-09T13:48:05\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/fa/2e/8b85978e1dc6509b9f7570012ea14a6f88838c7057130250f40351aa7f6d/algoliasearch-1.0.1.macosx-10.8-intel.exe\", \n                \"md5_digest\": \"f4c03e46bac0916091834ead6551a831\", \n                \"downloads\": 2269, \n                \"filename\": \"algoliasearch-1.0.1.macosx-10.8-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"fa/2e/8b85978e1dc6509b9f7570012ea14a6f88838c7057130250f40351aa7f6d/algoliasearch-1.0.1.macosx-10.8-intel.exe\", \n                \"size\": 68251\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-10-09T13:48:01\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/1b/5e/b16837d1de28e4159ca3b7a6a3b1ad4e99c472a8b234fa72c1e3a9108a18/algoliasearch-1.0.1.tar.gz\", \n                \"md5_digest\": \"6bd50468ffd6bd4d2a13bb4d0ce4825b\", \n                \"downloads\": 3021, \n                \"filename\": \"algoliasearch-1.0.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"1b/5e/b16837d1de28e4159ca3b7a6a3b1ad4e99c472a8b234fa72c1e3a9108a18/algoliasearch-1.0.1.tar.gz\", \n                \"size\": 7163\n            }\n        ], \n        \"1.0.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-10-09T13:36:17\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/42/1d/e64344bf68dc746e9c245a1251dc54cb3b7e120206655e16ba2f18cfcf1b/algoliasearch-1.0.0.macosx-10.8-intel.exe\", \n                \"md5_digest\": \"b7bb299d5fe242d29abde40904da8659\", \n                \"downloads\": 2292, \n                \"filename\": \"algoliasearch-1.0.0.macosx-10.8-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"42/1d/e64344bf68dc746e9c245a1251dc54cb3b7e120206655e16ba2f18cfcf1b/algoliasearch-1.0.0.macosx-10.8-intel.exe\", \n                \"size\": 68265\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-10-09T13:36:13\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/b4/f5/56f837158a311930c5354be6a66da96a7597bc6225226bb54af9f430da18/algoliasearch-1.0.0.tar.gz\", \n                \"md5_digest\": \"2041b2331872e401a157babe815ba46e\", \n                \"downloads\": 3022, \n                \"filename\": \"algoliasearch-1.0.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"b4/f5/56f837158a311930c5354be6a66da96a7597bc6225226bb54af9f430da18/algoliasearch-1.0.0.tar.gz\", \n                \"size\": 7169\n            }\n        ], \n        \"1.6.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-08-01T23:00:04\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/04/3d/4ea8e026a254604770dbe2791f911e296fd28505289ba70ef76452522128/algoliasearch-1.6.2-py2.py3-none-any.whl\", \n                \"md5_digest\": \"51f4ae97108de71b636f461ee0484975\", \n                \"downloads\": 5544, \n                \"filename\": \"algoliasearch-1.6.2-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"04/3d/4ea8e026a254604770dbe2791f911e296fd28505289ba70ef76452522128/algoliasearch-1.6.2-py2.py3-none-any.whl\", \n                \"size\": 181889\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-08-01T22:59:59\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/4d/e4/96620d3c8d93bb6b42c88246e568b9aeb04b72cf8b73fd47fad37770dcda/algoliasearch-1.6.2.tar.gz\", \n                \"md5_digest\": \"074bcb6a10045e003b00de8e69cfadd0\", \n                \"downloads\": 875, \n                \"filename\": \"algoliasearch-1.6.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"4d/e4/96620d3c8d93bb6b42c88246e568b9aeb04b72cf8b73fd47fad37770dcda/algoliasearch-1.6.2.tar.gz\", \n                \"size\": 194888\n            }\n        ], \n        \"1.6.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-08-13T15:26:24\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/a9/3b/04d0a10e2eae85d94221725d5a12b3fbcb0cdc82efa33d76dddb0f8f824f/algoliasearch-1.6.3-py2.py3-none-any.whl\", \n                \"md5_digest\": \"d07f6e37ae3f24aeb59b20158ae66290\", \n                \"downloads\": 1177, \n                \"filename\": \"algoliasearch-1.6.3-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"a9/3b/04d0a10e2eae85d94221725d5a12b3fbcb0cdc82efa33d76dddb0f8f824f/algoliasearch-1.6.3-py2.py3-none-any.whl\", \n                \"size\": 181956\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-08-13T15:26:17\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/13/b3/97e49633cdff06666dceb9b02a9c0640b7a430b4cdd95fa6a8d0a4c868f2/algoliasearch-1.6.3.tar.gz\", \n                \"md5_digest\": \"d922f7c3af8a3debc5688266ccca3bc0\", \n                \"downloads\": 788, \n                \"filename\": \"algoliasearch-1.6.3.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"13/b3/97e49633cdff06666dceb9b02a9c0640b7a430b4cdd95fa6a8d0a4c868f2/algoliasearch-1.6.3.tar.gz\", \n                \"size\": 194966\n            }\n        ], \n        \"1.6.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-07-30T14:52:52\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/7b/44/cb5974e6dcebcd59d8be86140f3a1409bc282af3475120285511238a5a45/algoliasearch-1.6.1-py2.py3-none-any.whl\", \n                \"md5_digest\": \"aabfbced3182e6a00b1b10886bf3fd78\", \n                \"downloads\": 1831, \n                \"filename\": \"algoliasearch-1.6.1-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"7b/44/cb5974e6dcebcd59d8be86140f3a1409bc282af3475120285511238a5a45/algoliasearch-1.6.1-py2.py3-none-any.whl\", \n                \"size\": 181835\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-07-30T14:52:47\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/e2/45/8314799f37017006fb1403e996bfabcecbc58d97cfd5fa9b620bd798b3c3/algoliasearch-1.6.1.tar.gz\", \n                \"md5_digest\": \"e9a5566f753c25eb911851368c568669\", \n                \"downloads\": 877, \n                \"filename\": \"algoliasearch-1.6.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"e2/45/8314799f37017006fb1403e996bfabcecbc58d97cfd5fa9b620bd798b3c3/algoliasearch-1.6.1.tar.gz\", \n                \"size\": 194836\n            }\n        ], \n        \"1.6.6\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-07T22:38:57\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/89/a1/c76802b16a877475190254ee1a08c9decc84fb1e71ae85382abbbf5eb8ba/algoliasearch-1.6.6-py2.py3-none-any.whl\", \n                \"md5_digest\": \"6424b9a6d21bca6978d67251eeaa8234\", \n                \"downloads\": 34481, \n                \"filename\": \"algoliasearch-1.6.6-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"89/a1/c76802b16a877475190254ee1a08c9decc84fb1e71ae85382abbbf5eb8ba/algoliasearch-1.6.6-py2.py3-none-any.whl\", \n                \"size\": 182061\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-07T22:38:52\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/26/7e/c772161ca2fe6b1fa8da0b57256804a7828cfdef42419f472bf7cf75f0d2/algoliasearch-1.6.6.tar.gz\", \n                \"md5_digest\": \"b695254284d8e783c7e94a63a0562fd2\", \n                \"downloads\": 800, \n                \"filename\": \"algoliasearch-1.6.6.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"26/7e/c772161ca2fe6b1fa8da0b57256804a7828cfdef42419f472bf7cf75f0d2/algoliasearch-1.6.6.tar.gz\", \n                \"size\": 195264\n            }\n        ], \n        \"1.6.7\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-10-06T15:06:00\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/e7/dc/6c51d29cadd56402d06061582fbf998e62f9e14516b102c60d6ac8bb2bff/algoliasearch-1.6.7.tar.gz\", \n                \"md5_digest\": \"5bea45faac5c0b9c2b464a2d18d0c6d6\", \n                \"downloads\": 2661, \n                \"filename\": \"algoliasearch-1.6.7.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"e7/dc/6c51d29cadd56402d06061582fbf998e62f9e14516b102c60d6ac8bb2bff/algoliasearch-1.6.7.tar.gz\", \n                \"size\": 195462\n            }\n        ], \n        \"1.6.4\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-08-17T10:32:15\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/a4/52/dd4995621114d3482e9388e5e73f0d45f5585e885efe9a8549c693b3bcac/algoliasearch-1.6.4-py2.py3-none-any.whl\", \n                \"md5_digest\": \"c754c3a2209c30331182c778bd12757f\", \n                \"downloads\": 3659, \n                \"filename\": \"algoliasearch-1.6.4-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"a4/52/dd4995621114d3482e9388e5e73f0d45f5585e885efe9a8549c693b3bcac/algoliasearch-1.6.4-py2.py3-none-any.whl\", \n                \"size\": 182008\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-08-17T10:32:08\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/12/4e/be57a2e86b607f3098aa72ff6e3ab9c9ef7396431eaecd0b461b792e16bf/algoliasearch-1.6.4.tar.gz\", \n                \"md5_digest\": \"c27bc909b3c8ae4211dc62a6934e60c4\", \n                \"downloads\": 659, \n                \"filename\": \"algoliasearch-1.6.4.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"12/4e/be57a2e86b607f3098aa72ff6e3ab9c9ef7396431eaecd0b461b792e16bf/algoliasearch-1.6.4.tar.gz\", \n                \"size\": 195072\n            }\n        ], \n        \"1.6.5\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-08-25T16:59:02\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/9d/32/7cd7c1b2e1ec9044d072b223a07abf02c80340fb81af041be74f608e5bde/algoliasearch-1.6.5.tar.gz\", \n                \"md5_digest\": \"7d5d519f090d4a55035569b9cdc78ac0\", \n                \"downloads\": 13216, \n                \"filename\": \"algoliasearch-1.6.5.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"9d/32/7cd7c1b2e1ec9044d072b223a07abf02c80340fb81af041be74f608e5bde/algoliasearch-1.6.5.tar.gz\", \n                \"size\": 193136\n            }\n        ], \n        \"1.9.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-07-05T12:00:55\", \n                \"comment_text\": \"\", \n                \"python_version\": \"3.5\", \n                \"url\": \"https://pypi.python.org/packages/da/92/0d592a274105be94f314359b29e27bdeb247426cc4ff09c142310b692606/algoliasearch-1.9.1-py2.py3-none-any.whl\", \n                \"md5_digest\": \"cad8eafa91a681fddc5cb066881984db\", \n                \"downloads\": 875, \n                \"filename\": \"algoliasearch-1.9.1-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"da/92/0d592a274105be94f314359b29e27bdeb247426cc4ff09c142310b692606/algoliasearch-1.9.1-py2.py3-none-any.whl\", \n                \"size\": 196587\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-07-05T12:00:48\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/f7/95/1717518c1772060ec5d35a97934b3ae0d39973eed88bb1e0b9d1c149b910/algoliasearch-1.9.1.tar.gz\", \n                \"md5_digest\": \"2854d55f467d389e303d30d06083bcbd\", \n                \"downloads\": 190, \n                \"filename\": \"algoliasearch-1.9.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"f7/95/1717518c1772060ec5d35a97934b3ae0d39973eed88bb1e0b9d1c149b910/algoliasearch-1.9.1.tar.gz\", \n                \"size\": 215671\n            }\n        ], \n        \"1.9.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-06-15T06:55:21\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/1a/5c/9a5e30297e4d900c4817970401f57c4972dcf2a36a0ed265963b2b4669b3/algoliasearch-1.9.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"80f68b8594f3590f7d96777cc70b0a90\", \n                \"downloads\": 5252, \n                \"filename\": \"algoliasearch-1.9.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"1a/5c/9a5e30297e4d900c4817970401f57c4972dcf2a36a0ed265963b2b4669b3/algoliasearch-1.9.0-py2.py3-none-any.whl\", \n                \"size\": 193930\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-06-15T06:54:45\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a0/a6/69984bf3c5d7241e25121f3ceb974dcc8422863a802ab2ff3e901ba513e2/algoliasearch-1.9.0.tar.gz\", \n                \"md5_digest\": \"0c0dbe7e80d4227e24a3ea53b2293cc0\", \n                \"downloads\": 196, \n                \"filename\": \"algoliasearch-1.9.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a0/a6/69984bf3c5d7241e25121f3ceb974dcc8422863a802ab2ff3e901ba513e2/algoliasearch-1.9.0.tar.gz\", \n                \"size\": 213090\n            }\n        ], \n        \"1.6.8\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-10-07T14:02:03\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/f8/1d/8398f4908b87f28faf24504bdb7a9e8c9a1e6ed674dc4de542d08d4c3d7f/algoliasearch-1.6.8.tar.gz\", \n                \"md5_digest\": \"45ee05f1a2ca63af9159f9cfeab724b8\", \n                \"downloads\": 8167, \n                \"filename\": \"algoliasearch-1.6.8.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"f8/1d/8398f4908b87f28faf24504bdb7a9e8c9a1e6ed674dc4de542d08d4c3d7f/algoliasearch-1.6.8.tar.gz\", \n                \"size\": 195569\n            }\n        ], \n        \"1.9.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-08-08T15:31:09\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/18/16/486289cfbe04ba9ab017b4af1f2268bf7b55d0ea3a0656f915b1a678692a/algoliasearch-1.9.2-py2.py3-none-any.whl\", \n                \"md5_digest\": \"4944575140c5e315e80d945e4c46a1c5\", \n                \"downloads\": 1742, \n                \"filename\": \"algoliasearch-1.9.2-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"18/16/486289cfbe04ba9ab017b4af1f2268bf7b55d0ea3a0656f915b1a678692a/algoliasearch-1.9.2-py2.py3-none-any.whl\", \n                \"size\": 203839\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-08-08T15:31:05\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/c7/b9/e25f13ec385794b6c1d0a1a845d17f538374d94d8669889d31b3fae55a98/algoliasearch-1.9.2.tar.gz\", \n                \"md5_digest\": \"8ce61c1e6b8898a75697a2c91d97a013\", \n                \"downloads\": 325, \n                \"filename\": \"algoliasearch-1.9.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"c7/b9/e25f13ec385794b6c1d0a1a845d17f538374d94d8669889d31b3fae55a98/algoliasearch-1.9.2.tar.gz\", \n                \"size\": 228050\n            }\n        ], \n        \"1.8.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-02-11T20:30:00\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/4f/cb/a7e6209c4edd24ca4b9a1e3e96b2771bf3a933e71ee379fc09dbda1ae777/algoliasearch-1.8.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"9acb7e9588f3bee7470174feb143b549\", \n                \"downloads\": 3241, \n                \"filename\": \"algoliasearch-1.8.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"4f/cb/a7e6209c4edd24ca4b9a1e3e96b2771bf3a933e71ee379fc09dbda1ae777/algoliasearch-1.8.0-py2.py3-none-any.whl\", \n                \"size\": 196146\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-02-11T20:29:50\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/9d/d1/8fcc978d4e5b00811618b689a4c244223b66914db8ebd8b6e00033531dfd/algoliasearch-1.8.0.tar.gz\", \n                \"md5_digest\": \"c9fb0596143c16cffb8951b5e63b8a8e\", \n                \"downloads\": 211, \n                \"filename\": \"algoliasearch-1.8.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"9d/d1/8fcc978d4e5b00811618b689a4c244223b66914db8ebd8b6e00033531dfd/algoliasearch-1.8.0.tar.gz\", \n                \"size\": 200272\n            }\n        ], \n        \"1.7.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-10-23T17:14:42\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/bc/15/0f9d83a66c348371d04d482ea2838039a2e9b52d3254fb70b0498ea806c3/algoliasearch-1.7.1.tar.gz\", \n                \"md5_digest\": \"9ced8787049ac03bb15dcb2059878ca2\", \n                \"downloads\": 124801, \n                \"filename\": \"algoliasearch-1.7.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"bc/15/0f9d83a66c348371d04d482ea2838039a2e9b52d3254fb70b0498ea806c3/algoliasearch-1.7.1.tar.gz\", \n                \"size\": 199254\n            }\n        ], \n        \"1.7.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-10-16T16:19:16\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/fa/f6/dcdb85ed21ddb78577b06cc664c409e62ae9af7f44c64f04a8833c4a9865/algoliasearch-1.7.0.tar.gz\", \n                \"md5_digest\": \"2f10705fa6a67ff223fcfce1ebf5a4e7\", \n                \"downloads\": 4673, \n                \"filename\": \"algoliasearch-1.7.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"fa/f6/dcdb85ed21ddb78577b06cc664c409e62ae9af7f44c64f04a8833c4a9865/algoliasearch-1.7.0.tar.gz\", \n                \"size\": 204111\n            }\n        ], \n        \"1.4.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-11-29T16:19:01\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/9b/e5/9d10cd2c9972aa543ee3215130920db720fea60fb4144c21a060400a90c5/algoliasearch-1.4.0.macosx-10.10-intel.exe\", \n                \"md5_digest\": \"0c11befb2f5651bb0ff75e9e735dbbd9\", \n                \"downloads\": 1331, \n                \"filename\": \"algoliasearch-1.4.0.macosx-10.10-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"9b/e5/9d10cd2c9972aa543ee3215130920db720fea60fb4144c21a060400a90c5/algoliasearch-1.4.0.macosx-10.10-intel.exe\", \n                \"size\": 209139\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-11-29T16:18:54\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/25/99/66251820a91a39c4e9ba2976bf56729601fac21aeb4ae9fcc40946ff94e7/algoliasearch-1.4.0.tar.gz\", \n                \"md5_digest\": \"848962369332e1282df2697ce8e501f5\", \n                \"downloads\": 4160, \n                \"filename\": \"algoliasearch-1.4.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"25/99/66251820a91a39c4e9ba2976bf56729601fac21aeb4ae9fcc40946ff94e7/algoliasearch-1.4.0.tar.gz\", \n                \"size\": 149076\n            }\n        ], \n        \"1.2.11\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-07-17T14:28:15\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/cb/1b/4bba338dfb7e12933452fd791213d97e2cce2997e4a8bcbd11817af87b25/algoliasearch-1.2.11.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"1c573fe4bb140694d51858f9284963f8\", \n                \"downloads\": 1763, \n                \"filename\": \"algoliasearch-1.2.11.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"cb/1b/4bba338dfb7e12933452fd791213d97e2cce2997e4a8bcbd11817af87b25/algoliasearch-1.2.11.macosx-10.9-intel.exe\", \n                \"size\": 73055\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-07-17T14:28:12\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/dc/11/2aa64fb26b23dadc118f81c8663bcc01561d13e6e61e71dde3a2d5d87c1e/algoliasearch-1.2.11.tar.gz\", \n                \"md5_digest\": \"f613b805fe14a9df9b83313240e1042f\", \n                \"downloads\": 2024, \n                \"filename\": \"algoliasearch-1.2.11.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"dc/11/2aa64fb26b23dadc118f81c8663bcc01561d13e6e61e71dde3a2d5d87c1e/algoliasearch-1.2.11.tar.gz\", \n                \"size\": 11469\n            }\n        ], \n        \"1.2.12\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-08-20T12:04:37\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/34/81/eb66824fb7dd15fc551bf8aa5887a2e58ca2768614774db229979e7c7591/algoliasearch-1.2.12.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"13f07db983eeea05f7cc881ce76c7258\", \n                \"downloads\": 1675, \n                \"filename\": \"algoliasearch-1.2.12.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"34/81/eb66824fb7dd15fc551bf8aa5887a2e58ca2768614774db229979e7c7591/algoliasearch-1.2.12.macosx-10.9-intel.exe\", \n                \"size\": 73035\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-08-20T12:04:34\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/aa/2f/c3b61c6a9f9368243b2b168312d3ec95a76c6f861ca6b20b99241e7b06b6/algoliasearch-1.2.12.tar.gz\", \n                \"md5_digest\": \"e821b54e4192a96626b26699cfabce8a\", \n                \"downloads\": 1772, \n                \"filename\": \"algoliasearch-1.2.12.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"aa/2f/c3b61c6a9f9368243b2b168312d3ec95a76c6f861ca6b20b99241e7b06b6/algoliasearch-1.2.12.tar.gz\", \n                \"size\": 10509\n            }\n        ], \n        \"1.2.13\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-08-21T16:49:33\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/8e/1d/d2e3bd82725dbaf942936ae3bf769e84a225d7218b80e75ff1489ffe21d8/algoliasearch-1.2.13.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"d308ecb83e3dfae7f20c08ddd7cb444d\", \n                \"downloads\": 1674, \n                \"filename\": \"algoliasearch-1.2.13.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"8e/1d/d2e3bd82725dbaf942936ae3bf769e84a225d7218b80e75ff1489ffe21d8/algoliasearch-1.2.13.macosx-10.9-intel.exe\", \n                \"size\": 73036\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-08-21T16:49:30\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a3/d2/6aae14ac79a98cf5d2c5c856e0a023eb966f4c027043d5a7387965d0e82e/algoliasearch-1.2.13.tar.gz\", \n                \"md5_digest\": \"e53dba5885e022f891c38a998ea47cb2\", \n                \"downloads\": 1757, \n                \"filename\": \"algoliasearch-1.2.13.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a3/d2/6aae14ac79a98cf5d2c5c856e0a023eb966f4c027043d5a7387965d0e82e/algoliasearch-1.2.13.tar.gz\", \n                \"size\": 10507\n            }\n        ], \n        \"1.5.9\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-07-22T23:06:53\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/6d/97/2bc249673278becbca45479cb4d2271883d61427c0dc6779113614c37c2e/algoliasearch-1.5.9-py2.py3-none-any.whl\", \n                \"md5_digest\": \"4334a468a2e774964d9258c95478d306\", \n                \"downloads\": 5359, \n                \"filename\": \"algoliasearch-1.5.9-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"6d/97/2bc249673278becbca45479cb4d2271883d61427c0dc6779113614c37c2e/algoliasearch-1.5.9-py2.py3-none-any.whl\", \n                \"size\": 179089\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-07-22T23:06:47\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/88/f4/1f094b89e965dd9c635817259d5a8921e785e3a46cb595b1d217a1d4c4a7/algoliasearch-1.5.9.tar.gz\", \n                \"md5_digest\": \"a2d17e99039544a8a6ee687b34fc4820\", \n                \"downloads\": 1095, \n                \"filename\": \"algoliasearch-1.5.9.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"88/f4/1f094b89e965dd9c635817259d5a8921e785e3a46cb595b1d217a1d4c4a7/algoliasearch-1.5.9.tar.gz\", \n                \"size\": 194823\n            }\n        ], \n        \"1.5.8\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-07-10T14:59:11\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/36/f1/e636dfd9a172e6d1a1f51bd5393d74ab9e04c2faf3abff4c3d59031ee587/algoliasearch-1.5.8-py2.py3-none-any.whl\", \n                \"md5_digest\": \"1626e0b48f667ad731466fada56da0d2\", \n                \"downloads\": 2087, \n                \"filename\": \"algoliasearch-1.5.8-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"36/f1/e636dfd9a172e6d1a1f51bd5393d74ab9e04c2faf3abff4c3d59031ee587/algoliasearch-1.5.8-py2.py3-none-any.whl\", \n                \"size\": 179144\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-07-10T14:59:06\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a9/1f/5d4b175f521fef6dde4a287becbbbdbfe2c82a71e75e056a4774c7a5ef31/algoliasearch-1.5.8.tar.gz\", \n                \"md5_digest\": \"1f522050878686ac0eaa9b08669346a8\", \n                \"downloads\": 1097, \n                \"filename\": \"algoliasearch-1.5.8.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a9/1f/5d4b175f521fef6dde4a287becbbbdbfe2c82a71e75e056a4774c7a5ef31/algoliasearch-1.5.8.tar.gz\", \n                \"size\": 194849\n            }\n        ], \n        \"1.5.5\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-16T11:00:38\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/30/a8/7c7901368aab6089c02962e96aa8edee4a6df57c6c23779e54d9a3a69b86/algoliasearch-1.5.5.macosx-10.10-intel.exe\", \n                \"md5_digest\": \"f334b320fe74e8317310c220504b3976\", \n                \"downloads\": 1695, \n                \"filename\": \"algoliasearch-1.5.5.macosx-10.10-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"30/a8/7c7901368aab6089c02962e96aa8edee4a6df57c6c23779e54d9a3a69b86/algoliasearch-1.5.5.macosx-10.10-intel.exe\", \n                \"size\": 210310\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-16T11:00:31\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/8e/e2/6df399a71b96be06eec525f63e0e9a80e141af61d4fde0501dcf29b6e37a/algoliasearch-1.5.5.tar.gz\", \n                \"md5_digest\": \"c0d6828a7690148d99ba61b9e7dae887\", \n                \"downloads\": 1205, \n                \"filename\": \"algoliasearch-1.5.5.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"8e/e2/6df399a71b96be06eec525f63e0e9a80e141af61d4fde0501dcf29b6e37a/algoliasearch-1.5.5.tar.gz\", \n                \"size\": 149116\n            }\n        ], \n        \"1.5.4\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-05-04T13:54:15\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/37/9f/41b2c6e9111bc759977feeef5946b18fdfc3aa1b10ab4537a45ee569b994/algoliasearch-1.5.4.macosx-10.10-intel.exe\", \n                \"md5_digest\": \"fd2d20de00b8649b4ccbe73346c223ea\", \n                \"downloads\": 1120, \n                \"filename\": \"algoliasearch-1.5.4.macosx-10.10-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"37/9f/41b2c6e9111bc759977feeef5946b18fdfc3aa1b10ab4537a45ee569b994/algoliasearch-1.5.4.macosx-10.10-intel.exe\", \n                \"size\": 209872\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-05-04T13:54:11\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/5d/5f/d0f776634c687b1e84b09469297853236e6582e87b96a4eef09c98da627b/algoliasearch-1.5.4.tar.gz\", \n                \"md5_digest\": \"3d2c25ea4c563544cf4a52f64d55e17c\", \n                \"downloads\": 6275, \n                \"filename\": \"algoliasearch-1.5.4.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"5d/5f/d0f776634c687b1e84b09469297853236e6582e87b96a4eef09c98da627b/algoliasearch-1.5.4.tar.gz\", \n                \"size\": 148694\n            }\n        ], \n        \"1.5.7\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-19T11:14:30\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/66/fe/950ecd3bd5f17c44960b7666fd88554ffa95a972cb10ce843dd60e6c6db8/algoliasearch-1.5.7-py2.py3-none-any.whl\", \n                \"md5_digest\": \"7278a0086883c66b449deb736ea66557\", \n                \"downloads\": 2600, \n                \"filename\": \"algoliasearch-1.5.7-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"66/fe/950ecd3bd5f17c44960b7666fd88554ffa95a972cb10ce843dd60e6c6db8/algoliasearch-1.5.7-py2.py3-none-any.whl\", \n                \"size\": 178447\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-19T11:14:26\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/14/70/554fad6459196dd8cb910067dc637e86d2387f34faf984e5023a31a1c89a/algoliasearch-1.5.7.tar.gz\", \n                \"md5_digest\": \"4878f81b73e9a736c3cfa9bd58d4ee4b\", \n                \"downloads\": 1125, \n                \"filename\": \"algoliasearch-1.5.7.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"14/70/554fad6459196dd8cb910067dc637e86d2387f34faf984e5023a31a1c89a/algoliasearch-1.5.7.tar.gz\", \n                \"size\": 193822\n            }\n        ], \n        \"1.5.6\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-18T13:59:44\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/0a/16/0917789bd51cc3c7395da776d76dd1887c887b399ce340fbdaee79582e92/algoliasearch-1.5.6-py2.py3-none-any.whl\", \n                \"md5_digest\": \"e150d8670276b8c098ea989600308473\", \n                \"downloads\": 966, \n                \"filename\": \"algoliasearch-1.5.6-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"0a/16/0917789bd51cc3c7395da776d76dd1887c887b399ce340fbdaee79582e92/algoliasearch-1.5.6-py2.py3-none-any.whl\", \n                \"size\": 175537\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-18T13:59:39\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/4e/8c/1dc60344ec35a7a22d33a2b58f2e3ed91cdde184478d5214930ae1fcb424/algoliasearch-1.5.6.tar.gz\", \n                \"md5_digest\": \"c12677941055634ccd7ef1b20a343141\", \n                \"downloads\": 953, \n                \"filename\": \"algoliasearch-1.5.6.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"4e/8c/1dc60344ec35a7a22d33a2b58f2e3ed91cdde184478d5214930ae1fcb424/algoliasearch-1.5.6.tar.gz\", \n                \"size\": 176700\n            }\n        ], \n        \"1.5.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-03-13T22:18:47\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/a4/77/7b0b6a9a8380a110b7759a48f41136853abf24414dfec9c1bab38edb7490/algoliasearch-1.5.1.macosx-10.10-intel.exe\", \n                \"md5_digest\": \"46062c6bfca49ca5db30e4b6bc0ee083\", \n                \"downloads\": 1106, \n                \"filename\": \"algoliasearch-1.5.1.macosx-10.10-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"a4/77/7b0b6a9a8380a110b7759a48f41136853abf24414dfec9c1bab38edb7490/algoliasearch-1.5.1.macosx-10.10-intel.exe\", \n                \"size\": 209275\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-03-13T22:18:43\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/05/c1/601750c9a92e5508a55f33cb0bc3bea50df06e4b2d9c4ff8f73f553885c7/algoliasearch-1.5.1.tar.gz\", \n                \"md5_digest\": \"c4ccb941ccd4c029196b9dbc1f55fc88\", \n                \"downloads\": 1422, \n                \"filename\": \"algoliasearch-1.5.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"05/c1/601750c9a92e5508a55f33cb0bc3bea50df06e4b2d9c4ff8f73f553885c7/algoliasearch-1.5.1.tar.gz\", \n                \"size\": 148141\n            }\n        ], \n        \"1.5.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-12-26T21:25:38\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/9d/dc/4dedf2a411e3bb916c7284bc32ba8bb0db0bf306319ad3e5ba7d50a51504/algoliasearch-1.5.0.macosx-10.10-intel.exe\", \n                \"md5_digest\": \"16c3563d2d2a4a8003583c3f66bcbf44\", \n                \"downloads\": 1256, \n                \"filename\": \"algoliasearch-1.5.0.macosx-10.10-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"9d/dc/4dedf2a411e3bb916c7284bc32ba8bb0db0bf306319ad3e5ba7d50a51504/algoliasearch-1.5.0.macosx-10.10-intel.exe\", \n                \"size\": 209278\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-12-26T21:25:33\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/d1/f8/8833f3c0074b7800759799df47d0ec164f7e145ad7c22cb209d2dc312a35/algoliasearch-1.5.0.tar.gz\", \n                \"md5_digest\": \"f11d74e3cb292cfb005d38dd5e561f4e\", \n                \"downloads\": 3737, \n                \"filename\": \"algoliasearch-1.5.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"d1/f8/8833f3c0074b7800759799df47d0ec164f7e145ad7c22cb209d2dc312a35/algoliasearch-1.5.0.tar.gz\", \n                \"size\": 149222\n            }\n        ], \n        \"1.5.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-04-24T20:57:18\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/20/29/d6ab24847f496ed872e5ec40a4937b48fe33ef8c56e579ea6aed280d61e6/algoliasearch-1.5.3.macosx-10.10-intel.exe\", \n                \"md5_digest\": \"96d94583bf7848c960984abb3721059a\", \n                \"downloads\": 1138, \n                \"filename\": \"algoliasearch-1.5.3.macosx-10.10-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"20/29/d6ab24847f496ed872e5ec40a4937b48fe33ef8c56e579ea6aed280d61e6/algoliasearch-1.5.3.macosx-10.10-intel.exe\", \n                \"size\": 209844\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-04-24T20:57:10\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/40/11/6f75f14edc7816da78cf287f71a768d8ffac3847f93bc2a8ed23f478f833/algoliasearch-1.5.3.tar.gz\", \n                \"md5_digest\": \"c9a5416ef81d3fcadc588be1c6ec1dd3\", \n                \"downloads\": 1456, \n                \"filename\": \"algoliasearch-1.5.3.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"40/11/6f75f14edc7816da78cf287f71a768d8ffac3847f93bc2a8ed23f478f833/algoliasearch-1.5.3.tar.gz\", \n                \"size\": 149744\n            }\n        ], \n        \"1.5.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-04-09T13:33:05\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/06/cc/e584102d392233da94b84a27878bb369639a08a2ab9f63f5b9d098a600c8/algoliasearch-1.5.2.macosx-10.10-intel.exe\", \n                \"md5_digest\": \"06ccac88a676c9b709b5497c4ce58c83\", \n                \"downloads\": 1104, \n                \"filename\": \"algoliasearch-1.5.2.macosx-10.10-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"06/cc/e584102d392233da94b84a27878bb369639a08a2ab9f63f5b9d098a600c8/algoliasearch-1.5.2.macosx-10.10-intel.exe\", \n                \"size\": 209421\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-04-09T13:33:02\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/7b/ec/6aae19df05c0a51f62822cb4aed6f6975d811c484c43de173d597e3ecf50/algoliasearch-1.5.2.tar.gz\", \n                \"md5_digest\": \"200a28a4377479cf8e0eb2fe3e3a4efa\", \n                \"downloads\": 1735, \n                \"filename\": \"algoliasearch-1.5.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"7b/ec/6aae19df05c0a51f62822cb4aed6f6975d811c484c43de173d597e3ecf50/algoliasearch-1.5.2.tar.gz\", \n                \"size\": 149361\n            }\n        ], \n        \"1.3.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-15T16:10:47\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/68/1a/55fce4504a3b283b27e03ba298fbc0bf1a5d4834b028255028fbbdea4b09/algoliasearch-1.3.3.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"116c610c728de60d1bc1458282326bd3\", \n                \"downloads\": 1514, \n                \"filename\": \"algoliasearch-1.3.3.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"68/1a/55fce4504a3b283b27e03ba298fbc0bf1a5d4834b028255028fbbdea4b09/algoliasearch-1.3.3.macosx-10.9-intel.exe\", \n                \"size\": 73923\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-15T16:10:42\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/77/1e/f3ac3bc9db089197d2ea5e4d987e8ae951d60c49d4603746add668a9681a/algoliasearch-1.3.3.tar.gz\", \n                \"md5_digest\": \"095acd4a3ffdc2a7eeace4e2d5acf5e2\", \n                \"downloads\": 1588, \n                \"filename\": \"algoliasearch-1.3.3.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"77/1e/f3ac3bc9db089197d2ea5e4d987e8ae951d60c49d4603746add668a9681a/algoliasearch-1.3.3.tar.gz\", \n                \"size\": 147155\n            }\n        ], \n        \"1.3.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-15T15:59:13\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/eb/4e/e0beaaeb03179d884bfb4c115556812778960410ac1efac38d2d5cf42819/algoliasearch-1.3.2.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"5ad5ec923043e9452b116e88c4cf5796\", \n                \"downloads\": 1538, \n                \"filename\": \"algoliasearch-1.3.2.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"eb/4e/e0beaaeb03179d884bfb4c115556812778960410ac1efac38d2d5cf42819/algoliasearch-1.3.2.macosx-10.9-intel.exe\", \n                \"size\": 73900\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-15T15:59:09\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/20/e2/9733d2ddf65992d757b064b32c291a0a50221a13ad2ed55ff0c1c96b682a/algoliasearch-1.3.2.tar.gz\", \n                \"md5_digest\": \"81b8ca301419a05437638ddda97afdd2\", \n                \"downloads\": 1599, \n                \"filename\": \"algoliasearch-1.3.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"20/e2/9733d2ddf65992d757b064b32c291a0a50221a13ad2ed55ff0c1c96b682a/algoliasearch-1.3.2.tar.gz\", \n                \"size\": 11351\n            }\n        ], \n        \"1.3.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-14T20:21:27\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/7e/19/ba66465647a7213f1e5728a1c66f04d924a620e2df960fb02bc36d1cdfbd/algoliasearch-1.3.1.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"0a92c998fb5dfb4f56e4f8faf40168cd\", \n                \"downloads\": 1563, \n                \"filename\": \"algoliasearch-1.3.1.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"7e/19/ba66465647a7213f1e5728a1c66f04d924a620e2df960fb02bc36d1cdfbd/algoliasearch-1.3.1.macosx-10.9-intel.exe\", \n                \"size\": 73912\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-14T20:21:23\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/c3/69/e57dd9ddc935e50aa0c111e92d481c21421df0e14e57b021bd86e594f410/algoliasearch-1.3.1.tar.gz\", \n                \"md5_digest\": \"1f6ecdb5966d5d20dd8478f14e9237b2\", \n                \"downloads\": 1628, \n                \"filename\": \"algoliasearch-1.3.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"c3/69/e57dd9ddc935e50aa0c111e92d481c21421df0e14e57b021bd86e594f410/algoliasearch-1.3.1.tar.gz\", \n                \"size\": 12347\n            }\n        ], \n        \"1.3.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-08-25T20:56:52\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/d9/ad/a26531d75a1e74c22f36f415131b5cbe02659e701b073dcb83e93732dd63/algoliasearch-1.3.0.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"1b985d3193f506c23955eab6170809c1\", \n                \"downloads\": 1634, \n                \"filename\": \"algoliasearch-1.3.0.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"d9/ad/a26531d75a1e74c22f36f415131b5cbe02659e701b073dcb83e93732dd63/algoliasearch-1.3.0.macosx-10.9-intel.exe\", \n                \"size\": 73754\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-08-25T20:56:49\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/20/2e/4ef8da056d56961affcb39b00d30c31204c0422e4577f61fd1c3171312de/algoliasearch-1.3.0.tar.gz\", \n                \"md5_digest\": \"61c5644ca33d39212dc315fcf286e1ba\", \n                \"downloads\": 1807, \n                \"filename\": \"algoliasearch-1.3.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"20/2e/4ef8da056d56961affcb39b00d30c31204c0422e4577f61fd1c3171312de/algoliasearch-1.3.0.tar.gz\", \n                \"size\": 11205\n            }\n        ], \n        \"1.3.7\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-17T08:03:19\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/35/3a/13a632613d82ce5396c9b1596150e07fa33159b705f9931d413e4f0e16a6/algoliasearch-1.3.7.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"bf10e82986784a69953f1798913c7c9b\", \n                \"downloads\": 1482, \n                \"filename\": \"algoliasearch-1.3.7.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"35/3a/13a632613d82ce5396c9b1596150e07fa33159b705f9931d413e4f0e16a6/algoliasearch-1.3.7.macosx-10.9-intel.exe\", \n                \"size\": 209082\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-17T08:03:16\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/d0/34/e6b57e05cbcff20ba35a42d3f1fe16af757bc88a90949901bb90e4683f93/algoliasearch-1.3.7.tar.gz\", \n                \"md5_digest\": \"2f5d8e479bf7fed04f808f08a29b05a6\", \n                \"downloads\": 1541, \n                \"filename\": \"algoliasearch-1.3.7.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"d0/34/e6b57e05cbcff20ba35a42d3f1fe16af757bc88a90949901bb90e4683f93/algoliasearch-1.3.7.tar.gz\", \n                \"size\": 12175\n            }\n        ], \n        \"1.3.6\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-17T07:47:47\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/c4/41/75242b906025056d84b4974a4408c1ea4b7920caf0b9b7e188d087a1cd1f/algoliasearch-1.3.6.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"07158f5441b4406770b713f51b7b4278\", \n                \"downloads\": 1487, \n                \"filename\": \"algoliasearch-1.3.6.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"c4/41/75242b906025056d84b4974a4408c1ea4b7920caf0b9b7e188d087a1cd1f/algoliasearch-1.3.6.macosx-10.9-intel.exe\", \n                \"size\": 219719\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-17T07:47:43\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/f3/e9/7507804ec6ea04379c9e1bc308a29027d902e49f66abfb1d9a0bb0990ac1/algoliasearch-1.3.6.tar.gz\", \n                \"md5_digest\": \"567825f2912020f522e4f348594a395a\", \n                \"downloads\": 1568, \n                \"filename\": \"algoliasearch-1.3.6.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"f3/e9/7507804ec6ea04379c9e1bc308a29027d902e49f66abfb1d9a0bb0990ac1/algoliasearch-1.3.6.tar.gz\", \n                \"size\": 147878\n            }\n        ], \n        \"1.3.5\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-17T07:32:45\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/45/39/53aca6001b6200c0cf769f975950b7e87f34610356297769e331cfed32cb/algoliasearch-1.3.5.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"fcfcaa4f27c42b9edeb4dd410fb48ebd\", \n                \"downloads\": 1511, \n                \"filename\": \"algoliasearch-1.3.5.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"45/39/53aca6001b6200c0cf769f975950b7e87f34610356297769e331cfed32cb/algoliasearch-1.3.5.macosx-10.9-intel.exe\", \n                \"size\": 73945\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-17T07:32:42\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/50/6e/b452e3e7bc944a9783aec580b23d68f0bc9a21e4af265e3e6db3dca484a4/algoliasearch-1.3.5.tar.gz\", \n                \"md5_digest\": \"ec8a2eb4bc705cbdc8c4e61fc5085675\", \n                \"downloads\": 1577, \n                \"filename\": \"algoliasearch-1.3.5.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"50/6e/b452e3e7bc944a9783aec580b23d68f0bc9a21e4af265e3e6db3dca484a4/algoliasearch-1.3.5.tar.gz\", \n                \"size\": 147844\n            }\n        ], \n        \"1.3.4\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-15T16:23:19\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/11/2a/db045bfce1ef6821eb4a8e18e5d09dc2bf46d507f9d23cbecbe598f287d0/algoliasearch-1.3.4.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"5e62dc21be6924274dfdd6165dcd4aae\", \n                \"downloads\": 1548, \n                \"filename\": \"algoliasearch-1.3.4.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"11/2a/db045bfce1ef6821eb4a8e18e5d09dc2bf46d507f9d23cbecbe598f287d0/algoliasearch-1.3.4.macosx-10.9-intel.exe\", \n                \"size\": 209040\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-15T16:23:13\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a8/9b/9fa4d3f9ad79323f0a1a3526dcf52f4f3141e7871754ac52c25946d4c6c3/algoliasearch-1.3.4.tar.gz\", \n                \"md5_digest\": \"12025af763351d69ea66aafd1ac762dd\", \n                \"downloads\": 1633, \n                \"filename\": \"algoliasearch-1.3.4.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a8/9b/9fa4d3f9ad79323f0a1a3526dcf52f4f3141e7871754ac52c25946d4c6c3/algoliasearch-1.3.4.tar.gz\", \n                \"size\": 147203\n            }\n        ], \n        \"1.3.9\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-17T21:53:11\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/a6/b1/5811d16d38c1aa6e87d9d958d75314a8d6511cc6b27fc5e282b35e15d4df/algoliasearch-1.3.9.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"a7ff221007c083f4fda49651c6d17282\", \n                \"downloads\": 1633, \n                \"filename\": \"algoliasearch-1.3.9.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"a6/b1/5811d16d38c1aa6e87d9d958d75314a8d6511cc6b27fc5e282b35e15d4df/algoliasearch-1.3.9.macosx-10.9-intel.exe\", \n                \"size\": 209092\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-17T21:52:58\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/de/b4/318b0027615d2e9288363ad1d3f3aad89db03330231d39afedd74875b80d/algoliasearch-1.3.9.tar.gz\", \n                \"md5_digest\": \"e257433f748b80b1c0e4f81de62a066b\", \n                \"downloads\": 36294, \n                \"filename\": \"algoliasearch-1.3.9.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"de/b4/318b0027615d2e9288363ad1d3f3aad89db03330231d39afedd74875b80d/algoliasearch-1.3.9.tar.gz\", \n                \"size\": 147887\n            }\n        ], \n        \"1.3.8\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-17T08:10:40\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/d8/6e/9b07f201533c25a18fab3e3380bdeee1dacfb0b4476ed30e56015cfc9841/algoliasearch-1.3.8.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"e0be2e1c40935269f514f797f7c7fe1e\", \n                \"downloads\": 1495, \n                \"filename\": \"algoliasearch-1.3.8.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"d8/6e/9b07f201533c25a18fab3e3380bdeee1dacfb0b4476ed30e56015cfc9841/algoliasearch-1.3.8.macosx-10.9-intel.exe\", \n                \"size\": 209089\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-09-17T08:10:37\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/03/e2/3df026417e0729fad1338b97cfe5190ea45ea0e67580b043594ac96fbba0/algoliasearch-1.3.8.tar.gz\", \n                \"md5_digest\": \"0ee7d1cb2dbaf684b46e375d60717fae\", \n                \"downloads\": 1620, \n                \"filename\": \"algoliasearch-1.3.8.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"03/e2/3df026417e0729fad1338b97cfe5190ea45ea0e67580b043594ac96fbba0/algoliasearch-1.3.8.tar.gz\", \n                \"size\": 147885\n            }\n        ], \n        \"1.2.8\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-02-25T05:35:52\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/96/78/0d96c0fd574b16c471478220ab7879d960737438d62001f54935b5dcebea/algoliasearch-1.2.8.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"a4ab712056c78f3084c05a903cf53a16\", \n                \"downloads\": 2070, \n                \"filename\": \"algoliasearch-1.2.8.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"96/78/0d96c0fd574b16c471478220ab7879d960737438d62001f54935b5dcebea/algoliasearch-1.2.8.macosx-10.9-intel.exe\", \n                \"size\": 70902\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-02-25T05:35:49\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a0/94/4ab1db1a01f3437e00dd178b7f1407476a8d67d4c50d24b7efcbfe3e7cee/algoliasearch-1.2.8.tar.gz\", \n                \"md5_digest\": \"f5d3addf633c8ab3677e6989b381cf1f\", \n                \"downloads\": 2500, \n                \"filename\": \"algoliasearch-1.2.8.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a0/94/4ab1db1a01f3437e00dd178b7f1407476a8d67d4c50d24b7efcbfe3e7cee/algoliasearch-1.2.8.tar.gz\", \n                \"size\": 8930\n            }\n        ], \n        \"1.2.9\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-03-31T04:00:18\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/8b/98/ab1bf747f5504257ce8bc401090af1171c2db9eec858dc2242556f5c83f6/algoliasearch-1.2.9.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"9a5e3d874d07b1bb39acc72c9d7981d6\", \n                \"downloads\": 1976, \n                \"filename\": \"algoliasearch-1.2.9.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"8b/98/ab1bf747f5504257ce8bc401090af1171c2db9eec858dc2242556f5c83f6/algoliasearch-1.2.9.macosx-10.9-intel.exe\", \n                \"size\": 71055\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-03-31T04:00:15\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/7b/5e/e819fe02e310f57298121e57fcf7c178eb0905392192ea30a7d43ec56f66/algoliasearch-1.2.9.tar.gz\", \n                \"md5_digest\": \"a41dd502415a1d88984325c01ceb82df\", \n                \"downloads\": 2268, \n                \"filename\": \"algoliasearch-1.2.9.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"7b/5e/e819fe02e310f57298121e57fcf7c178eb0905392192ea30a7d43ec56f66/algoliasearch-1.2.9.tar.gz\", \n                \"size\": 9090\n            }\n        ], \n        \"1.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-11-07T17:58:47\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/0c/80/7befb837423bbc647ecf5f670e4119d6ced79e4127b4fc0757e0d4db5a72/algoliasearch-1.1.0.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"347273b98dc1af8c25504e15e0e27da2\", \n                \"downloads\": 2225, \n                \"filename\": \"algoliasearch-1.1.0.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"0c/80/7befb837423bbc647ecf5f670e4119d6ced79e4127b4fc0757e0d4db5a72/algoliasearch-1.1.0.macosx-10.9-intel.exe\", \n                \"size\": 69172\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-11-07T17:58:44\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/71/d8/3f05055e9f69cd1d6377a01830a1cdcbfd01beef99726c661140acb10926/algoliasearch-1.1.0.tar.gz\", \n                \"md5_digest\": \"8f7184597c954ca7af9ddbc7d5b0a898\", \n                \"downloads\": 2863, \n                \"filename\": \"algoliasearch-1.1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"71/d8/3f05055e9f69cd1d6377a01830a1cdcbfd01beef99726c661140acb10926/algoliasearch-1.1.0.tar.gz\", \n                \"size\": 8059\n            }\n        ], \n        \"1.2.6\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-02-02T07:48:34\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/cd/29/1644dba33b247c39a4c043e9c8b6bb0437efdd851a48ba8d627dcc5f454b/algoliasearch-1.2.6.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"c3b3da5cc5111dea79ab8ac6d7be29e4\", \n                \"downloads\": 2121, \n                \"filename\": \"algoliasearch-1.2.6.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"cd/29/1644dba33b247c39a4c043e9c8b6bb0437efdd851a48ba8d627dcc5f454b/algoliasearch-1.2.6.macosx-10.9-intel.exe\", \n                \"size\": 70336\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-02-02T07:48:29\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/2d/7c/cd1e81235e3c4cd816478c918a68f74bd952fe2eea1343b7944d40d35733/algoliasearch-1.2.6.tar.gz\", \n                \"md5_digest\": \"824d00f7543385eb0ceb0305f09a64ab\", \n                \"downloads\": 2533, \n                \"filename\": \"algoliasearch-1.2.6.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"2d/7c/cd1e81235e3c4cd816478c918a68f74bd952fe2eea1343b7944d40d35733/algoliasearch-1.2.6.tar.gz\", \n                \"size\": 9365\n            }\n        ], \n        \"1.11.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-12-02T23:52:37\", \n                \"comment_text\": \"\", \n                \"python_version\": \"3.5\", \n                \"url\": \"https://pypi.python.org/packages/c1/4f/0d8babe82e3dca8e3f2b5a908e988ee34568593868b2dc3611cbd277b9dc/algoliasearch-1.11.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"77effaafe75bfd62f8b5104391d2e0b4\", \n                \"downloads\": 53, \n                \"filename\": \"algoliasearch-1.11.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"c1/4f/0d8babe82e3dca8e3f2b5a908e988ee34568593868b2dc3611cbd277b9dc/algoliasearch-1.11.0-py2.py3-none-any.whl\", \n                \"size\": 206873\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-12-02T23:52:33\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/68/85/0d5ec56845dd9f5762092af416ad43232eb393be1c7f0c69a1acf643893b/algoliasearch-1.11.0.tar.gz\", \n                \"md5_digest\": \"c283968e79a59c80a95f725674f44817\", \n                \"downloads\": 15, \n                \"filename\": \"algoliasearch-1.11.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"68/85/0d5ec56845dd9f5762092af416ad43232eb393be1c7f0c69a1acf643893b/algoliasearch-1.11.0.tar.gz\", \n                \"size\": 231572\n            }\n        ], \n        \"1.2.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-18T11:47:11\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/65/fb/0e9e907ffa1cb369b267f0554e18de15bbfbef6e386432809eb0e38ac08c/algoliasearch-1.2.1.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"71e796580f9985e02e6a24044bbf65a5\", \n                \"downloads\": 2191, \n                \"filename\": \"algoliasearch-1.2.1.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"65/fb/0e9e907ffa1cb369b267f0554e18de15bbfbef6e386432809eb0e38ac08c/algoliasearch-1.2.1.macosx-10.9-intel.exe\", \n                \"size\": 69619\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-18T11:47:07\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/44/76/d7efad00c7d376f1c1f2129c4ada629a8276980550a4fe0bba76c9533234/algoliasearch-1.2.1.tar.gz\", \n                \"md5_digest\": \"450e6faa1b648ac8594c2beeb57b141c\", \n                \"downloads\": 2680, \n                \"filename\": \"algoliasearch-1.2.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"44/76/d7efad00c7d376f1c1f2129c4ada629a8276980550a4fe0bba76c9533234/algoliasearch-1.2.1.tar.gz\", \n                \"size\": 7697\n            }\n        ], \n        \"1.2.7\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-02-25T04:05:36\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/82/4e/d109b06a6dad702cb07813ec59280d49fb8cbed99794ee5049c6dbba233c/algoliasearch-1.2.7.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"9359d9a95fd6251119d75c360d06281a\", \n                \"downloads\": 2055, \n                \"filename\": \"algoliasearch-1.2.7.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"82/4e/d109b06a6dad702cb07813ec59280d49fb8cbed99794ee5049c6dbba233c/algoliasearch-1.2.7.macosx-10.9-intel.exe\", \n                \"size\": 70863\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-02-25T04:05:33\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/cd/f9/93c7ed7978d6ff43a39e5420f1f92c7a034cb8b62b483cd0a25c9b84ab03/algoliasearch-1.2.7.tar.gz\", \n                \"md5_digest\": \"90ccd68106b3d39e19b48738ea6d108d\", \n                \"downloads\": 2350, \n                \"filename\": \"algoliasearch-1.2.7.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"cd/f9/93c7ed7978d6ff43a39e5420f1f92c7a034cb8b62b483cd0a25c9b84ab03/algoliasearch-1.2.7.tar.gz\", \n                \"size\": 8860\n            }\n        ], \n        \"1.2.4\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-01-11T19:13:53\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/40/32/e68bc7ec2d8befa3c3cf8d4cff5d365b2521f48676d461b486df8b90f702/algoliasearch-1.2.4.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"607b06299305b926710d1bbd093a0880\", \n                \"downloads\": 2148, \n                \"filename\": \"algoliasearch-1.2.4.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"40/32/e68bc7ec2d8befa3c3cf8d4cff5d365b2521f48676d461b486df8b90f702/algoliasearch-1.2.4.macosx-10.9-intel.exe\", \n                \"size\": 70254\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-01-11T19:13:51\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a8/ef/f58e59cb5a34f086ac766af0cb9e9fd64ea80d4889f27f0361ef8d070682/algoliasearch-1.2.4.tar.gz\", \n                \"md5_digest\": \"b114ec08051117efaa1667f2604b8e8a\", \n                \"downloads\": 2683, \n                \"filename\": \"algoliasearch-1.2.4.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a8/ef/f58e59cb5a34f086ac766af0cb9e9fd64ea80d4889f27f0361ef8d070682/algoliasearch-1.2.4.tar.gz\", \n                \"size\": 8286\n            }\n        ], \n        \"1.10.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-10-19T10:47:49\", \n                \"comment_text\": \"\", \n                \"python_version\": \"3.5\", \n                \"url\": \"https://pypi.python.org/packages/bb/d7/197a7c0c7161427f5e175b912d55d705c55f3b54e86c8956b7157e577816/algoliasearch-1.10.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"e3f4e306e583dd83d82efb30f655c699\", \n                \"downloads\": 684, \n                \"filename\": \"algoliasearch-1.10.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"bb/d7/197a7c0c7161427f5e175b912d55d705c55f3b54e86c8956b7157e577816/algoliasearch-1.10.0-py2.py3-none-any.whl\", \n                \"size\": 205832\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-10-19T10:47:46\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/ee/98/2ab4529d685d15535aa10fc785b73f7be56a1f7ed5c95d3aab715d767786/algoliasearch-1.10.0.tar.gz\", \n                \"md5_digest\": \"e6a7a094bf25fa698fef7e829da4cdca\", \n                \"downloads\": 314, \n                \"filename\": \"algoliasearch-1.10.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"ee/98/2ab4529d685d15535aa10fc785b73f7be56a1f7ed5c95d3aab715d767786/algoliasearch-1.10.0.tar.gz\", \n                \"size\": 230145\n            }\n        ], \n        \"1.3.11\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-10-22T15:00:35\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/88/0f/61f213b11694a37f2d1a64ea9fbae127380f7d45218ee6778caa2c3f36a1/algoliasearch-1.3.11.macosx-10.10-intel.exe\", \n                \"md5_digest\": \"9a1b65e5133d58d9c906804bc5cb98c0\", \n                \"downloads\": 1435, \n                \"filename\": \"algoliasearch-1.3.11.macosx-10.10-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"88/0f/61f213b11694a37f2d1a64ea9fbae127380f7d45218ee6778caa2c3f36a1/algoliasearch-1.3.11.macosx-10.10-intel.exe\", \n                \"size\": 209141\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-10-22T15:00:32\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/df/ae/712c168a3670c22e91f5ee553fff2b58900342c9d1a8fb9ba2bc9757a335/algoliasearch-1.3.11.tar.gz\", \n                \"md5_digest\": \"953f761ddc0343315037083db3790f49\", \n                \"downloads\": 4429, \n                \"filename\": \"algoliasearch-1.3.11.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"df/ae/712c168a3670c22e91f5ee553fff2b58900342c9d1a8fb9ba2bc9757a335/algoliasearch-1.3.11.tar.gz\", \n                \"size\": 147931\n            }\n        ], \n        \"1.3.10\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-10-11T15:19:05\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/8f/86/7999dbc82a51c6decebc0fea56c8ca05afa8ed9fc32991e352b59142c298/algoliasearch-1.3.10.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"c446ad7753959f0d4add91661040f43b\", \n                \"downloads\": 1416, \n                \"filename\": \"algoliasearch-1.3.10.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"8f/86/7999dbc82a51c6decebc0fea56c8ca05afa8ed9fc32991e352b59142c298/algoliasearch-1.3.10.macosx-10.9-intel.exe\", \n                \"size\": 209112\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-10-11T15:19:00\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/ac/25/1665dbd5dbd934986f1b1c9cc7712bc9a09539b51e9cea2e35fe74276d66/algoliasearch-1.3.10.tar.gz\", \n                \"md5_digest\": \"d6c42c5994622dd2334e799d725eaefe\", \n                \"downloads\": 3092, \n                \"filename\": \"algoliasearch-1.3.10.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"ac/25/1665dbd5dbd934986f1b1c9cc7712bc9a09539b51e9cea2e35fe74276d66/algoliasearch-1.3.10.tar.gz\", \n                \"size\": 147895\n            }\n        ], \n        \"1.2.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-23T15:52:07\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/83/d3/db085d15a4e96e01f87f5b51e3c35c9c89af1ebe0ea6c0ca686c45e2cf94/algoliasearch-1.2.2.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"21035ad652ea1a458274ba42883d7410\", \n                \"downloads\": 2168, \n                \"filename\": \"algoliasearch-1.2.2.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"83/d3/db085d15a4e96e01f87f5b51e3c35c9c89af1ebe0ea6c0ca686c45e2cf94/algoliasearch-1.2.2.macosx-10.9-intel.exe\", \n                \"size\": 70231\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-23T15:52:04\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a1/7e/265092d53880cada4533756ab9f3d791cb3f7b971c1900bb0964836995d5/algoliasearch-1.2.2.tar.gz\", \n                \"md5_digest\": \"23b72ce462d0b0ad3d05bf63d457c178\", \n                \"downloads\": 2623, \n                \"filename\": \"algoliasearch-1.2.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a1/7e/265092d53880cada4533756ab9f3d791cb3f7b971c1900bb0964836995d5/algoliasearch-1.2.2.tar.gz\", \n                \"size\": 9214\n            }\n        ], \n        \"1.2.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-01-11T18:48:18\", \n                \"comment_text\": \"\", \n                \"python_version\": \"any\", \n                \"url\": \"https://pypi.python.org/packages/89/00/ef7ae1701cb4f1d538ac4c5ba6c32028d0eee0b642023354c8ef4d232870/algoliasearch-1.2.3.macosx-10.9-intel.exe\", \n                \"md5_digest\": \"cea42f19e437f79dec9ff541592a807e\", \n                \"downloads\": 2111, \n                \"filename\": \"algoliasearch-1.2.3.macosx-10.9-intel.exe\", \n                \"packagetype\": \"bdist_wininst\", \n                \"path\": \"89/00/ef7ae1701cb4f1d538ac4c5ba6c32028d0eee0b642023354c8ef4d232870/algoliasearch-1.2.3.macosx-10.9-intel.exe\", \n                \"size\": 70248\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-01-11T18:48:16\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/2e/23/18e66ad42d98e9fd7148208d78ae904719b847c543a36fb0edd3f7f6a462/algoliasearch-1.2.3.tar.gz\", \n                \"md5_digest\": \"233a38fcc18276586662e5cced07bcf2\", \n                \"downloads\": 2557, \n                \"filename\": \"algoliasearch-1.2.3.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"2e/23/18e66ad42d98e9fd7148208d78ae904719b847c543a36fb0edd3f7f6a462/algoliasearch-1.2.3.tar.gz\", \n                \"size\": 8282\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-12-02T23:52:37\", \n            \"comment_text\": \"\", \n            \"python_version\": \"3.5\", \n            \"url\": \"https://pypi.python.org/packages/c1/4f/0d8babe82e3dca8e3f2b5a908e988ee34568593868b2dc3611cbd277b9dc/algoliasearch-1.11.0-py2.py3-none-any.whl\", \n            \"md5_digest\": \"77effaafe75bfd62f8b5104391d2e0b4\", \n            \"downloads\": 53, \n            \"filename\": \"algoliasearch-1.11.0-py2.py3-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"c1/4f/0d8babe82e3dca8e3f2b5a908e988ee34568593868b2dc3611cbd277b9dc/algoliasearch-1.11.0-py2.py3-none-any.whl\", \n            \"size\": 206873\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-12-02T23:52:33\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/68/85/0d5ec56845dd9f5762092af416ad43232eb393be1c7f0c69a1acf643893b/algoliasearch-1.11.0.tar.gz\", \n            \"md5_digest\": \"c283968e79a59c80a95f725674f44817\", \n            \"downloads\": 15, \n            \"filename\": \"algoliasearch-1.11.0.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"68/85/0d5ec56845dd9f5762092af416ad43232eb393be1c7f0c69a1acf643893b/algoliasearch-1.11.0.tar.gz\", \n            \"size\": 231572\n        }\n    ]\n}", "encoding": "UTF-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/algoliasearch/json", "headers": {"X-Frame-Options": ["deny"], "X-PYPI-LAST-SERIAL": ["2534636"], "Access-Control-Allow-Origin": ["*"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Accept-Ranges": ["bytes"], "X-Content-Type-Options": ["nosniff"], "X-Timer": ["S1482488828.165851,VS0,VE3"], "Via": ["1.1 varnish", "1.1 varnish"], "X-Served-By": ["cache-iad2131-IAD, cache-hhn1545-HHN"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Age": ["80398"], "Date": ["Fri, 23 Dec 2016 10:27:08 GMT"], "Fastly-Debug-Digest": ["dd57520764c1114fdb6ff228da3e6af49d94fdc365959f88ad763af14f9acc96"], "Server": ["nginx/1.10.2"], "X-XSS-Protection": ["1; mode=block"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Content-Length": ["191642"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Cache-Hits": ["1, 1"], "Content-Disposition": ["inline"], "X-Cache": ["HIT, HIT"], "Connection": ["keep-alive"], "Cache-Control": ["max-age=600, public"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://pypi.python.org/pypi/algoliasearch/json"}}, {"recorded_at": "2016-12-23T10:27:09", "response": {"body": {"base64_string": "", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/algolia/algoliasearch-client-python", "headers": {"Content-Encoding": ["gzip"], "Date": ["Fri, 23 Dec 2016 10:27:08 GMT"], "Server": ["GitHub.com"], "X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["54B1D78B:C3EE:E61E818:585CFBFC"], "Transfer-Encoding": ["chunked"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["X-PJAX", "Accept-Encoding"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Request-Id": ["4f696dbc9c474b8e51ee016fb8d52eea"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-Content-Type-Options": ["nosniff"], "Status": ["200 OK"], "X-Runtime": ["0.101202"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["e8139beab029364506236105cf49728b"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:27:08 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiYThkMTQ5ZWJiZDMzYTZkY2I3ZjIxMDBmODQ1ZDFhYjgiLCJzcHlfcmVwbyI6ImFsZ29saWEvYWxnb2xpYXNlYXJjaC1jbGllbnQtcHl0aG9uIiwic3B5X3JlcG9fYXQiOjE0ODI0ODg4MjgsIl9jc3JmX3Rva2VuIjoiVGFCUDYrRkZjYzU3Q2JEK3NGNnZ5c1FHMi9KWHBPNy9KcVFNMjhhWjZqMD0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--8b902b7460bfd466736ac1945bdb5e06058fbeda; path=/; secure; HttpOnly"], "Cache-Control": ["no-cache"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://github.com/algolia/algoliasearch-client-python"}}, {"recorded_at": "2016-12-23T10:27:09", "response": {"body": {"base64_string": "H4sIAAAAAAAAA3VYbVMbORL+zq/Ql0vgDpsZ2xjYKlLFBkK4zRJ2gauturoCeUa2FcajWUmD8V7df7+n9TIvjpNKttYz6ket7ufpbs3Hzxe311dfvl7v7Y2SdDpIR4NkxNJhmg6TPYY/f2cfVTmXi1oLdnl7z7QwqniV5ZxZuRKqtmHVzaoqxEqUlpVijVVWb1ihFjKLwOlgdEbAyTANJhd5zp6N4DpbPs2VfprzTNinV17U4plZxUxdVQUHYrOIFjxHwGSQBsCkC8it1XJWW/Fk1RP5IcWrx3teAF7NvonMmueuSameMi24xbK1tEv2XHFtJS+e6irH02Dz/N1J7VIw7xqTJXPesYu7GybKnFVKlja4mpziL1w9G44Cxif5xoTWSjNVsoLrhXCGL2Jj2GwDtKyoc1kuaIsVgdNW/7z/estmKqf3xgqeMzVn3DDOlvghdAe7UhYO4ggMRzEE5HcDUsaNIMOltdVHlQt2fs4mf/wRXT0ZJMfO1bQDR7s/G6sRjMXmmTD5SlihCed5VdtCIiRPf9YCwe6F1hkit2uu8wd1X/BXvN+yN8gK/ll4aWJyE+TXu5HsjDpxzGxKVW5WLnDzusysVKUJq69KQ4SlpUtlLGKEXxn+V5RM8zJXq2LD1kv6RUylAMFLNoMb8GrGQbsMD6M3I9AX3pw23jxWC42QE6u0wLmxxb+NyGot7eY/H85HFD96OQ/Bq0vkp3D73N/eMGkMbBz6MRF5NAb6SU8YmVpV3MqZLADpaXmt1KIAUapKlAtZitY+nTr76N3vYqVe/em9EEEypNhzwHQ2cWEkt0XOeCWJf52sz+qF3ziXBtnJLOEQaC4KZO/nzW9I+IYhk0uVt84kJ3BmOjyN5YNb6IMXBRNvmahcliKjvXeRWB2IqYM46TjDSx8175FLLPJYUERBokyVpXAMiIf0WMmZV950OP0h1len7ptLgHLriFIqS04RAX5klIs5rwuL0CAsDZ/jrqeD1AdhEgAeonxFmUFzGsWiKGY8eyGS1KWkh0fYksk5kxYUlUYY9rCpxBUdp4M7drjjjmMdrwISIyVuWiNX0adN8bn3JatUa1bTNndf7x8ijbul5frqIWKcDMaJw+hWhbsNlDerZZF/t6xl4hqSEC79lLMKR+YLMXQBIeF+LCRpWhqWJsnfGIWEakVD/0IMo9c4Ibyea7VitS4KORt35RdW/YtrqWpDwmudcvI6Hp51ua3V2ogn8gs0ij8duOezac3TxJmfbtU1HrRJGTRebaShmVhKIHJWafXWJGHqNXo8PN6duZKY++Z0tgidpNGIIaKhQroS5fQnzTdX8CByt5aMggxbH7tn6pyRjrx1RPydMOfdZKs4hIV0Rp7nR74fbpUKt5cTuV9Niy21NMtW8JxaA84CoYhu6Ymi7zSDeLxo9ZvvJztdok0WohQEsl3CPEecBlr05rCTwSgcdtxBblFDt3KeUCNHbiHLas8tjhDJmYeIkvrZN45+PYOpa+FrhYzN50IT08GKV0kVYB8dTVOZXsrFcsBfuSwio6A9N1qooqaSdhhwIZJclYKqMC8WqpC8FHYIpRw0aiPhVhQUV2WpluEXTrQS7mwXd3c3l4PclMMAMAQCQFec5hepoX+sKjAwaaiUXUoTZqk8Fo1bgePoF7Zv0AMy34yzAn0VpoXK3MYHbcumA+ZxUmwC8xMNOBi4DMkmvONzCuCIYUNeGPYO5R2x4Z3IaTpdXE5cCaNXe+BujsZUKl2OOiULvsAppa2rql55dxtkvmRjcD+aT2gMHk29eWe47BxlP3Sc5sE5S8nrnpPnbJyYgyFaYImywBALrSWhuI1p7okrYw9tHXDjMhyYwIHgwa8umFQ1M4jYi/L7NHZnw/BWqvCyuwGmjhFtMMasv9dVgtKkVyJNoJGbk9oxqi5xyGzJUZv7eJiRPF7j8aVyvRSJrlfC91cVuq3H8l3WDDtAaNlong7orDk5fyElhWZBxewGA9Ub1YOBsRsUmMpnMSuIVMbRA/ySoJR4wyhscJCtPY79Hv8dHY4PJ4fHh9PDk8PT/+31yEKXnVqjcB1lfDDDEId2lGnr5/MdmJMQgL0eZ8ItggrJE5Wnd9tPuiing1HwrIniI2RiSv4iBm52J3VukBOEb39HvzzYQnNJHg3TSUsjWKI/CkqBqqkzKFUcfTOIHxyC/ORfLvNbQGkAGvdjtObSPnDz8t4wUwhRbVklwWrUt6ItBS8HM5wo367Vfkpy83eLdRJoMerzFdboNH6GM73HvSm1iwSyngakpO9VLjK5wqXJjWr9WIRlCmyI48eHc7oSpLDCQJ7DZzcLUHkchMBydn1x5ebofbpumZ+OjhaQfj2jqn1klvwvtT4KaEf+UnA0Pp72Ujimmcp5e9Z3Vpa4Kks4DSoNPlAlMZavKpqFwZBtdo5C2xthjunBeOWM+xeO3ZYnezsCvCv0sTPf+8Z8UclfwHufa+pepatieHaISWHxSRbUoJ2ulbsgIAWu7Vr1ImLoL9pxy1TI03yD8BboUFTpJJUDENrPHcQveuswwr06kh9RplLy+PBpcNrwDCVOoogEt+nB5dWXq4cr9vj7l34okqCCaT+IDRB8iRUuVHlUpGUXI23yedxgxMsAKdDq/QO6BrTXBT8SysL0YdLgymRLWWAbcPxEhqSuEFa6cFmt8jpzvHFm491oW+rOVRaLdDNkYOS0yt3d+5s0gGPXP8cecPTjSBFzt6zSUy/MtoNkNd36nQidTbyLzgW3IFe8HViqaoi1ba+ZjlDuKkV3qk5fdHmWGXvfaWWuwb1vjbfccilL27Q3sw01/M7cFmaSdyx+0ehNoF3IZOohj/ui8lP69kDQsxj3LcLHqkfXU4Iad9indBN29k1wr9xlFF1A802oxMF/53SnLXv7E2+f9PfPUMi178fbdxACrCsauCg2K/4WRvo7oW/u8J/P6K4uS3j1WVp67r8p0Hcq+iIXkh6/jXX9ifNGss0w1FN/y6ZZG5ld9a386J60UYilPxRxKcxugzgIYhjpzBtuImm7rxd9eIsy8Q+2337Ma0bNt4O9/wPmtKoweRUAAA==", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/algolia/algoliasearch-client-python/master/ChangeLog", "headers": {"Content-Encoding": ["gzip"], "Expires": ["Fri, 23 Dec 2016 10:32:09 GMT"], "ETag": ["\"4ad665a73a1e3f490647f06a1e8c14d36ed14173\""], "X-Frame-Options": ["deny"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "X-Cache": ["MISS"], "X-Fastly-Request-ID": ["a0dd79f9ebdd0dcd0ae04ca11ddca85436752153"], "Accept-Ranges": ["bytes"], "X-Content-Type-Options": ["nosniff"], "X-Geo-Block-List": [""], "Cache-Control": ["max-age=300"], "Via": ["1.1 varnish"], "Access-Control-Allow-Origin": ["*"], "X-Served-By": ["cache-hhn1541-HHN"], "Content-Type": ["text/plain; charset=utf-8"], "Date": ["Fri, 23 Dec 2016 10:27:09 GMT"], "Source-Age": ["0"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["Authorization,Accept-Encoding"], "X-GitHub-Request-Id": ["C71B4C14:2ADB9:46C0F5D:585CFBFC"], "Content-Length": ["2305"], "X-Cache-Hits": ["0"], "X-Timer": ["S1482488829.181219,VS0,VE119"], "Connection": ["keep-alive"], "Strict-Transport-Security": ["max-age=31536000"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://raw.githubusercontent.com/algolia/algoliasearch-client-python/master/ChangeLog"}}]}