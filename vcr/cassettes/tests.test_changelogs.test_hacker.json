{"http_interactions": [{"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/hacker/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"Cache-Control": ["max-age=600, public"], "Fastly-Debug-Digest": ["2659ece835c9d7c57f675642fffdbd8d75b5ad2dc4b9f07ab20fd13a3f401ee9"], "Via": ["1.1 varnish", "1.1 varnish"], "Connection": ["keep-alive"], "X-Cache-Hits": ["1, 1"], "Date": ["Fri, 23 Dec 2016 10:42:22 GMT"], "X-Served-By": ["cache-iad2148-IAD, cache-hhn1545-HHN"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Access-Control-Allow-Origin": ["*"], "X-Timer": ["S1482489742.836193,VS0,VE0"], "X-XSS-Protection": ["1; mode=block"], "X-PYPI-LAST-SERIAL": ["2534664"], "X-Cache": ["HIT, HIT"], "Accept-Ranges": ["bytes"], "Content-Disposition": ["inline"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Server": ["nginx/1.10.2"], "Age": ["79378"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Length": ["11438"], "X-Frame-Options": ["deny"], "X-Content-Type-Options": ["nosniff"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/hacker/json", "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": null, \n        \"package_url\": \"http://pypi.python.org/pypi/hacker\", \n        \"author\": \"Avinash Sajjanshetty\", \n        \"author_email\": \"a@sajjanshetty.com\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"0.3.1\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"#haxor\\n\\n[![travis](https://img.shields.io/travis/avinassh/haxor.svg)](http://travis-ci.org/avinassh/haxor)\\n[![coverall](https://img.shields.io/coveralls/avinassh/haxor.svg)](https://coveralls.io/r/avinassh/haxor?branch=master)\\n[![version](https://img.shields.io/pypi/v/haxor.svg)](https://pypi.python.org/pypi/haxor/)\\n[![supported](https://img.shields.io/pypi/pyversions/haxor.svg)](https://pypi.python.org/pypi/haxor/)\\n![license](https://img.shields.io/pypi/l/haxor.svg)\\n\\nUnofficial Python wrapper for official Hacker News API.\\n\\nInstallation\\n============\\n```python\\npip install haxor\\n```\\nUsage\\n=====\\n\\nimport and initialization:\\n```python\\nfrom hackernews import HackerNews\\nhn = HackerNews()\\n```\\nGet certain user info by user id (i.e. username on Hacker News)\\n```python\\nuser = hn.get_user('pg')\\n# >>> user.user_id\\n# pg\\n# >>> user.karma\\n# 155040\\n```\\nStories, comments, jobs, Ask HNs and even polls are just items and they\\nhave unique item id. To get info of an item by item id:\\n```python\\nitem = hn.get_item(8863)\\n# >>> item.title\\n# \\\"My YC app: Dropbox - Throw away your USB drive\\\"\\n# >>> item.type\\n# story\\n# >>> item.kids\\n# [ 8952, 9224, 8917, ...]\\n```\\nTo get item ids of current top stories:\\n```python\\ntop_story_ids = hn.top_stories()\\n# >>> top_story_ids\\n# [8432709, 8432616, 8433237, ...]\\n```\\nTo get current largest item id:\\n```python\\nmax_item = hn.get_max_item()\\n# >>> max_item\\n# 8433746\\n```\\nExamples\\n========\\n\\nGet top 10 stories:\\n```python\\nfor story_id in hn.top_stories(limit=10):\\n    print hn.get_item(story_id)\\n\\n# <hackernews.Item: 8432709 - Redis cluster, no longer vaporware>\\n# <hackernews.Item: 8432423 - Fluid Actuators from Disney Research Make Soft, Safe Robot Arms>\\n# <hackernews.Item: 8433237 - Is Capturing Carbon from the Air Practical?>\\n# ...\\n# ...\\n```\\nFind all the 'jobs' post from Top Stories:\\n```python\\nfor story_id in hn.top_stories():\\n    story = hn.get_item(story_id)\\n    if story.item_type == 'job':\\n        print story\\n\\n# <hackernews.Item: 8437631 - Lever (YC S12) hiring JavaScript experts, realtime systems engineers, to scale DerbyJS>\\n# <hackernews.Item: 8437036 - Product Designer (employee #1) to Organize the World's Code \\u2013 Blockspring (YC S14)>\\n# <hackernews.Item: 8436584 - Django and iOS Hackers Needed \\u2013 fix healthcare with Drchrono>\\n# ...\\n# ...\\n```\\nFind Python jobs from monthly who is hiring thread:\\n```python\\n# Who is hiring\\n# https://news.ycombinator.com/item?id=8394339\\n\\nwho_is_hiring = hn.get_item(8394339)\\n\\nfor comment_id in who_is_hiring.kids:\\n    comment = hn.get_item(comment_id)\\n    if 'python' in comment.text.lower():\\n        print comment.item_id\\n\\n# 8395568\\n# 8394964\\n# ...\\n# ...\\n```\\nAPI Reference\\n=============\\n\\nClass: `HackerNews`\\n===================\\n\\n**Parameters:**\\n\\n| Name       | Type   | Required  | Description                           | Default\\n| ---------- | ------ | --------- | ------------------------------------- | --------\\n| `version`  | string | No        | specifies Hacker News API version     | `v0`\\n\\n`get_item`\\n----------\\n\\nDescription: Returns `Item` object\\n\\n**Parameters:**\\n\\n  \\n| Name       | Type      | Required | Description                         | Default\\n| ---------- | --------- | -------- | ----------------------------------- | -------\\n| `item_id`  | string/int| Yes      | unique item id of Hacker News story, comment etc | None\\n  \\n\\n`get_user`\\n----------\\n\\nDescription: Returns `User` object\\n\\n**Parameters:**\\n\\n| Name         | Type     | Required   | Description                     | Default\\n| ------------ | -------- | ---------- | ------------------------------- | ---------\\n| `user_id`    | string   | Yes        | unique user id of a Hacker News user | None\\n                                                               \\n\\n`top_stories`\\n-------------\\n\\nDescription: Returns list of item ids of current top stories\\n\\n**Parameters:**\\n\\n| Name      | Type  | Required  | Description                           | Default\\n| --------- | ----- | --------- | ------------------------------------- | --------\\n| `limit`   | int   | No        | specifies the number of stories to be returned  | None\\n\\n\\n`new_stories`\\n-------------\\n\\nDescription: Returns list of item ids of current new stories\\n\\n**Parameters:**\\n\\n| Name      | Type  | Required  | Description                           | Default\\n| --------- | ----- | --------- | ------------------------------------- | --------\\n| `limit`   | int   | No        | specifies the number of stories to be returned  | None\\n                                                            \\n\\n`ask_stories`\\n-------------\\n\\nDescription: Returns list of item ids of latest Ask HN stories\\n\\n**Parameters:**\\n\\n| Name      | Type  | Required  | Description                           | Default\\n| --------- | ----- | --------- | ------------------------------------- | --------\\n| `limit`   | int   | No        | specifies the number of stories to be returned  | None\\n\\n\\n`show_stories`\\n-------------\\n\\nDescription: Returns list of item ids of latest Show HN stories\\n\\n**Parameters:**\\n\\n| Name      | Type  | Required  | Description                           | Default\\n| --------- | ----- | --------- | ------------------------------------- | --------\\n| `limit`   | int   | No        | specifies the number of stories to be returned  | None\\n\\n\\n`job_stories`\\n-------------\\n\\nDescription: Returns list of item ids of latest Job stories\\n\\n**Parameters:**\\n\\n| Name      | Type  | Required  | Description                           | Default\\n| --------- | ----- | --------- | ------------------------------------- | --------\\n| `limit`   | int   | No        | specifies the number of stories to be returned  | None\\n\\n\\n`updates`\\n--------------\\n\\nDescription: Returns list of item ids and user ids that have been changed/updated recently.\\n\\n\\n`get_max_item`\\n--------------\\n\\nDescription: Returns current largest item id\\n\\nClass: `Item`\\n=============\\n\\nFrom [Official HackerNews\\nItem](https://github.com/HackerNews/API/blob/master/README.md#items):\\n\\n| Property    | Description\\n| ----------- | ------------------------------------------------------------\\n| item_id     | The item\\u2019s unique id.\\n| deleted     | `true` if the item is deleted.\\n| item_type   | The type of item. One of \\u201cjob\\u201d, \\u201cstory\\u201d, \\u201ccomment\\u201d, \\u201cpoll\\u201d, or \\u201cpollopt\\u201d.\\n| by          | The username of the item\\u2019s author.\\n| submission_time  | Creation date of the item, in Python `datetime`.\\n| text        | The comment, Ask HN, or poll text. HTML.\\n| dead        | `true` if the item is dead.\\n| parent      | The item\\u2019s parent. For comments, either another comment or the relevant story. For pollopts, the relevant poll.\\n| kids        | The ids of the item\\u2019s comments, in ranked display order.\\n| url         | The URL of the story.\\n| score       | The story\\u2019s score, or the votes for a pollopt.\\n| title       | The title of the story or poll.\\n| parts       | A list of related pollopts, in display order.\\n| raw         | original JSON response.\\n\\n\\nClass: `User`\\n=============\\n\\nFrom [Official HackerNews\\nUser](https://github.com/HackerNews/API/blob/master/README.md#users):\\n\\n| Property  | Description\\n| --------- | -------------------------------------------------------------\\n| user_id   | The user\\u2019s unique username. Case-sensitive.\\n| delay     | Delay in minutes between a comment\\u2019s creation and its visibility to other users.\\n| created   | Creation date of the user, in Python `datetime`.\\n| karma     | The user\\u2019s karma.\\n| about     | The user\\u2019s optional self-description. HTML.\\n| submitted | List of the user\\u2019s stories, polls and comments.\\n| raw       | original JSON response.\\n\\nDevelopment\\n===========\\n\\nFor local development do `pip` installation of `requirements-dev.txt`:\\n\\n    pip install -r requirements-dev.txt\\n\\nLICENSE\\n=======\\n\\nThe mighty MIT license. Please check `LICENSE` for more details.\", \n        \"release_url\": \"http://pypi.python.org/pypi/hacker/0.3.1\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 0, \n        \"classifiers\": [\n            \"Development Status :: 3 - Alpha\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Natural Language :: English\", \n            \"Operating System :: OS Independent\", \n            \"Operating System :: POSIX\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Programming Language :: Python :: 3.5\", \n            \"Topic :: Internet\", \n            \"Topic :: Software Development :: Libraries\", \n            \"Topic :: Software Development :: Libraries :: Python Modules\", \n            \"Topic :: Utilities\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"hacker\", \n        \"license\": \"MIT\", \n        \"summary\": \"Unofficial Python wrapper for Hacker News API\", \n        \"home_page\": \"https://github.com/avinassh/haxor/\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.3.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-05-17T14:50:26\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/e6/8d/a7fbb6176d08f6c8d77bf0b97cf2be99d0a9fa4f641da8c093931d24b200/hacker-0.3.1.tar.gz\", \n                \"md5_digest\": \"69c51e63f0b12b3db51149734387b986\", \n                \"downloads\": 454, \n                \"filename\": \"hacker-0.3.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"e6/8d/a7fbb6176d08f6c8d77bf0b97cf2be99d0a9fa4f641da8c093931d24b200/hacker-0.3.1.tar.gz\", \n                \"size\": 7528\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-05-17T14:50:26\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/e6/8d/a7fbb6176d08f6c8d77bf0b97cf2be99d0a9fa4f641da8c093931d24b200/hacker-0.3.1.tar.gz\", \n            \"md5_digest\": \"69c51e63f0b12b3db51149734387b986\", \n            \"downloads\": 454, \n            \"filename\": \"hacker-0.3.1.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"e6/8d/a7fbb6176d08f6c8d77bf0b97cf2be99d0a9fa4f641da8c093931d24b200/hacker-0.3.1.tar.gz\", \n            \"size\": 7528\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:42:22"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://github.com/avinassh/haxor", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "Server": ["GitHub.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-GitHub-Request-Id": ["54B1D78B:C3EF:F9005A5:585CFF8F"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Date": ["Fri, 23 Dec 2016 10:42:23 GMT"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["9310b4b2914df40821f404edb55d7eb6"], "X-Frame-Options": ["deny"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Content-Type-Options": ["nosniff"], "X-Request-Id": ["720ede538af1faecd8a3c6fb6f4fd289"], "Vary": ["X-PJAX", "Accept-Encoding"], "Transfer-Encoding": ["chunked"], "X-Runtime": ["0.081274"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:42:23 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiZmIzYzRiMWFkYTMxMDNiZjI1YWU0ZDU5NWJlMGM0OTQiLCJzcHlfcmVwbyI6ImF2aW5hc3NoL2hheG9yIiwic3B5X3JlcG9fYXQiOjE0ODI0ODk3NDMsIl9jc3JmX3Rva2VuIjoiWkQ3RzdyeVVRVWViZVNGTC9PUlhCRGxvYnR6T25uK2NTR0xBUFk4OXFiND0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--e376cca653fc1bc97ead7e01c7eff976ccfd9d93; path=/; secure; HttpOnly"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/avinassh/haxor", "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:42:23"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://raw.githubusercontent.com/avinassh/haxor/master/CHANGELOG.rst", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["C71B4C2C:30F8:4FBB2B6:585CFF8E"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-XSS-Protection": ["1; mode=block"], "Date": ["Fri, 23 Dec 2016 10:42:23 GMT"], "Source-Age": ["0"], "X-Cache-Hits": ["0"], "X-Served-By": ["cache-hhn1532-HHN"], "X-Fastly-Request-ID": ["0911834e5419974324c80e4d46de0d69e8a1bee2"], "X-Geo-Block-List": [""], "Strict-Transport-Security": ["max-age=31536000"], "Access-Control-Allow-Origin": ["*"], "Vary": ["Authorization,Accept-Encoding"], "X-Timer": ["S1482489743.574742,VS0,VE120"], "Content-Encoding": ["gzip"], "X-Cache": ["MISS"], "Accept-Ranges": ["bytes"], "Cache-Control": ["max-age=300"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "ETag": ["\"02456acee2af910684bb45434dc274ee24adac50\""], "Content-Type": ["text/plain; charset=utf-8"], "Content-Length": ["192"], "X-Content-Type-Options": ["nosniff"], "Expires": ["Fri, 23 Dec 2016 10:47:23 GMT"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/avinassh/haxor/master/CHANGELOG.rst", "body": {"base64_string": "H4sIAAAAAAAAA5XNvQ7CMAxG0d1PYSb+RJUUBugIC6xIsIdiSkRJIseV6NtDgQGEKhXL6/lukmCWn40rqPRFBrClkkwkXNsonmuYfB+oJE1SHKRKzyZaPX4I458DGOGhKvBkbxnuInE/Ys5khI4Y2AdiqRGeW/qvLabA8S1VFxnq6QVjFYJnaZjuFlySCDEefV5dyYkR692Lf1TVoo1vnBVrStwTx4fsQWPVO62fdt5mV97lFJrgHUtLvvmbAQAA", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:42:23"}], "recorded_with": "betamax/0.8.0"}