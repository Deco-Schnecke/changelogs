{"http_interactions": [{"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/xmljson/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"Cache-Control": ["max-age=600, public"], "Fastly-Debug-Digest": ["71dae5204f4f02e7daec968960a250a666dce7abd58f1881c532192aea6c6300"], "Via": ["1.1 varnish", "1.1 varnish"], "Connection": ["keep-alive"], "X-Cache-Hits": ["1, 1"], "Date": ["Fri, 23 Dec 2016 10:45:42 GMT"], "X-Served-By": ["cache-iad2147-IAD, cache-hhn1535-HHN"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Access-Control-Allow-Origin": ["*"], "X-Timer": ["S1482489942.782209,VS0,VE0"], "X-XSS-Protection": ["1; mode=block"], "X-PYPI-LAST-SERIAL": ["2535002"], "X-Cache": ["HIT, HIT"], "Accept-Ranges": ["bytes"], "Content-Disposition": ["inline"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Server": ["nginx/1.10.2"], "Age": ["69357"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Length": ["21926"], "X-Frame-Options": ["deny"], "X-Content-Type-Options": ["nosniff"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/xmljson/json", "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"xmljson\", \n        \"package_url\": \"http://pypi.python.org/pypi/xmljson\", \n        \"author\": \"S Anand\", \n        \"author_email\": \"root.node@gmail.com\", \n        \"download_url\": \"\", \n        \"platform\": \"\", \n        \"version\": \"0.1.7\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"===============================\\nxmljson\\n===============================\\n\\n.. image:: https://img.shields.io/travis/sanand0/xmljson.svg\\n        :target: https://travis-ci.org/sanand0/xmljson\\n\\n.. image:: https://img.shields.io/pypi/v/xmljson.svg\\n        :target: https://pypi.python.org/pypi/xmljson\\n\\n\\nxmljson converts XML into Python dictionary structures (trees, like in JSON) and vice-versa.\\n\\nAbout\\n-----\\n\\nXML can be converted to a data structure (such as JSON) and back. For example::\\n\\n    <employees>\\n        <person>\\n            <name value=\\\"Alice\\\"/>\\n        </person>\\n        <person>\\n            <name value=\\\"Bob\\\"/>\\n        </person>\\n    </employees>\\n\\ncan be converted into this data structure (which also a valid JSON object)::\\n\\n    { \\\"employees\\\": [\\n        { \\\"person\\\": {\\n            \\\"name\\\": {\\\"@value\\\": \\\"Alice\\\"}\\n        } },\\n        { \\\"person\\\": {\\n            \\\"name\\\": {\\\"@value\\\": \\\"Alice\\\"}\\n        } }\\n    ] }\\n\\nThis uses the `BadgerFish`_ convention that prefixes attributes with ``@``.\\nThe conventions supported by this library are:\\n\\n* `BadgerFish`_: Use ``\\\"$\\\"`` for text content, ``@`` to prefix attributes\\n* `GData`_: Use ``\\\"$t\\\"`` for text content, attributes added as-is\\n* `Yahoo`_ Use ``\\\"content\\\"`` for text content, attributes added as-is\\n* `Parker`_: Use tail nodes for text content, ignore attributes\\n\\n.. _BadgerFish: http://www.sklar.com/badgerfish/\\n.. _GData: http://wiki.open311.org/JSON_and_XML_Conversion/#the-gdata-convention\\n.. _Parker: https://developer.mozilla.org/en-US/docs/JXON#The_Parker_Convention\\n.. _Yahoo: https://developer.yahoo.com/javascript/json.html#xml\\n.. _xmlconv: https://github.com/chbrown/xmlconv/tree/master/lib\\n\\n\\nConvert data to XML\\n-------------------\\n\\nTo convert from a data structure to XML using the BadgerFish convention::\\n\\n    >>> from xmljson import badgerfish as bf\\n    >>> bf.etree({'p': {'@id': 'main', '$': 'Hello', 'b': 'bold'}})\\n\\nThis returns an **array** of `etree.Element`_ structures. In this case, the\\nresult is identical to::\\n\\n    >>> from xml.etree.ElementTree import fromstring\\n    >>> [fromstring('<p id=\\\"main\\\">Hello<b>bold</b></p>')]\\n\\n.. _etree.Element: http://effbot.org/zone/element-index.htm\\n\\nThe result can be inserted into any existing root `etree.Element`_::\\n\\n    >>> from xml.etree.ElementTree import Element, tostring\\n    >>> result = bf.etree({'p': {'@id': 'main'}}, root=Element('root'))\\n    >>> tostring(result)\\n    '<root><p id=\\\"main\\\"/></root>'\\n\\nThis includes `lxml.html <http://lxml.de/lxmlhtml.html>`_ as well::\\n\\n    >>> from lxml.html import Element, tostring\\n    >>> result = bf.etree({'p': {'@id': 'main'}}, root=Element('html'))\\n    >>> tostring(result, doctype='<!DOCTYPE html>')\\n    '<!DOCTYPE html>\\\\n<html><p id=\\\"main\\\"></p></html>'\\n\\nFor ease of use, strings are treated as node text. For example, both the\\nfollowing are the same::\\n\\n    >>> bf.etree({'p': {'$': 'paragraph text'}})\\n    >>> bf.etree({'p': 'paragraph text'})\\n\\nBy default, non-string values are converted to strings using Python's ``str``,\\nexcept for booleans -- which are converted into ``true`` and ``false`` (lower\\ncase). Override this behaviour using ``xml_fromstring``::\\n\\n    >>> tostring(bf.etree({'x': 1.23, 'y': True}, root=Element('root')))\\n    '<root><y>true</y><x>1.23</x></root>'\\n    >>> from xmljson import BadgerFish              # import the class\\n    >>> bf_str = BadgerFish(xml_tostring=str)       # convert using str()\\n    >>> tostring(bf_str.etree({'x': 1.23, 'y': True}, root=Element('root')))\\n    '<root><y>True</y><x>1.23</x></root>'\\n\\n\\nConvert XML to data\\n-------------------\\n\\nTo convert from XML to a data structure using the BadgerFish convention::\\n\\n    >>> bf.data(fromstring('<p id=\\\"main\\\">Hello<b>bold</b></p>'))\\n    {\\\"p\\\": {\\\"$\\\": \\\"Hello\\\", \\\"@id\\\": \\\"main\\\", \\\"b\\\": {\\\"$\\\": \\\"bold\\\"}}}\\n\\nTo convert this to JSON, use::\\n\\n    >>> from json import dumps\\n    >>> dumps(bf.data(fromstring('<p id=\\\"main\\\">Hello<b>bold</b></p>')))\\n    '{\\\"p\\\": {\\\"b\\\": {\\\"$\\\": \\\"bold\\\"}, \\\"@id\\\": \\\"main\\\", \\\"$\\\": \\\"Hello\\\"}}'\\n\\nTo preserve the order of attributes and children, specify the ``dict_type`` as\\n``OrderedDict`` (or any other dictionary-like type) in the constructor::\\n\\n    >>> from collections import OrderedDict\\n    >>> from xmljson import BadgerFish              # import the class\\n    >>> bf = BadgerFish(dict_type=OrderedDict)      # pick dict class\\n\\nBy default, values are parsed into boolean, int or float where possible (except\\nin the Yahoo method). Override this behaviour using ``xml_fromstring``::\\n\\n    >>> dumps(bf.data(fromstring('<x>1</x>')))\\n    '{\\\"x\\\": {\\\"$\\\": 1}}'\\n    >>> bf_str = BadgerFish(xml_fromstring=False)   # Keep XML values as strings\\n    >>> dumps(bf_str.data(fromstring('<x>1</x>')))\\n    '{\\\"x\\\": {\\\"$\\\": \\\"1\\\"}}'\\n    >>> bf_str = BadgerFish(xml_fromstring=repr)    # Custom string parser\\n    '{\\\"x\\\": {\\\"$\\\": \\\"\\\\'1\\\\'\\\"}}'\\n\\n\\nConventions\\n-----------\\n\\nTo use a different conversion method, replace ``BadgerFish`` with one of the\\nother classes. Currently, these are supported::\\n\\n    >>> from xmljson import badgerfish      # == xmljson.BadgerFish()\\n    >>> from xmljson import gdata           # == xmljson.GData()\\n    >>> from xmljson import parker          # == xmljson.Parker()\\n    >>> from xmljson import yahoo           # == xmljson.Yahoo()\\n\\nInstallation\\n------------\\n\\nThis is a pure-Python package built for Python 2.6+ and Python 3.0+. To set up::\\n\\n    pip install xmljson\\n\\nRoadmap\\n-------\\n\\n* Test cases for Unicode\\n* Support for namespaces and namespace prefixes\\n\\n\\n\\n\\nHistory\\n-------\\n\\n0.1.6 (18 Feb 2016)\\n~~~~~~~~~~~~~~~~~~~\\n\\n- Add ``xml_fromstring=`` and ``xml_tostring=`` parameters to constructor to\\n  customise string conversion from and to XML.\\n\\n\\n0.1.5 (23 Sep 2015)\\n~~~~~~~~~~~~~~~~~~~\\n\\n- Add the Yahoo_ XML to JSON conversion method.\\n\\n.. _Yahoo: https://developer.yahoo.com/javascript/json.html#xml\\n\\n0.1.4 (20 Sep 2015)\\n~~~~~~~~~~~~~~~~~~~\\n\\n- Fix ``GData.etree()`` conversion of attributes. (They were ignored. They\\n  should be added as-is.)\\n\\n0.1.3 (20 Sep 2015)\\n~~~~~~~~~~~~~~~~~~~\\n\\n- Simplify ``{'p': {'$': 'text'}}`` to ``{'p': 'text'}`` in BadgerFish and GData\\n  conventions.\\n- Add test cases for ``.etree()`` -- mainly from the `MDN JXON article`_.\\n- ``dict_type``/``list_type`` do not need to inherit from ``dict``/``list``\\n\\n.. _MDN JXON article: https://developer.mozilla.org/en-US/docs/JXON#In_summary\\n\\n0.1.2 (18 Sep 2015)\\n~~~~~~~~~~~~~~~~~~~\\n\\n- Always use the ``dict_type`` class to create dictionaries (which defaults to\\n  ``OrderedDict`` to preserve order of keys)\\n- Update documentation, test cases\\n- Remove support for Python 2.6 (since we need ``collections.Counter``)\\n- Make the `Travis CI build`_ pass\\n\\n.. _Travis CI build: https://travis-ci.org/sanand0/xmljson\\n\\n0.1.1 (18 Sep 2015)\\n~~~~~~~~~~~~~~~~~~~\\n\\n- Convert ``true``, ``false`` and numeric values from strings to Python types\\n- ``xmljson.parker.data()`` is compliant with Parker convention (bugs resolved)\\n\\n0.1.0 (15 Sep 2015)\\n~~~~~~~~~~~~~~~~~~~\\n\\n- Two-way conversions via BadgerFish, GData and Parker conventions.\\n- First release on PyPI.\\n\\n\\n\", \n        \"release_url\": \"http://pypi.python.org/pypi/xmljson/0.1.7\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 7, \n        \"classifiers\": [\n            \"Development Status :: 3 - Alpha\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python :: 2\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Topic :: Software Development\", \n            \"Topic :: Software Development :: Libraries :: Python Modules\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"xmljson\", \n        \"license\": \"MIT\", \n        \"summary\": \"Converts XML into JSON/Python dicts/arrays and vice-versa.\", \n        \"home_page\": \"https://github.com/sanand0/xmljson\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-15T19:08:40\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/2b/52/8c71fc22b4586613c8831ad079802ad731c86627cd374010f2f9c1e795d3/xmljson-0.1.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"9b60ec811f988217ca92e5b2eaf4fdae\", \n                \"downloads\": 981, \n                \"filename\": \"xmljson-0.1.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"2b/52/8c71fc22b4586613c8831ad079802ad731c86627cd374010f2f9c1e795d3/xmljson-0.1.0-py2.py3-none-any.whl\", \n                \"size\": 6473\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-15T19:08:45\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/d8/1b/53ae61f550102900ced1e27d0f7a91de6626a305efbd5b7fe79a3fb2b0af/xmljson-0.1.0.zip\", \n                \"md5_digest\": \"ab16b65e01ef0c83072f1b252e688a52\", \n                \"downloads\": 554, \n                \"filename\": \"xmljson-0.1.0.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"d8/1b/53ae61f550102900ced1e27d0f7a91de6626a305efbd5b7fe79a3fb2b0af/xmljson-0.1.0.zip\", \n                \"size\": 22374\n            }\n        ], \n        \"0.1.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-18T02:31:31\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/0e/fd/33acdd3a88b7803a954a43260b682f75c979b5122f885483d9553105d821/xmljson-0.1.1-py2.py3-none-any.whl\", \n                \"md5_digest\": \"5734e7bfa9489daaa9cf9bd75aedac83\", \n                \"downloads\": 546, \n                \"filename\": \"xmljson-0.1.1-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"0e/fd/33acdd3a88b7803a954a43260b682f75c979b5122f885483d9553105d821/xmljson-0.1.1-py2.py3-none-any.whl\", \n                \"size\": 6772\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-18T02:31:37\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/e1/49/2e24539c12712d5a26b68e37530d1cde35e5bd4052d3d1507dcc8660471d/xmljson-0.1.1.zip\", \n                \"md5_digest\": \"7c5a87b778446dfd8d2a24d06138b2b5\", \n                \"downloads\": 556, \n                \"filename\": \"xmljson-0.1.1.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"e1/49/2e24539c12712d5a26b68e37530d1cde35e5bd4052d3d1507dcc8660471d/xmljson-0.1.1.zip\", \n                \"size\": 23183\n            }\n        ], \n        \"0.1.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-18T07:41:09\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/b8/bc/ec01549982c3011778822863cfec1eb098d5ecf9c5eaebb1ff5e9c3245cf/xmljson-0.1.2-py2.py3-none-any.whl\", \n                \"md5_digest\": \"101f3fc5d834f328fb83362478a3f4b9\", \n                \"downloads\": 528, \n                \"filename\": \"xmljson-0.1.2-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"b8/bc/ec01549982c3011778822863cfec1eb098d5ecf9c5eaebb1ff5e9c3245cf/xmljson-0.1.2-py2.py3-none-any.whl\", \n                \"size\": 7372\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-18T07:41:15\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/b3/29/eecebc07d89acb8f1606e3d85f65e57094ac9e02a60d321b7348d8a1d1b0/xmljson-0.1.2.zip\", \n                \"md5_digest\": \"0d5ee41934d11db27b4117baaa8de374\", \n                \"downloads\": 547, \n                \"filename\": \"xmljson-0.1.2.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"b3/29/eecebc07d89acb8f1606e3d85f65e57094ac9e02a60d321b7348d8a1d1b0/xmljson-0.1.2.zip\", \n                \"size\": 24739\n            }\n        ], \n        \"0.1.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-20T05:56:28\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/6c/36/10e98c8c634f54515db9daa9f403652c2c0237873a885e84e88964c5b713/xmljson-0.1.3-py2.py3-none-any.whl\", \n                \"md5_digest\": \"85a375b143e494a9201f3d9670ad88ff\", \n                \"downloads\": 524, \n                \"filename\": \"xmljson-0.1.3-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"6c/36/10e98c8c634f54515db9daa9f403652c2c0237873a885e84e88964c5b713/xmljson-0.1.3-py2.py3-none-any.whl\", \n                \"size\": 7779\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-20T05:56:34\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/07/ce/c60fb529a9d0993170a3cdef14a7572164986fc05efc408434c93e1e2ac0/xmljson-0.1.3.zip\", \n                \"md5_digest\": \"12d1e09ab60e6908c66220c595720007\", \n                \"downloads\": 537, \n                \"filename\": \"xmljson-0.1.3.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"07/ce/c60fb529a9d0993170a3cdef14a7572164986fc05efc408434c93e1e2ac0/xmljson-0.1.3.zip\", \n                \"size\": 25679\n            }\n        ], \n        \"0.1.4\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-20T08:28:19\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/ab/dd/67769acaee4e0e684d0653f2092a6f9347af1862dd012ceceb3ec161e22c/xmljson-0.1.4-py2.py3-none-any.whl\", \n                \"md5_digest\": \"a417800ff8d4a05cc49e3ae4115821c3\", \n                \"downloads\": 529, \n                \"filename\": \"xmljson-0.1.4-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"ab/dd/67769acaee4e0e684d0653f2092a6f9347af1862dd012ceceb3ec161e22c/xmljson-0.1.4-py2.py3-none-any.whl\", \n                \"size\": 8029\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-20T08:28:26\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/8b/b8/4b0e06814936ea1193bba4f463bac19a8a8ed4b43611d88abe6446171c7d/xmljson-0.1.4.zip\", \n                \"md5_digest\": \"7db9e019d35cf86d4f4c4e635c89c4fc\", \n                \"downloads\": 541, \n                \"filename\": \"xmljson-0.1.4.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"8b/b8/4b0e06814936ea1193bba4f463bac19a8a8ed4b43611d88abe6446171c7d/xmljson-0.1.4.zip\", \n                \"size\": 26037\n            }\n        ], \n        \"0.1.5\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-23T16:56:54\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/96/43/9e26cf91340333247584bcfe0e09fe8127b931689dd5b1abfab285208881/xmljson-0.1.5-py2.py3-none-any.whl\", \n                \"md5_digest\": \"d38f8cd329a8e9d84802ec44285d6211\", \n                \"downloads\": 803, \n                \"filename\": \"xmljson-0.1.5-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"96/43/9e26cf91340333247584bcfe0e09fe8127b931689dd5b1abfab285208881/xmljson-0.1.5-py2.py3-none-any.whl\", \n                \"size\": 8335\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-23T16:57:02\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a0/3e/f30366ac243e2536b9436062b9cc85c97488c4676c7fe4842d109bf5de96/xmljson-0.1.5.zip\", \n                \"md5_digest\": \"db3cb1912b62fbe6b15a7a47433af63d\", \n                \"downloads\": 655, \n                \"filename\": \"xmljson-0.1.5.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a0/3e/f30366ac243e2536b9436062b9cc85c97488c4676c7fe4842d109bf5de96/xmljson-0.1.5.zip\", \n                \"size\": 26856\n            }\n        ], \n        \"0.1.6\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-02-18T03:11:13\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/f1/1e/d9b16679a7ba257aeb233c7347eb3defd599d8bb708058c4bb44479d6668/xmljson-0.1.6-py2.py3-none-any.whl\", \n                \"md5_digest\": \"4e2a88a1adb44784c18c8ec96d0b339d\", \n                \"downloads\": 1207, \n                \"filename\": \"xmljson-0.1.6-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"f1/1e/d9b16679a7ba257aeb233c7347eb3defd599d8bb708058c4bb44479d6668/xmljson-0.1.6-py2.py3-none-any.whl\", \n                \"size\": 9348\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-02-18T03:11:21\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/aa/76/42497cb185cb2aafe9303e0cb6990ed1c52cc14e71601fccb4f35e2049fd/xmljson-0.1.6.zip\", \n                \"md5_digest\": \"d269cf3ef9f83a54210baf2ee4f5c39f\", \n                \"downloads\": 351, \n                \"filename\": \"xmljson-0.1.6.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"aa/76/42497cb185cb2aafe9303e0cb6990ed1c52cc14e71601fccb4f35e2049fd/xmljson-0.1.6.zip\", \n                \"size\": 28613\n            }\n        ], \n        \"0.1.7\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-13T03:06:44\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/23/58/f0efd7f31523fc3c9ea601dd13997b4ba71874f4d474b43915ce4c94f456/xmljson-0.1.7-py2.py3-none-any.whl\", \n                \"md5_digest\": \"981b8acb96669924c3d39cbbffb1c745\", \n                \"downloads\": 1131, \n                \"filename\": \"xmljson-0.1.7-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"23/58/f0efd7f31523fc3c9ea601dd13997b4ba71874f4d474b43915ce4c94f456/xmljson-0.1.7-py2.py3-none-any.whl\", \n                \"size\": 9952\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-13T03:06:48\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/47/3e/325e05cf70ae2f631bdf89a2ec70a6bdae6faf718493dff9a2eeb5615325/xmljson-0.1.7.zip\", \n                \"md5_digest\": \"94ea9858cc71bcb38053bfceea358d03\", \n                \"downloads\": 188, \n                \"filename\": \"xmljson-0.1.7.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"47/3e/325e05cf70ae2f631bdf89a2ec70a6bdae6faf718493dff9a2eeb5615325/xmljson-0.1.7.zip\", \n                \"size\": 28486\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-09-13T03:06:44\", \n            \"comment_text\": \"\", \n            \"python_version\": \"py2.py3\", \n            \"url\": \"https://pypi.python.org/packages/23/58/f0efd7f31523fc3c9ea601dd13997b4ba71874f4d474b43915ce4c94f456/xmljson-0.1.7-py2.py3-none-any.whl\", \n            \"md5_digest\": \"981b8acb96669924c3d39cbbffb1c745\", \n            \"downloads\": 1131, \n            \"filename\": \"xmljson-0.1.7-py2.py3-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"23/58/f0efd7f31523fc3c9ea601dd13997b4ba71874f4d474b43915ce4c94f456/xmljson-0.1.7-py2.py3-none-any.whl\", \n            \"size\": 9952\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-09-13T03:06:48\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/47/3e/325e05cf70ae2f631bdf89a2ec70a6bdae6faf718493dff9a2eeb5615325/xmljson-0.1.7.zip\", \n            \"md5_digest\": \"94ea9858cc71bcb38053bfceea358d03\", \n            \"downloads\": 188, \n            \"filename\": \"xmljson-0.1.7.zip\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"47/3e/325e05cf70ae2f631bdf89a2ec70a6bdae6faf718493dff9a2eeb5615325/xmljson-0.1.7.zip\", \n            \"size\": 28486\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:45:42"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://github.com/sanand0/xmljson", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "Server": ["GitHub.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-GitHub-Request-Id": ["54B1D78B:C3EE:E6611CD:585D0056"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Date": ["Fri, 23 Dec 2016 10:45:43 GMT"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["a0387c52951b3c2853740ef9cede1dec"], "X-Frame-Options": ["deny"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Content-Type-Options": ["nosniff"], "X-Request-Id": ["c48e923d79bf4c061d7d578778424aa2"], "Vary": ["X-PJAX", "Accept-Encoding"], "Transfer-Encoding": ["chunked"], "X-Runtime": ["0.107382"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:45:43 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiODlmM2NiYjhjNTQ3ZWJmNmQ1MDI3NDlhMzE0MWIzMDEiLCJzcHlfcmVwbyI6InNhbmFuZDAveG1sanNvbiIsInNweV9yZXBvX2F0IjoxNDgyNDg5OTQzLCJfY3NyZl90b2tlbiI6Imgxa28vN3IzZ0dOOUx3cXowSXNUL3pqYXNMVVhEenRadHVxakVwV3Ezb2c9IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--109c0a2b49120337c1311116db78b25cfa652b3f; path=/; secure; HttpOnly"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/sanand0/xmljson", "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:45:43"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://raw.githubusercontent.com/sanand0/xmljson/master/HISTORY.rst", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["C71B4C26:73BF:539CE29:585D0057"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-XSS-Protection": ["1; mode=block"], "Date": ["Fri, 23 Dec 2016 10:45:43 GMT"], "Source-Age": ["0"], "X-Cache-Hits": ["0"], "X-Served-By": ["cache-hhn1523-HHN"], "X-Fastly-Request-ID": ["eabade3834f3fed5d43de919e96c2fbd03890d2b"], "X-Geo-Block-List": [""], "Strict-Transport-Security": ["max-age=31536000"], "Access-Control-Allow-Origin": ["*"], "Vary": ["Authorization,Accept-Encoding"], "X-Timer": ["S1482489943.619685,VS0,VE115"], "Content-Encoding": ["gzip"], "X-Cache": ["MISS"], "Accept-Ranges": ["bytes"], "Cache-Control": ["max-age=300"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "ETag": ["\"aadbebea3a2b3e9184d36c5fa0e8ccdee2d5dec8\""], "Content-Type": ["text/plain; charset=utf-8"], "Content-Length": ["801"], "X-Content-Type-Options": ["nosniff"], "Expires": ["Fri, 23 Dec 2016 10:50:43 GMT"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/sanand0/xmljson/master/HISTORY.rst", "body": {"base64_string": "H4sIAAAAAAAAA41UwW4TMRC971eMBFJSqfGmhVYoEgdoVSiiUNFWglPs2JOsqdde2d6kC4JvZ2ynEAGi5BAlHs/4zXvzhjGYyUbYFRq3mlXVax2i80M1KZ+qmrIDdgzjg2dwhgs4nB4c71Xf//xU1QReKAWc37VmvvSuDdFru3rOOQh7fx7dr9NOeNFiRB8gOpDOUqiX9Dj9rQBkT0BaHRBKSrqxpsvaWUjlc1VK/HjxllUF5hGMD5/AFXYJ5tE/YcYG4ZNonJunAqnOm6v373bfIGiNU1SaMZjnqzNoYuzCrK4VromuDj0bUoBJ19afxVoE6XUX68/BWdbE1jyingu0pwRt+jC0M31HTL06FVEwjB5xvEdM7aBySxCR+Fj0EQOD8XWDA2zQI+iVdR4Vg3RE/IXG9UbBAkEohQpEmOjA9gqcJ/8H50q3ndHLgTB9HXWjGXwdPabvUcS7OPr2jaARcfex7SkdagsvhVqhP9OhyTrljpKoqRMbqZPA7pXAEEGKgAGWpD3nO41PJtAKbc1QFE+i8YvTd/DmI2klfNTSIJ+nSpwrLeM8Dh1yXnNuaIy3/0A5sC6CRcwDo22DXsdSsuT9TOG86P37I3+TvnVftDGCOb+q0U5urmrlZKhT2qNzOw992woyUub7MBvo4ck0GzEE6Gnoc6+7TYE0IhSreBQRIcWISOE1UTfeNFo2oHApehNDsRDn772i2VCnuceU23kM6NcILkXSON3iEPbo7ZtO5apO9i1JJFLt/R116MoHbB2lhr7rnI9ZrsuBXGLhMK2IoK1EGsbCNOfSGYOyiH3iektW5zw9dSFutw1ee7HWAU7OYdFro/ictkIIRYPfYr8kiDkwkTpTH4SlCZvWZLXku8L3wf/xfZKNFQkrrR7ieJ9+LYUJuF1alqjwWsJamD7NZ5qYso2yENvmkz4hz+AWA6PVdksTQoSKPMfUBq0IspKwETY6NnCZb+z4AcaLnqqSPM6sUW19OqU+jh7u43rjJjQ5O4siwFqLHRfuFwvmrv54O3vxTHuS2qNBUhsI0OVwec6qH28BDhMgBgAA", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:45:43"}], "recorded_with": "betamax/0.8.0"}