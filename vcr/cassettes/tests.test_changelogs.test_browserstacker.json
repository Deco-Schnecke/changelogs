{"http_interactions": [{"response": {"status": {"code": 200, "message": "OK"}, "headers": {"X-Cache": ["HIT, HIT"], "Via": ["1.1 varnish", "1.1 varnish"], "Date": ["Fri, 23 Dec 2016 10:29:54 GMT"], "Server": ["nginx/1.10.2"], "Content-Disposition": ["inline"], "Content-Length": ["16378"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Cache-Control": ["max-age=600, public"], "X-Served-By": ["cache-iad2144-IAD, cache-hhn1545-HHN"], "Age": ["59655"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Cache-Hits": ["1, 1"], "Fastly-Debug-Digest": ["7ef360945f93083ffc8fbe46c71d8959d3c282e820231cba5740af5f855a65e4"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-Content-Type-Options": ["nosniff"], "X-PYPI-LAST-SERIAL": ["2535315"], "Connection": ["keep-alive"], "X-Timer": ["S1482488994.863855,VS0,VE0"], "Access-Control-Allow-Origin": ["*"], "Accept-Ranges": ["bytes"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"]}, "url": "https://pypi.python.org/pypi/browserstacker/json", "body": {"string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"browserstack,screenshots,testing\", \n        \"package_url\": \"http://pypi.python.org/pypi/browserstacker\", \n        \"author\": \"Dmitry Dygalo\", \n        \"author_email\": \"dadygalo@gmail.com\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"0.3.1\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"BrowserStacker\\n==============\\nPython wrapper for `BrowserStack <https://www.browserstack.com/>`_ features.\\n\\n|Build Status| |codecov.io|\\n\\n\\nInstallation\\n------------\\n\\nThe current stable release:\\n\\n::\\n\\n    pip install browserstacker\\n\\nor:\\n\\n::\\n\\n    easy_install browserstacker\\n\\nor from source:\\n\\n::\\n\\n    $ sudo python setup.py install\\n\\nUsage\\n-----\\n\\nTo start working with BrowserStack ScreenShots API simply type:\\n\\n.. code:: python\\n\\n    >>> from browserstacker import ScreenShotsAPI\\n    >>> api = ScreenShotsAPI('user', 'key')\\n    >>> api.browsers()\\n    [\\n        {\\n          \\\"os\\\": \\\"Windows\\\",\\n          \\\"os_version\\\": \\\"XP\\\",\\n          \\\"browser\\\": \\\"chrome\\\",\\n          \\\"browser_version\\\": \\\"21.0\\\",\\n          \\\"device\\\": None\\n        },\\n        {\\n          \\\"os\\\": \\\"ios\\\",\\n          \\\"os_version\\\": \\\"6.0\\\",\\n          \\\"browser\\\": \\\"Mobile Safari\\\",\\n          \\\"browser_version\\\": None,\\n          \\\"device\\\": \\\"iPhone 4S (6.0)\\\"\\n        }\\n      ....\\n    ]\\n\\nOptionally you can filter the output of ``browsers`` by ``browser``, ``browser_version``, ``device``, ``os`` or ``os_version``.\\n\\n.. code:: python\\n\\n    >>> api.browsers(os='Windows', browser='chrome')\\n    [\\n        {\\n          \\\"os\\\": \\\"Windows\\\",\\n          \\\"os_version\\\": \\\"8.1\\\",\\n          \\\"browser\\\": \\\"chrome\\\",\\n          \\\"browser_version\\\": \\\"22.0\\\",\\n          \\\"device\\\": None\\n        },\\n        {\\n          \\\"os\\\": \\\"Windows\\\",\\n          \\\"os_version\\\": \\\"8.1\\\",\\n          \\\"browser\\\": \\\"chrome\\\",\\n          \\\"browser_version\\\": \\\"23.0\\\",\\n          \\\"device\\\": None\\n        }\\n      ....\\n    ]\\n\\nCommand line:\\n\\n.. code:: bash\\n\\n    $ browserstacker browsers -os Windows -b chrome\\n    Available browsers:\\n\\n    ------\\n    browser_version: 22.0\\n    os: Windows\\n    browser: chrome\\n    device: None\\n    os_version: 8.1\\n    ------\\n    ...\\n    Total browsers: 100\\n\\n\\nFiltration values are case insensitive and are casted to strings during filtration.\\nE.g. you can use integers for filtration by ``os_version`` parameter.\\nAlso it is possible to filter by multiple values:\\n\\n.. code:: python\\n\\n    >>> api.browsers(os='Windows', browser=('chrome', 'firefox'))\\n    [\\n        {\\n          \\\"os\\\": \\\"Windows\\\",\\n          \\\"os_version\\\": \\\"8.1\\\",\\n          \\\"browser\\\": \\\"chrome\\\",\\n          \\\"browser_version\\\": \\\"22.0\\\",\\n          \\\"device\\\": None\\n        },\\n        {\\n          \\\"os\\\": \\\"Windows\\\",\\n          \\\"os_version\\\": \\\"8.1\\\",\\n          \\\"browser\\\": \\\"firefox\\\",\\n          \\\"browser_version\\\": \\\"16.0\\\",\\n          \\\"device\\\": None\\n        }\\n      ....\\n    ]\\n\\nCommand line:\\n\\n.. code:: bash\\n\\n    $ browserstacker browsers -os Windows -b chrome -b firefox\\n    Available browsers:\\n\\n    ------\\n    browser_version: 22.0\\n    os: Windows\\n    browser: chrome\\n    device: None\\n    os_version: 8.1\\n    ------\\n    ...\\n    Total browsers: 215\\n\\nTo generate screenshots:\\n\\n.. code:: python\\n\\n    >>> browser = api.browsers()[0]\\n    >>> response = api.generate('http://www.google.com', browser)\\n\\nCommand line:\\n\\n.. code:: bash\\n\\n    $ browserstacker generate http://www.google.com -os Windows -b firefox -bv 37.0 -ov XP\\n\\nHere you can pass single browsers or list of them.\\nYou'll get the ``job_id`` from response. To list available screenshots for ``job_id``:\\n\\n.. code:: python\\n\\n    >>> api.list(response['job_id'])\\n    {\\n        \\\"id\\\":\\\"13b93a14db22872fcb5fd1c86b730a51197db319\\\",\\n        \\\"state\\\":\\\"done\\\",\\n        \\\"callback_url\\\": \\\"http://staging.example.com\\\",\\n        \\\"win_res\\\": \\\"1024x768\\\",\\n        \\\"mac_res\\\": \\\"1920x1080\\\",\\n        \\\"quality\\\": \\\"compressed\\\",\\n        \\\"wait_time\\\": 5,\\n        \\\"screenshots\\\": [\\n            {\\n                \\\"os\\\":\\\"Windows\\\",\\n                \\\"os_version\\\":\\\"XP\\\",\\n                \\\"browser\\\":\\\"ie\\\",\\n                \\\"browser_version\\\":\\\"7.0\\\",\\n                \\\"id\\\":\\\"be9989892cbba9b9edc2c95f403050aa4996ac6a\\\",\\n                \\\"state\\\":\\\"done\\\",\\n                \\\"url\\\":\\\"www.google.com\\\",\\n                \\\"thumb_url\\\":\\\"https://www.browserstack.com/screenshots/13b93a14db22872fcb5fd1c86b730a51197db319/thumb_winxp_ie_7.0.jpg\\\",\\n                \\\"image_url\\\":\\\"https://www.browserstack.com/screenshots/13b93a14db22872fcb5fd1c86b730a51197db319/winxp_ie_7.0.png\\\",\\n                \\\"created_at\\\":\\\"2013-03-14 16:25:45 UTC\\\",\\n            }\\n        ]\\n    }\\n\\nCommand line:\\n\\n.. code:: bash\\n\\n    $ browserstacker list 13b93a14db22872fcb5fd1c86b730a51197db319\\n\\nTo download screenshots:\\n\\n.. code:: python\\n\\n    >>> api.download(response['job_id'], 'path_to_screenshots_dir')\\n\\nCommand line:\\n\\n.. code:: bash\\n\\n    $ browserstacker download 13b93a14db22872fcb5fd1c86b730a51197db319 -d screenshots_dir\\n\\nAll screenshots will be saved in 'path_to_screenshots_dir'. If ``destination`` kwarg is absent, then screenshots will be\\ndownloaded to current working directory.\\nAlso you can use shortcut to create & download screenshots to your local machine:\\n\\n.. code:: python\\n\\n    >>> response = api.make('http://www.google.com', browser, destination='path_to_screenshots_dir')\\n\\nCommand line:\\n\\n.. code:: bash\\n\\n    $ browserstacker make -os Windows -b firefox -bv 37.0 -ov XP -d screenshots_dir\\n\\nCommand line interface\\n~~~~~~~~~~~~~~~~~~~~~~\\n\\nBrowserstacker comes with command line interface built with `Click <http://click.pocoo.org/>`_.\\nAfter installation ``browserstacker`` entry point will be available\\nIt exposes almost the same API as ``ScreenShotsAPI`` does. Does not support Python 3.2.\\n\\nTo use CLI you have to pass user & key directly:\\n\\n.. code:: bash\\n\\n    $ browserstacker -u user -k key browsers\\n    Available browsers:\\n    ...\\n    Total browsers: 629\\n\\nOr via environment variables:\\n\\n.. code:: bash\\n\\n    $ export BROWSERSTACK_USER=user\\n    $ export BROWSERSTACK_KEY=key\\n    $ browserstacker browsers\\n\\nHelp is also available:\\n\\n.. code:: bash\\n\\n    $ browserstacker --help\\n    Usage: browserstacker [OPTIONS] COMMAND [ARGS]...\\n\\n    Options:\\n      -u, --user TEXT  Username on BrowserStack\\n      -k, --key TEXT   Access key\\n      -v, --verbosity  Verbosity level\\n      --version        Show the version and exit.\\n      --help           Show this message and exit.\\n\\n    Commands:\\n      download\\n      generate\\n      browsers\\n      list\\n      make\\n\\nPython support\\n--------------\\n\\nBrowserStacker supports Python 2.6, 2.7, 3.2, 3.3, 3.4, 3.5, PyPy, PyPy3 and Jython.\\n**NOTE**. CLI does not support Python 3.2.\\n\\n\\n.. |Build Status| image:: https://travis-ci.org/Stranger6667/browserstacker.svg?branch=master\\n   :target: https://travis-ci.org/Stranger6667/browserstacker\\n\\n.. |codecov.io| image:: https://codecov.io/github/Stranger6667/browserstacker/coverage.svg?branch=master\\n    :target: https://codecov.io/github/Stranger6667/browserstacker?branch=master\", \n        \"release_url\": \"http://pypi.python.org/pypi/browserstacker/0.3.1\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 3, \n        \"classifiers\": [\n            \"Development Status :: 4 - Beta\", \n            \"Environment :: Console\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2.6\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3.2\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Programming Language :: Python :: 3.5\", \n            \"Programming Language :: Python :: Implementation :: CPython\", \n            \"Programming Language :: Python :: Implementation :: Jython\", \n            \"Programming Language :: Python :: Implementation :: PyPy\", \n            \"Topic :: Software Development :: Testing\", \n            \"Topic :: Software Development :: User Interfaces\"\n        ], \n        \"bugtrack_url\": \"\", \n        \"name\": \"browserstacker\", \n        \"license\": \"MIT\", \n        \"summary\": \"Python wrapper for BrowserStack features.\", \n        \"home_page\": \"https://github.com/Stranger6667/browserstacker\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-02-11T07:27:09\", \n                \"comment_text\": \"\", \n                \"python_version\": \"3.5\", \n                \"url\": \"https://pypi.python.org/packages/12/7f/a6826f615f69df7810864ba0008b1a8cc19225431865cf1814f549d3167c/browserstacker-0.3-py2.py3-none-any.whl\", \n                \"md5_digest\": \"5c0607f8a2ad35304fa91f62edaf02b7\", \n                \"downloads\": 627, \n                \"filename\": \"browserstacker-0.3-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"12/7f/a6826f615f69df7810864ba0008b1a8cc19225431865cf1814f549d3167c/browserstacker-0.3-py2.py3-none-any.whl\", \n                \"size\": 27917\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-02-11T07:27:00\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/6d/1c/848eeda9fa50cc15d281267d60fbcf88f90fcb2b0798d02d0653a4c1ca10/browserstacker-0.3.tar.gz\", \n                \"md5_digest\": \"50f812b0e65aef818ea1d670e6ecb398\", \n                \"downloads\": 208, \n                \"filename\": \"browserstacker-0.3.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"6d/1c/848eeda9fa50cc15d281267d60fbcf88f90fcb2b0798d02d0653a4c1ca10/browserstacker-0.3.tar.gz\", \n                \"size\": 21146\n            }\n        ], \n        \"0.3.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-06-19T20:08:13\", \n                \"comment_text\": \"\", \n                \"python_version\": \"3.5\", \n                \"url\": \"https://pypi.python.org/packages/d7/40/9d2f17ef49b9a34eb1cb5dc57584c3e5bf6f439dd0a71c0543b87a0fec0e/browserstacker-0.3.1-py2.py3-none-any.whl\", \n                \"md5_digest\": \"9fb715553fe98d4669c07e964c5673bf\", \n                \"downloads\": 791, \n                \"filename\": \"browserstacker-0.3.1-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"d7/40/9d2f17ef49b9a34eb1cb5dc57584c3e5bf6f439dd0a71c0543b87a0fec0e/browserstacker-0.3.1-py2.py3-none-any.whl\", \n                \"size\": 28231\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-06-19T20:07:25\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/af/3f/ea3161bc74a6c811e6eb229aae11648af9001dadab67066ed1659c495edd/browserstacker-0.3.1.tar.gz\", \n                \"md5_digest\": \"2d63ab9a660909976b96e974a39f44bd\", \n                \"downloads\": 291, \n                \"filename\": \"browserstacker-0.3.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"af/3f/ea3161bc74a6c811e6eb229aae11648af9001dadab67066ed1659c495edd/browserstacker-0.3.1.tar.gz\", \n                \"size\": 21511\n            }\n        ], \n        \"0.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-01-25T10:04:49\", \n                \"comment_text\": \"\", \n                \"python_version\": \"3.5\", \n                \"url\": \"https://pypi.python.org/packages/71/89/57f05eacbd0834e57f2139ad0cb0ec5fb2cf953ec1b04c0ec45a356b196d/browserstacker-0.2-py2.py3-none-any.whl\", \n                \"md5_digest\": \"03e75fcfc6364961fab65c840317901a\", \n                \"downloads\": 343, \n                \"filename\": \"browserstacker-0.2-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"71/89/57f05eacbd0834e57f2139ad0cb0ec5fb2cf953ec1b04c0ec45a356b196d/browserstacker-0.2-py2.py3-none-any.whl\", \n                \"size\": 11715\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-01-25T10:04:19\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/d3/f5/79d1f97d91c7bdece28c52b7956265c7724525ff097b2bf6e8051ae5ec56/browserstacker-0.2.tar.gz\", \n                \"md5_digest\": \"cda7f88fb387bf771b03281fc72cf09b\", \n                \"downloads\": 354, \n                \"filename\": \"browserstacker-0.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"d3/f5/79d1f97d91c7bdece28c52b7956265c7724525ff097b2bf6e8051ae5ec56/browserstacker-0.2.tar.gz\", \n                \"size\": 9499\n            }\n        ], \n        \"0.2.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-01-25T13:49:34\", \n                \"comment_text\": \"\", \n                \"python_version\": \"3.5\", \n                \"url\": \"https://pypi.python.org/packages/65/73/a2b13c80694a9500219167846f1b334230b70d466413b9e958cc308f74b5/browserstacker-0.2.1-py2.py3-none-any.whl\", \n                \"md5_digest\": \"7d7dfdc3b89744e7009ce94f58aed01f\", \n                \"downloads\": 395, \n                \"filename\": \"browserstacker-0.2.1-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"65/73/a2b13c80694a9500219167846f1b334230b70d466413b9e958cc308f74b5/browserstacker-0.2.1-py2.py3-none-any.whl\", \n                \"size\": 12422\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-01-25T13:49:02\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/e3/b4/6f53b04cf82e017024e54292d9c42a8a67ede6161c0ccffd5eaa2b576f9a/browserstacker-0.2.1.tar.gz\", \n                \"md5_digest\": \"119d68679c28034262e91b3cd743bd75\", \n                \"downloads\": 379, \n                \"filename\": \"browserstacker-0.2.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"e3/b4/6f53b04cf82e017024e54292d9c42a8a67ede6161c0ccffd5eaa2b576f9a/browserstacker-0.2.1.tar.gz\", \n                \"size\": 10399\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-06-19T20:08:13\", \n            \"comment_text\": \"\", \n            \"python_version\": \"3.5\", \n            \"url\": \"https://pypi.python.org/packages/d7/40/9d2f17ef49b9a34eb1cb5dc57584c3e5bf6f439dd0a71c0543b87a0fec0e/browserstacker-0.3.1-py2.py3-none-any.whl\", \n            \"md5_digest\": \"9fb715553fe98d4669c07e964c5673bf\", \n            \"downloads\": 791, \n            \"filename\": \"browserstacker-0.3.1-py2.py3-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"d7/40/9d2f17ef49b9a34eb1cb5dc57584c3e5bf6f439dd0a71c0543b87a0fec0e/browserstacker-0.3.1-py2.py3-none-any.whl\", \n            \"size\": 28231\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-06-19T20:07:25\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/af/3f/ea3161bc74a6c811e6eb229aae11648af9001dadab67066ed1659c495edd/browserstacker-0.3.1.tar.gz\", \n            \"md5_digest\": \"2d63ab9a660909976b96e974a39f44bd\", \n            \"downloads\": 291, \n            \"filename\": \"browserstacker-0.3.1.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"af/3f/ea3161bc74a6c811e6eb229aae11648af9001dadab67066ed1659c495edd/browserstacker-0.3.1.tar.gz\", \n            \"size\": 21511\n        }\n    ]\n}", "encoding": "UTF-8"}}, "recorded_at": "2016-12-23T10:29:54", "request": {"method": "GET", "uri": "https://pypi.python.org/pypi/browserstacker/json", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"]}, "body": {"string": "", "encoding": "utf-8"}}}, {"response": {"status": {"code": 200, "message": "OK"}, "headers": {"Vary": ["X-PJAX", "Accept-Encoding"], "X-Served-By": ["50f1f26dee0de4fe7bd3917b0eeb211c"], "Content-Type": ["text/html; charset=utf-8"], "Status": ["200 OK"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Date": ["Fri, 23 Dec 2016 10:29:55 GMT"], "Server": ["GitHub.com"], "X-Content-Type-Options": ["nosniff"], "X-Runtime": ["0.244495"], "X-GitHub-Request-Id": ["54B1D78B:C3EF:F8CE2A0:585CFCA3"], "X-Frame-Options": ["deny"], "Transfer-Encoding": ["chunked"], "X-XSS-Protection": ["1; mode=block"], "X-Request-Id": ["2efbba7eb9759186c09ae105bd787496"], "Content-Encoding": ["gzip"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:29:55 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiMjU3ZGJkY2FkZmMxNTU0ZmZiYTU0MTlkNDZiNmRkZWQiLCJzcHlfcmVwbyI6IlN0cmFuZ2VyNjY2Ny9icm93c2Vyc3RhY2tlciIsInNweV9yZXBvX2F0IjoxNDgyNDg4OTk1LCJfY3NyZl90b2tlbiI6InhoYll5dnNaQnhUb1dVbVYreEVha0tCYndHOERnb2NBUVNhZjBkMWJtMm89IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--4ab8dd89d2709c47664a855e5501ebe440d20c30; path=/; secure; HttpOnly"], "Cache-Control": ["no-cache"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"]}, "url": "https://github.com/Stranger6667/browserstacker", "body": {"encoding": "utf-8", "base64_string": ""}}, "recorded_at": "2016-12-23T10:29:55", "request": {"method": "GET", "uri": "https://github.com/Stranger6667/browserstacker", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"]}, "body": {"string": "", "encoding": "utf-8"}}}, {"response": {"status": {"code": 200, "message": "OK"}, "headers": {"X-Cache": ["MISS"], "Via": ["1.1 varnish"], "Vary": ["Authorization,Accept-Encoding"], "Date": ["Fri, 23 Dec 2016 10:29:55 GMT"], "Content-Length": ["345"], "Content-Encoding": ["gzip"], "X-XSS-Protection": ["1; mode=block"], "Expires": ["Fri, 23 Dec 2016 10:34:55 GMT"], "Cache-Control": ["max-age=300"], "X-Served-By": ["cache-hhn1549-HHN"], "X-Fastly-Request-ID": ["aae7671e9051b422253f7787e64ff5c5afcc097b"], "X-Cache-Hits": ["0"], "X-GitHub-Request-Id": ["C71B4C1F:73BE:12EEC5D:585CFCA3"], "Content-Type": ["text/plain; charset=utf-8"], "X-Content-Type-Options": ["nosniff"], "Connection": ["keep-alive"], "X-Timer": ["S1482488995.796933,VS0,VE118"], "Access-Control-Allow-Origin": ["*"], "Accept-Ranges": ["bytes"], "X-Frame-Options": ["deny"], "ETag": ["\"e9e49e23ace34ed5fb621dc8f52d1c1483b517d5\""], "Source-Age": ["0"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "Strict-Transport-Security": ["max-age=31536000"], "X-Geo-Block-List": [""]}, "url": "https://raw.githubusercontent.com/Stranger6667/browserstacker/master/CHANGELOG.md", "body": {"encoding": "utf-8", "base64_string": "H4sIAAAAAAAAA32RwU4DIRCG7/sUk/TSNlmyu43VHo3G2Fsvnlu6O92SsgwyoPbtBVZrE6McIIFhvo+fZ8We3Lkox1EUlViIGkqoV6Jaiqaql0Uxh4ejND120NIwSNMxGDkgi3jypD7ivqa+RweMPti0uzbKK6mBg7XkPBzIgUPvFDJMJ4tZqnl0ZG28y8isyPCluAsIMvhjolmtWunTschuyawWVTOaleXFew73XRe7vaHbEyNQ8DZ4IJsuR+YqM8eag9Le5a5ZbKdjCNu9o3dGx7tYXFezjGtyFM2NqOo/gbtBnnDLrUM0fCQfG8TF+TbSp5PbK2yHBxn0hfTjdvdF+4f1wikpZXqNsHP4GpAzacwuP0NqDW2cUsJ1xm5ke5I9gmIIVpNMEp5gc96sY00z/gK1YUDjxzhkFp1OlqNRfn3z2+hK7PunHWqUjKL4BBxDrT5SAgAA"}}, "recorded_at": "2016-12-23T10:29:55", "request": {"method": "GET", "uri": "https://raw.githubusercontent.com/Stranger6667/browserstacker/master/CHANGELOG.md", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"]}, "body": {"string": "", "encoding": "utf-8"}}}], "recorded_with": "betamax/0.8.0"}