{"recorded_with": "betamax/0.8.0", "http_interactions": [{"recorded_at": "2016-12-23T10:27:10", "response": {"body": {"string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"algolia\", \n        \"package_url\": \"http://pypi.python.org/pypi/algoliasearchasync\", \n        \"author\": \"Algolia Team\", \n        \"author_email\": \"support@algolia.com\", \n        \"download_url\": \"\", \n        \"platform\": \"\", \n        \"version\": \"1.1\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"[![Build Status](https://travis-ci.com/algolia/algoliasearch-client-python-async.svg?token=NAo1YMSYUe1rsBFvhGmF&branch=master)](https://travis-ci.com/algolia/algoliasearch-client-python-async)\\n[![PyPI version](https://badge.fury.io/py/algoliasearchasync.svg)](https://badge.fury.io/py/algoliasearchasync)\\n[![Coverage Status](https://coveralls.io/repos/github/algolia/algoliasearch-client-python-async/badge.svg?branch=master)](https://coveralls.io/github/algolia/algoliasearch-client-python-async?branch=master)\\n\\n# Algolia Asynchronous Python Client\\n\\nThis package is designed to replace the\\n[`algoliasearch`](https://github.com/algolia/algoliasearch-client-python)\\npackage in asynchronous environments.\\n\\nThis package is only compatible with python 3.4 and onward.\\n\\n## What it does\\n\\n- Is compatible with python `asyncio`.\\n\\n- Provide asynchronous alternatives to most of the client methods.\\n  All those methods are just suffixed by `_async` (`search_async`,\\n  `add_object_async`, etc.)\\n\\n- Still provide synchronous versions of the methods.\\n\\n- Uses `aiohttp` as the HTTP underlying library.\\n\\n- Uses `__aexit__` to avoid manually closing `aiohttp` sessions with\\n  python >= 3.5.1.\\n\\n## What it does **not**\\n\\n- Implement the `browse`, `browse_all`, `delete_by_query` methods.\\n\\n- Implement the `search_disjunctive_faceting` method.\\n\\n- Support task canceling (yet).\\n\\n## Installation and Dependencies\\n\\nMost of the logic of the synchronous client is being used here, so this\\nclient depends on the synchronous one. It also depends on `aiohttp`.\\n\\nTo install this package: `pip install algoliasearchasync`.\\n\\n## Documentation\\n\\nAll the asynchronous functions have the same names as the synchronous ones\\nwith `_async` appended. Synchronous methods keep the same name.\\n\\nArguments taken by the asynchronous functions are the same as the synchronous\\none, for documentation on the behavior of each function please see:\\n\\n- [Synchronous python client](https://github.com/algolia/algoliasearch-client-python)\\n\\n- [Algolia documentation](https://www.algolia.com/doc)\\n\\n## Examples\\n\\nWith python >= 3.4\\n\\n```python\\nimport asyncio\\nfrom algoliasearchasync import ClientAsync\\n\\n\\n@asyncio.coroutine\\ndef main(terms):\\n    client = ClientAsync('<APP_ID>', '<API_KEY>')\\n    index = client.init_index('<INDEX_NAME>')\\n    # Create as many searches as there is terms.\\n    searches = [index.search_async(term) for term in terms]\\n    # Store the aggregated results.\\n    s = yield from asyncio.gather(*searches)\\n    # Client must be closed manually before exiting the program.\\n    yield from client.close()\\n    # Return the aggregated results.\\n    return s\\n\\n\\nterms = ['<TERM2>', '<TERM2>']\\nloop = asyncio.get_event_loop()\\n# Start and wait for the tasks to complete.\\ncomplete = loop.run_until_complete(asyncio.gather(*searches))\\nfor term, search in zip(terms, complete):\\n    print('Results for: {}'.format(term))\\n    # Display the field '<FIELD>' of each result.\\n    print('\\\\n'.join([h['<FIELD>'] for h in search['hits']]))\\n```\\n\\nWith python >= 3.5.1\\n\\n```python\\nimport asyncio\\nfrom algoliasearchasync import ClientAsync\\n\\n\\n# Define a coroutine to be able to use `async with`.\\nasync def main(terms):\\n    # Scope the client for it to be closed automatically.\\n    async with ClientAsync('<APP_ID>', '<API_KEY>') as client:\\n        index = c.init_index('<INDEX_NAME>')\\n        # Create as many searches as there is terms.\\n        searches = [index.search_async(term) for term in terms]\\n        # Return the aggregated results.\\n        return await asyncio.gather(*searches)\\n\\n\\nterms = ['<TERM1>', '<TERM2>']\\nloop = asyncio.get_event_loop()\\n# Start and wait for the tasks to complete.\\ncomplete = loop.run_until_complete(main(terms))\\nfor term, search in zip(terms, complete):\\n    print('Results for {}'.format(term))\\n    # Display the field '<FIELD>' of each result.\\n    print('\\\\n'.join([h['<FIELD>'] for h in search['hits']]))\\n```\\n\", \n        \"release_url\": \"http://pypi.python.org/pypi/algoliasearchasync/1.1\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 2, \n        \"classifiers\": [\n            \"Development Status :: 4 - Beta\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Programming Language :: Python :: 3.5\", \n            \"Topic :: Internet\", \n            \"Topic :: Internet :: WWW/HTTP\", \n            \"Topic :: Internet :: WWW/HTTP :: Indexing/Search\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"algoliasearchasync\", \n        \"license\": \"MIT License\", \n        \"summary\": \"Algolia Search Asyncronous API Client for Python\", \n        \"home_page\": \"https://github.com/algolia/algoliasearch-client-python-async\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.5\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-06-15T14:09:20\", \n                \"comment_text\": \"\", \n                \"python_version\": \"3.5\", \n                \"url\": \"https://pypi.python.org/packages/c1/4e/a43ff4747b0e58e596a72b4ae0f50288f16acec9e9e6f4fba5c821daab3c/algoliasearchasync-0.5-py3-none-any.whl\", \n                \"md5_digest\": \"3f0bc3772ae50d213d97cb961c42b0b7\", \n                \"downloads\": 569, \n                \"filename\": \"algoliasearchasync-0.5-py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"c1/4e/a43ff4747b0e58e596a72b4ae0f50288f16acec9e9e6f4fba5c821daab3c/algoliasearchasync-0.5-py3-none-any.whl\", \n                \"size\": 8795\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-06-15T14:08:52\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/81/82/7f5f6b91362980c6fa61c62550371757fdd604147552ae1b6449c11423e4/algoliasearchasync-0.5.tar.gz\", \n                \"md5_digest\": \"853f6d1cdf38bdc201b0a2d5bfc74f6f\", \n                \"downloads\": 169, \n                \"filename\": \"algoliasearchasync-0.5.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"81/82/7f5f6b91362980c6fa61c62550371757fdd604147552ae1b6449c11423e4/algoliasearchasync-0.5.tar.gz\", \n                \"size\": 5624\n            }\n        ], \n        \"1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-12-13T21:35:49\", \n                \"comment_text\": \"\", \n                \"python_version\": \"3.5\", \n                \"url\": \"https://pypi.python.org/packages/a8/c7/3cce82c61195d8ae04db4225bcaac835fffe16640165419c6b7ba4abe766/algoliasearchasync-1.0-py3-none-any.whl\", \n                \"md5_digest\": \"2de898a24d9a22d540be4ffa2224d3d8\", \n                \"downloads\": 22, \n                \"filename\": \"algoliasearchasync-1.0-py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"a8/c7/3cce82c61195d8ae04db4225bcaac835fffe16640165419c6b7ba4abe766/algoliasearchasync-1.0-py3-none-any.whl\", \n                \"size\": 8805\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-12-13T21:35:45\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/50/8a/9da7097392fe1f9e58cc1734d3f4f3cab43a1a1a1c2a800ad8875f700095/algoliasearchasync-1.0.tar.gz\", \n                \"md5_digest\": \"58afb9f894a23121816647574af6fdd6\", \n                \"downloads\": 21, \n                \"filename\": \"algoliasearchasync-1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"50/8a/9da7097392fe1f9e58cc1734d3f4f3cab43a1a1a1c2a800ad8875f700095/algoliasearchasync-1.0.tar.gz\", \n                \"size\": 5575\n            }\n        ], \n        \"1.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-12-16T17:56:09\", \n                \"comment_text\": \"\", \n                \"python_version\": \"3.5\", \n                \"url\": \"https://pypi.python.org/packages/dc/fd/cdc5a3592ad81496018e0b10545d580ad3079d8ea387696234da3bf4e71e/algoliasearchasync-1.1-py3-none-any.whl\", \n                \"md5_digest\": \"1e139a3b4c19abdf5bce2b5530978c68\", \n                \"downloads\": 215, \n                \"filename\": \"algoliasearchasync-1.1-py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"dc/fd/cdc5a3592ad81496018e0b10545d580ad3079d8ea387696234da3bf4e71e/algoliasearchasync-1.1-py3-none-any.whl\", \n                \"size\": 8820\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-12-16T17:56:08\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/b8/b2/608f645cd7953411858df052d4ff93f1a7da8bbe023bafcbf700c53637f9/algoliasearchasync-1.1.tar.gz\", \n                \"md5_digest\": \"7ee93ac063020f30331d2bbb567851f2\", \n                \"downloads\": 220, \n                \"filename\": \"algoliasearchasync-1.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"b8/b2/608f645cd7953411858df052d4ff93f1a7da8bbe023bafcbf700c53637f9/algoliasearchasync-1.1.tar.gz\", \n                \"size\": 5579\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-12-16T17:56:09\", \n            \"comment_text\": \"\", \n            \"python_version\": \"3.5\", \n            \"url\": \"https://pypi.python.org/packages/dc/fd/cdc5a3592ad81496018e0b10545d580ad3079d8ea387696234da3bf4e71e/algoliasearchasync-1.1-py3-none-any.whl\", \n            \"md5_digest\": \"1e139a3b4c19abdf5bce2b5530978c68\", \n            \"downloads\": 215, \n            \"filename\": \"algoliasearchasync-1.1-py3-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"dc/fd/cdc5a3592ad81496018e0b10545d580ad3079d8ea387696234da3bf4e71e/algoliasearchasync-1.1-py3-none-any.whl\", \n            \"size\": 8820\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-12-16T17:56:08\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/b8/b2/608f645cd7953411858df052d4ff93f1a7da8bbe023bafcbf700c53637f9/algoliasearchasync-1.1.tar.gz\", \n            \"md5_digest\": \"7ee93ac063020f30331d2bbb567851f2\", \n            \"downloads\": 220, \n            \"filename\": \"algoliasearchasync-1.1.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"b8/b2/608f645cd7953411858df052d4ff93f1a7da8bbe023bafcbf700c53637f9/algoliasearchasync-1.1.tar.gz\", \n            \"size\": 5579\n        }\n    ]\n}", "encoding": "UTF-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/algoliasearchasync/json", "headers": {"X-Frame-Options": ["deny"], "X-PYPI-LAST-SERIAL": ["2534672"], "Access-Control-Allow-Origin": ["*"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Accept-Ranges": ["bytes"], "X-Content-Type-Options": ["nosniff"], "X-Timer": ["S1482488830.617327,VS0,VE0"], "Via": ["1.1 varnish", "1.1 varnish"], "X-Served-By": ["cache-iad2143-IAD, cache-hhn1525-HHN"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Age": ["78135"], "Date": ["Fri, 23 Dec 2016 10:27:10 GMT"], "Fastly-Debug-Digest": ["cd5fc6d891362550b122b3c1f7eb6e6a2482c019cc842ab8863086955b8abce1"], "Server": ["nginx/1.10.2"], "X-XSS-Protection": ["1; mode=block"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Content-Length": ["11525"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Cache-Hits": ["1, 1"], "Content-Disposition": ["inline"], "X-Cache": ["HIT, HIT"], "Connection": ["keep-alive"], "Cache-Control": ["max-age=600, public"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://pypi.python.org/pypi/algoliasearchasync/json"}}, {"recorded_at": "2016-12-23T10:27:11", "response": {"body": {"base64_string": "", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/algolia/algoliasearch-client-python-async", "headers": {"Content-Encoding": ["gzip"], "Date": ["Fri, 23 Dec 2016 10:27:11 GMT"], "Server": ["GitHub.com"], "X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["54B1D78B:C3EF:F8C382D:585CFBFE"], "Transfer-Encoding": ["chunked"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["X-PJAX", "Accept-Encoding"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Request-Id": ["3ce01c70baaf3403369317c628cc3aaf"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-Content-Type-Options": ["nosniff"], "Status": ["200 OK"], "X-Runtime": ["0.144406"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["76f8aa18dab86a06db6e70a0421dc28c"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:27:11 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiZTExNmE3ODEzM2NkMDYwYjBmYjhlZjkwMmNmNDRhNGQiLCJzcHlfcmVwbyI6ImFsZ29saWEvYWxnb2xpYXNlYXJjaC1jbGllbnQtcHl0aG9uLWFzeW5jIiwic3B5X3JlcG9fYXQiOjE0ODI0ODg4MzEsIl9jc3JmX3Rva2VuIjoiODZNczkvdGd3WmtxaDRWbE11clBDRFhIaERiWDZpdmkwcHNVbGVQSDVibz0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--6d9d641bd9f8b579ac48765a3e7a2f485871db75; path=/; secure; HttpOnly"], "Cache-Control": ["no-cache"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://github.com/algolia/algoliasearch-client-python-async"}}, {"recorded_at": "2016-12-23T10:27:11", "response": {"body": {"base64_string": "H4sIAAAAAAAAA02OywqDMBBF9/mKWRcsxoJ7aUstFAvtB+iYjBrIQ5IY6N83UBe963MO99w23e36eN4Yq0peF7wqeA38yBnkHeBFxiWCS/cGgWJRdobJOwNxIRBakY1/4imL5S42UsIQCL1o+8n5fkJBsU+oNwrDztzNqsnkBiAY5wm8G7cQIUSPkeYPRAcLWqkpA5vFhErjqH93Vu+SkuTZFwk9APbDAAAA", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/algolia/algoliasearch-client-python-async/master/Changelog", "headers": {"Content-Encoding": ["gzip"], "Expires": ["Fri, 23 Dec 2016 10:32:11 GMT"], "ETag": ["\"5c6313e50c1cca59333bb27539663495f4effec1\""], "X-Frame-Options": ["deny"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "X-Cache": ["MISS"], "X-Fastly-Request-ID": ["22468b0af33fad51f1977ace3fab5b8c83a4d221"], "Accept-Ranges": ["bytes"], "X-Content-Type-Options": ["nosniff"], "X-Geo-Block-List": [""], "Cache-Control": ["max-age=300"], "Via": ["1.1 varnish"], "Access-Control-Allow-Origin": ["*"], "X-Served-By": ["cache-hhn1532-HHN"], "Content-Type": ["text/plain; charset=utf-8"], "Date": ["Fri, 23 Dec 2016 10:27:11 GMT"], "Source-Age": ["0"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["Authorization,Accept-Encoding"], "X-GitHub-Request-Id": ["C71B4C19:56A0:46073E0:585CFBFF"], "Content-Length": ["171"], "X-Cache-Hits": ["0"], "X-Timer": ["S1482488831.425164,VS0,VE131"], "Connection": ["keep-alive"], "Strict-Transport-Security": ["max-age=31536000"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://raw.githubusercontent.com/algolia/algoliasearch-client-python-async/master/Changelog"}}]}