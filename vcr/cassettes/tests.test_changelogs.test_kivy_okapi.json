{"http_interactions": [{"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/kivy_okapi/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "X-Cache": ["MISS, MISS"], "Accept-Ranges": ["bytes"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Connection": ["keep-alive"], "Server": ["nginx/1.10.2"], "Date": ["Fri, 23 Dec 2016 10:42:47 GMT"], "Age": ["0"], "X-Cache-Hits": ["0, 0"], "Content-Length": ["0"], "X-Frame-Options": ["deny"], "Location": ["/pypi/kivy-okapi/json"], "X-Content-Type-Options": ["nosniff"], "X-Served-By": ["cache-iad2131-IAD, cache-hhn1525-HHN"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Timer": ["S1482489767.646800,VS0,VE106"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["59a630745ba86b90fbad028b0a577b814720a73a5694b1aa5ac7bd877bc709fe"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://pypi.python.org/pypi/kivy_okapi/json", "body": {"encoding": null, "string": ""}}, "recorded_at": "2016-12-23T10:42:47"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/kivy-okapi/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"Cache-Control": ["max-age=600, public"], "Fastly-Debug-Digest": ["9ef56115875a9bb5078bdef293840d04bbbe1e2bbf3ab5b48a710293d576f4ef"], "Via": ["1.1 varnish", "1.1 varnish"], "Connection": ["keep-alive"], "X-Cache-Hits": ["1, 1"], "Date": ["Fri, 23 Dec 2016 10:42:47 GMT"], "X-Served-By": ["cache-iad2122-IAD, cache-hhn1525-HHN"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Access-Control-Allow-Origin": ["*"], "X-Timer": ["S1482489767.779723,VS0,VE0"], "X-XSS-Protection": ["1; mode=block"], "X-PYPI-LAST-SERIAL": ["2536153"], "X-Cache": ["HIT, HIT"], "Accept-Ranges": ["bytes"], "Content-Disposition": ["inline"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Server": ["nginx/1.10.2"], "Age": ["14386"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Length": ["9582"], "X-Frame-Options": ["deny"], "X-Content-Type-Options": ["nosniff"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/kivy-okapi/json", "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"kivy,python,python2,game,games,grid,grid-based\", \n        \"package_url\": \"http://pypi.python.org/pypi/kivy-okapi\", \n        \"author\": \"Craig Labenz\", \n        \"author_email\": \"craig.labenz@gmail.com\", \n        \"download_url\": \"https://github.com/craiglabenz/kivy-okapi/tarball/0.1.1\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"0.1.1\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"## Okapi\\n\\n#### What it is\\nA library to build grid-based games using Kivy 1.9\\n\\n\\n#### Installation\\n\\nInstalling packages with Kivy is a joy because you cannot use virtual environments (assuming you use the Kivy package installer). Kivy creates its own unique snowflake environment, then provides a `kivy` command-line utility that heavily modifies your `PYTHONPATH` before ultimately launching the python interpreter. Thus, virtual environments are off the table, as none of their packages can be imported after using `kivy`.\\n\\n1. [Download the Kivy installer](http://kivy.org/docs/installation/installation.html) and use it to install Kivy.\\n2. Next, install `okapi` from PyPI using Kivy's `pip`: `$ kivy -m pip install kivy-okapi`\\n\\n#### Launching an `Okapi` App\\n\\nOnce `Okapi` is installed where Kivy is willing to look, you can simply navigate into any game folder and run `kivy main.py` like normal, and all Okapi libraries will be available.\\n\\n\\n## Building a Game with `Okapi`\\n\\nFor reference, a complete example is provided in the `/examples/rodents_revenge` directory\\n\\n#### Create an `OkapiApp` class\\n\\nIn your `main.py` file, provide this bare minimum skeleton:\\n\\n```py\\n# Okapi\\nfrom okapi.app import Okapi as OkapiApp\\n\\n# Local\\nfrom game import Game\\nfrom screen_manager import ScreenManager\\n\\n\\nclass MyGameApp(OkapiApp):\\n\\n    GAME_CLASS = Game\\n    SCREEN_MANAGER_CLS = ScreenManager\\n    PROJECT_PATH = PROJECT_PATH\\n\\n    def get_application_name(self):\\n        return \\\"My Game\\\"\\n\\nif __name__ == '__main__':\\n    MyGameApp().run()\\n\\n```\\n\\n#### Kivy's `build()` method\\n\\nThose familiar with Kivy know that the your project's main `App` class is required to define a `build()` function that returns the root widget. For `Okapi`, that root widget is of the `ScreenManager` class. It is this widget's job to swap in and out loading screens, the game screen, menu screens, high score screens, etc.\\n\\nAn example of overriding the `ScreenManager` class is provided in the Rodent's Revenge game, but here is a bare minimum example:\\n\\n```py\\n# Okapi\\nfrom okapi.screen_manager import ScreenManager as OkapiScreenManager\\n\\n# Local\\nfrom welcome_screen import WelcomeScreen\\n\\nclass ScreenManager(OkapiScreenManager):\\n\\n    def get_welcome_screen(self):\\n        \\\"\\\"\\\"\\n        Optional.\\n\\n        If implemented, should return a `Screen` widget that says something\\n        like \\\"Hello, welcome to my game!\\\" and has a click listener. The\\n        `OkapiScreenManager` will listen for that click and start the game.\\n        \\\"\\\"\\\"\\n        return WelcomeScreen()\\n\\n    def get_screen_from_game(self):\\n        \\\"\\\"\\\"\\n        Required.\\n\\n        Should do something with `self.game` to get a Screen widget used to start\\n        and render the game.\\n        \\\"\\\"\\\"\\n        return self.game.get_screen()\\n\\n```\\n\\n\\n#### Listening to Kivy's clock\\n\\nThe `ScreenManager` is also a clean interface to Kivy's clock module. Your `ScreenManager` keeps track of a `current_screen` attribute,\\nand whenever this changes it unregisters any clock listeners from the previous screen and registers the new screen's clock listeners.\\n\\nTo register clock handlers, define them like so:\\n\\n```py\\n# Okapi\\nfrom okapi.screen import Screen\\n\\n\\nclass SomeScreen(Screen):\\n\\n    def every_second(self):\\n        # Do stuff\\n\\n    def every_other_second(self):\\n        # Do more stuff\\n\\n    def get_clock_tuple(self):\\n        # Option 1\\n        return (self.every_second, 1.0,)\\n\\n        # or Option 2\\n        return (\\n            (self.every_second, 1.0,),\\n            (self.every_other_second, 2.0,),\\n        )\\n```\\n\\nThe `ScreenManager` class will also drill down and check all top-level children of a screen to see if any have clock listeners.\\n\\n\\n#### Listening to keyboard input\\n\\nThe `ScreenManager` also listens to all keyboard input and passes it to both `self.game` and whatever is its `current_screen`. To listen for clicks to the \\\"down arrow\\\":\\n\\n```py\\n# Okapi\\nfrom okapi.screen import Screen\\n\\n\\nclass SomeScreen(Screen):\\n\\n    def on_press_down(self):\\n        # Do stuff\\n\\n    def on_press_y(self):\\n        # Do stuff\\n\\n    def on_press_cmd_w(self):\\n        # Do stuff\\n\\n    def on_press_alt_shift_s(self):\\n        # Do stuff\\n\\n```\\n\\nThe above definitions also apply to your `Game` class.\\n\\nIf there are > 1 modifier keys pressed (`shift`, `command`, `alt`, etc) they will be alphabetized for consistency.\\n\\n#### The `Game` class\\n\\nThe `Game` class is where you put your fun game logic! Define one like so:\\n\\n\\n```py\\n# Engine\\nfrom okapi.engine.game import Game as OkapiGame\\n\\n\\nclass Game(OkapiGame):\\n\\n    # Used by `OkapiGame` to provide default functionality for\\n    # `self.get_clock_tuple()`\\n    # Rodent's Revenge only has to update once per second\\n    CLOCK_INTERVAL = 1.0\\n\\n    # Default blank ground -- empty walkable space\\n    BLANK_GROUND_CHARACTER = '.'\\n\\n    # Other special types of ground. Maybe impassable, or maybe\\n    # containing various actors\\n    EXTRA_GROUNDS = {\\n        \\\"b\\\": ground.BlockGround,\\n        \\\"#\\\": ground.ImpassableGround,\\n    }\\n\\n    def clock_update(self, dt):\\n        # Make the game happen!\\n\\n    def on_press_down(self):\\n        # Move something down!\\n\\n```\\n\\n\\n#### Moving actors\\n\\nThe `OkapiGame` class provides a function called `move_actor`. Let's say you are building a chess app. To move a knight, you would make a call like this:\\n\\n```py\\nself.game.move_actor(self.white_knight_1, 1, 2)\\n```\\n\\nThis will immediately cause a reanimation, showing the white knight having just moved.\\n\\n\\n#### Moving Rules\\n\\nMoving legality is determined by the target ground's `can_accommodate()` method. By default, this rejects movements into occupied territory. Of course, that rule makes little sense for chess, so for that example you'd want to override that function to accept new pieces at any time, and to remove from the game any piece currently found in that spot.\", \n        \"release_url\": \"http://pypi.python.org/pypi/kivy-okapi/0.1.1\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 1, \n        \"classifiers\": [\n            \"Development Status :: 3 - Alpha\", \n            \"Intended Audience :: Developers\", \n            \"Natural Language :: English\", \n            \"Programming Language :: Python\", \n            \"Topic :: Games/Entertainment\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"kivy-okapi\", \n        \"license\": \"MIT\", \n        \"summary\": \"Grid-based game framework built with Kivy 1.9\", \n        \"home_page\": \"https://github.com/craiglabenz/kivy-okapi\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-30T13:21:18\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/24/de/9b73c304fad95e44342721a58bcbd6049d61d37b1d61230b97a848161a8a/kivy-okapi-0.1.0.tar.gz\", \n                \"md5_digest\": \"4185bfb5a5b5d656323cc2f54ae22a85\", \n                \"downloads\": 2036, \n                \"filename\": \"kivy-okapi-0.1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"24/de/9b73c304fad95e44342721a58bcbd6049d61d37b1d61230b97a848161a8a/kivy-okapi-0.1.0.tar.gz\", \n                \"size\": 12023\n            }\n        ], \n        \"0.1.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-07-15T11:49:19\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/41/6d/72b99534e01a6c7b8e46b36994a1a599942cbc374fb82c3c9f3940165fa5/kivy-okapi-0.1.1.tar.gz\", \n                \"md5_digest\": \"5d1975b93f705a97f762c01f72fe6ff6\", \n                \"downloads\": 967, \n                \"filename\": \"kivy-okapi-0.1.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"41/6d/72b99534e01a6c7b8e46b36994a1a599942cbc374fb82c3c9f3940165fa5/kivy-okapi-0.1.1.tar.gz\", \n                \"size\": 15846\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2015-07-15T11:49:19\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/41/6d/72b99534e01a6c7b8e46b36994a1a599942cbc374fb82c3c9f3940165fa5/kivy-okapi-0.1.1.tar.gz\", \n            \"md5_digest\": \"5d1975b93f705a97f762c01f72fe6ff6\", \n            \"downloads\": 967, \n            \"filename\": \"kivy-okapi-0.1.1.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"41/6d/72b99534e01a6c7b8e46b36994a1a599942cbc374fb82c3c9f3940165fa5/kivy-okapi-0.1.1.tar.gz\", \n            \"size\": 15846\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:42:47"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://github.com/craiglabenz/kivy-okapi", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "Server": ["GitHub.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-GitHub-Request-Id": ["54B1D78B:C3EF:F901FC1:585CFFA7"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Date": ["Fri, 23 Dec 2016 10:42:48 GMT"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["b26767d88b31b8e1e88f61422786ec5e"], "X-Frame-Options": ["deny"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Content-Type-Options": ["nosniff"], "X-Request-Id": ["6788890a6b8036189594077ccc594c70"], "Vary": ["X-PJAX", "Accept-Encoding"], "Transfer-Encoding": ["chunked"], "X-Runtime": ["0.087229"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:42:48 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiZWVmODY1OGNhYmE2MDg3Y2Q3YzU1ZTY4MzA1ZDEzYzYiLCJzcHlfcmVwbyI6ImNyYWlnbGFiZW56L2tpdnktb2thcGkiLCJzcHlfcmVwb19hdCI6MTQ4MjQ4OTc2OCwiX2NzcmZfdG9rZW4iOiJMQzlCSHdWYUwxbEJHamg5bm1uWG9IQ2srVlBJT0dySXpqdEZMUEd3Z0RrPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--7056d4bbb24875b0693e2e1987d49b3058566978; path=/; secure; HttpOnly"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/craiglabenz/kivy-okapi", "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:42:48"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://raw.githubusercontent.com/craiglabenz/kivy-okapi/master/CHANGELOG", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["C71B4C2F:414B:64ADD9:585CFFA7"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-XSS-Protection": ["1; mode=block"], "Date": ["Fri, 23 Dec 2016 10:42:48 GMT"], "Source-Age": ["0"], "X-Cache-Hits": ["0"], "X-Served-By": ["cache-hhn1546-HHN"], "X-Fastly-Request-ID": ["94bcc6209b648ed2da649c44d251651dbc58605a"], "X-Geo-Block-List": [""], "Strict-Transport-Security": ["max-age=31536000"], "Access-Control-Allow-Origin": ["*"], "Vary": ["Authorization,Accept-Encoding"], "X-Timer": ["S1482489768.527323,VS0,VE115"], "Content-Encoding": ["gzip"], "X-Cache": ["MISS"], "Accept-Ranges": ["bytes"], "Cache-Control": ["max-age=300"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "ETag": ["\"723b2c0aa36343b8f6362fde5f2893f597ae6193\""], "Content-Type": ["text/plain; charset=utf-8"], "Content-Length": ["134"], "X-Content-Type-Options": ["nosniff"], "Expires": ["Fri, 23 Dec 2016 10:47:48 GMT"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/craiglabenz/kivy-okapi/master/CHANGELOG", "body": {"base64_string": "H4sIAAAAAAAAAy2KQQ4CIRAE77xiPiBhX2E8eFkfsIzQGuLAGMDd+HsxoQ+VVKqdXawzNHaiS0k9sdAKATcY40ZcZlxROIP8edBuWXd46jr9rxuHrtXPu7+FCpQrF36ieip6UFARhN4oa0yPhEgvfO/KNVIq708nbnRAxPwA96RB9pUAAAA=", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:42:48"}], "recorded_with": "betamax/0.8.0"}