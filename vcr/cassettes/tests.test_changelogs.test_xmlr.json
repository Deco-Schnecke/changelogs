{"http_interactions": [{"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/xmlr/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"Cache-Control": ["max-age=600, public"], "Fastly-Debug-Digest": ["4acecef96b97cefd70b02678a0ac700763718cfbfa84de53393ee6da145991fd"], "Via": ["1.1 varnish", "1.1 varnish"], "Connection": ["keep-alive"], "X-Cache-Hits": ["1, 1"], "Date": ["Fri, 23 Dec 2016 10:45:44 GMT"], "X-Served-By": ["cache-iad2143-IAD, cache-hhn1530-HHN"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Access-Control-Allow-Origin": ["*"], "X-Timer": ["S1482489944.822161,VS0,VE0"], "X-XSS-Protection": ["1; mode=block"], "X-PYPI-LAST-SERIAL": ["2534563"], "X-Cache": ["HIT, HIT"], "Accept-Ranges": ["bytes"], "Content-Disposition": ["inline"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Server": ["nginx/1.10.2"], "Age": ["85000"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Length": ["8627"], "X-Frame-Options": ["deny"], "X-Content-Type-Options": ["nosniff"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/xmlr/json", "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"XML,parsing,json,conversion\", \n        \"package_url\": \"http://pypi.python.org/pypi/xmlr\", \n        \"author\": \"Henrik Blidh\", \n        \"author_email\": \"henrik.blidh@nedomkull.com\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"0.3.1\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"xmlr\\n====\\n\\n|Build Status| |Coverage Status|\\n\\nIt can be problematic to handle large XML files (>> 10 MB) and using the\\n``xml`` module in Python directly leads to huge memory overheads. Most\\noften, these large XML files are pure data files, storing highly\\nstructured data that have no intrinsic need to be stored in XML.\\n\\nThis package provides iterative methods for dealing with them, reading\\nthe XML documents into Python dict representation instead, according to\\nmethodology specifed on the page `Converting Between XML and JSON\\n<http://www.xml.com/lpt/a/1658>`_. ``xmlr`` is inspired by the solutions\\ndescribed in the blog posts `High-performance XML parsing in Python with lxml\\n<https://www.ibm.com/developerworks/xml/library/x-hiperfparse/>`_ and\\n`Parsing large XML files, serially, in Python\\n<http://boscoh.com/programming/reading-xml-serially.html>`_,\\nenabling the parsing of very large documents without problems with\\novertaxing the memory.\\n\\n.. pull-quote::\\n\\n    This package generally provides a one way trip; there is not necessarily\\n    a bijectional relation with the XML source after parsing.\\n\\nInstallation\\n------------\\n\\n::\\n\\n    pip install xmlr\\n\\nUsage\\n-----\\n\\nTo parse an entire document, use the ``xmlparse`` method:\\n\\n.. code:: python\\n\\n    from xmlr import xmlparse\\n\\n    doc = xmlparse('very_large_doc.xml')\\n\\nAn iterator, ``xmliter``, yielding elements of a specified type as they\\nare parsed from the document is also present:\\n\\n.. code:: python\\n\\n    from xmlr import xmliter\\n\\n    for d in xmliter('very_large_record.xml', 'Record'):\\n        print(d)\\n\\nThe desired parser can also be specified. Available methods are:\\n\\n-  ``ELEMENTTREE`` - Using ``xml.etree.ElementTree`` as backend.\\n-  ``C_ELEMENTTREE`` - Using ``xml.etree.cElementTree`` as backend.\\n-  ``LXML_ELEMENTTREE`` - Using ``lxml.etree`` as backend. Requires\\n   installation of the ``lxml`` package.\\n\\nThese can then be used like this:\\n\\n.. code:: python\\n\\n    from xmlr import xmliter, XMLParsingMethods\\n\\n    for d in xmliter('very_large_record.xml', 'Record', parser=XMLParsingMethods.LXML_ELEMENTTREE):\\n        print(d)\\n\\nNo type conversion is performed right now. A value in the output\\ndictionary can have the type ``dict`` (a subdocument), ``list`` (an\\narray of similar documents), ``str`` (a leaf or value) or ``None``\\n(empty XML leaf tag). All keys are of the type ``str``.\\n\\nTests\\n~~~~~\\n\\nTests are run with ``pytest``:\\n\\n.. code:: bash\\n\\n    $ py.test tests/\\n    ============================= test session starts ==============================\\n    platform linux2 -- Python 2.7.6, pytest-2.9.1, py-1.4.31, pluggy-0.3.1\\n    rootdir: /home/hbldh/Repos/xmlr, inifile:\\n    collected 50 items\\n\\n    tests/test_iter.py ...........................\\n    tests/test_methods.py ..\\n    tests/test_parsing.py .....................\\n\\n    ========================== 50 passed in 0.50 seconds ===========================\\n\\nThe tests fetches some XML documents from `W3Schools XML tutorials`_ and\\nalso uses a bundled, slimmed down version of the document available at\\n`U.S. copyright renewal records available for download\\n<http://booksearch.blogspot.se/2008/06/us-copyright-renewal-records-available.html>`_.\\n\\n\\n.. _W3Schools XML tutorials: http://www.w3schools.com/xml/xml_examples.asp\\n\\n.. |Build Status| image:: https://travis-ci.org/hbldh/xmlr.svg?branch=master\\n   :target: https://travis-ci.org/hbldh/xmlr\\n.. |Coverage Status| image:: https://coveralls.io/repos/github/hbldh/xmlr/badge.svg?branch=master\\n   :target: https://coveralls.io/github/hbldh/xmlr?branch=master\\n\\n\\n\\n\\nv0.3.1 (2016-08-16)\\n===================\\n- Made available on PyPi\\n\\nv0.3.0 (2016-05-23)\\n===================\\n- Renaming from `xmller` to `xmlr`.\\n- General improvements.\\n- Test coverage increased.\\n- More documentation.\\n- Development Status classifier increased from Alpha to Beta.\\n\\nv0.2.0 (2016-05-20)\\n===================\\n- Bugfixes.\\n- `xmliter` method written.\\n- `lxml` support added.\\n- Improved parser selection.\\n- Increased test coverage to >90%.\\n\\nv0.1.0 (2016-05-17)\\n===================\\n- Initial release\", \n        \"release_url\": \"http://pypi.python.org/pypi/xmlr/0.3.1\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 0, \n        \"classifiers\": [\n            \"Development Status :: 4 - Beta\", \n            \"Intended Audience :: Developers\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python :: 2\", \n            \"Programming Language :: Python :: 2.6\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Programming Language :: Python :: 3.5\", \n            \"Topic :: Text Processing :: Markup :: XML\"\n        ], \n        \"name\": \"xmlr\", \n        \"bugtrack_url\": null, \n        \"license\": \"MIT\", \n        \"summary\": \"XML parsing package for very large files\", \n        \"home_page\": \"https://github.com/hbldh/xmlr\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.3.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-08-16T08:53:00\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/ac/ac/afc64d4cf5fd64bed18390e1b59058373f86f548b7caba2f80df68f5bf2f/xmlr-0.3.1-py2.py3-none-any.whl\", \n                \"md5_digest\": \"c9e902b631655b7438235e805929b0d5\", \n                \"downloads\": 334, \n                \"filename\": \"xmlr-0.3.1-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"ac/ac/afc64d4cf5fd64bed18390e1b59058373f86f548b7caba2f80df68f5bf2f/xmlr-0.3.1-py2.py3-none-any.whl\", \n                \"size\": 11469\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-08-16T08:52:47\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/15/8c/0048af8beff056b21fad4002a56233a9827ddc157dec38ba06f4413797b9/xmlr-0.3.1.tar.gz\", \n                \"md5_digest\": \"cdcfd6aa5eaab531ca434b7ac6ff2f8d\", \n                \"downloads\": 92, \n                \"filename\": \"xmlr-0.3.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"15/8c/0048af8beff056b21fad4002a56233a9827ddc157dec38ba06f4413797b9/xmlr-0.3.1.tar.gz\", \n                \"size\": 8068\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-08-16T08:53:00\", \n            \"comment_text\": \"\", \n            \"python_version\": \"2.7\", \n            \"url\": \"https://pypi.python.org/packages/ac/ac/afc64d4cf5fd64bed18390e1b59058373f86f548b7caba2f80df68f5bf2f/xmlr-0.3.1-py2.py3-none-any.whl\", \n            \"md5_digest\": \"c9e902b631655b7438235e805929b0d5\", \n            \"downloads\": 334, \n            \"filename\": \"xmlr-0.3.1-py2.py3-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"ac/ac/afc64d4cf5fd64bed18390e1b59058373f86f548b7caba2f80df68f5bf2f/xmlr-0.3.1-py2.py3-none-any.whl\", \n            \"size\": 11469\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-08-16T08:52:47\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/15/8c/0048af8beff056b21fad4002a56233a9827ddc157dec38ba06f4413797b9/xmlr-0.3.1.tar.gz\", \n            \"md5_digest\": \"cdcfd6aa5eaab531ca434b7ac6ff2f8d\", \n            \"downloads\": 92, \n            \"filename\": \"xmlr-0.3.1.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"15/8c/0048af8beff056b21fad4002a56233a9827ddc157dec38ba06f4413797b9/xmlr-0.3.1.tar.gz\", \n            \"size\": 8068\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:45:44"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://github.com/hbldh/xmlr", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "Server": ["GitHub.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-GitHub-Request-Id": ["54B1D78B:C3ED:CA631DA:585D0059"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Date": ["Fri, 23 Dec 2016 10:45:45 GMT"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["b9c2a2d2339d471239b174dbbc6d8be2"], "X-Frame-Options": ["deny"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Content-Type-Options": ["nosniff"], "X-Request-Id": ["b8059c0ca062a1ae8e479a8524504d15"], "Vary": ["X-PJAX", "Accept-Encoding"], "Transfer-Encoding": ["chunked"], "X-Runtime": ["0.335030"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:45:45 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiMjc0ZjhiZGZkYmRkNjFiNWYzNzU5MTM3ZDcxODE3ZDUiLCJzcHlfcmVwbyI6ImhibGRoL3htbHIiLCJzcHlfcmVwb19hdCI6MTQ4MjQ4OTk0NSwiX2NzcmZfdG9rZW4iOiJid01MOUNZV240cUVtVkU4K0lSQnc3OFRTZjk0L1hJOEgyN1pWdnJIcFpBPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--30f4156de04a900df97dbd8a45d56c42ffa820bb; path=/; secure; HttpOnly"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/hbldh/xmlr", "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:45:45"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://raw.githubusercontent.com/hbldh/xmlr/master/HISTORY.rst", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["C71B4C17:5BAA:68D4170:585D0059"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-XSS-Protection": ["1; mode=block"], "Date": ["Fri, 23 Dec 2016 10:45:45 GMT"], "Source-Age": ["0"], "X-Cache-Hits": ["0"], "X-Served-By": ["cache-hhn1539-HHN"], "X-Fastly-Request-ID": ["70f5cce248f8ef134638c75902c2b1243276bdc2"], "X-Geo-Block-List": [""], "Strict-Transport-Security": ["max-age=31536000"], "Access-Control-Allow-Origin": ["*"], "Vary": ["Authorization,Accept-Encoding"], "X-Timer": ["S1482489945.814417,VS0,VE129"], "Content-Encoding": ["gzip"], "X-Cache": ["MISS"], "Accept-Ranges": ["bytes"], "Cache-Control": ["max-age=300"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "ETag": ["\"eb81f431bf5568e6524b7cd575b1bd667c4c2033\""], "Content-Type": ["text/plain; charset=utf-8"], "Content-Length": ["291"], "X-Content-Type-Options": ["nosniff"], "Expires": ["Fri, 23 Dec 2016 10:50:45 GMT"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/hbldh/xmlr/master/HISTORY.rst", "body": {"base64_string": "H4sIAAAAAAAAA3WQwUrEMBCG732KuQh6aGm7uLoHBRdBelhY1Afo2Ey7A2lSJmld396kZdVFNqfwz/Dn+zLl2Sor4LrMi3Wa36fF+iZ5+H+SFHaoCHBC1vihCayB/deek2SKDfmp4TYtV5caXslgz6aDVmwP9bHXmqQGb+e71FnYeSFDghq4H8RO1JPxLubv5Dw0IRHsCNg0QuhIxdHOCoGyzRiX0bM1MX2mibQdYgZvIR4dNBqd45ZJfgsWlic9HDCCbMljNjuVZ075Jaft2LV8pJkxWrCPSj35g1XwKew9zTi1DsMa3DgMVjygUgt8tXgqGFBcAHOkqTk5VD+U/kw/gD5u8qsFtPgLWtxdAq0Mew4fK+GBUJl8A+sxbfL5AQAA", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:45:45"}], "recorded_with": "betamax/0.8.0"}