{"recorded_with": "betamax/0.8.0", "http_interactions": [{"request": {"method": "GET", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"]}, "body": {"encoding": "utf-8", "string": ""}, "uri": "https://pypi.python.org/pypi/aio_yamlconfig/json"}, "response": {"status": {"message": "OK", "code": 200}, "url": "https://pypi.python.org/pypi/aio_yamlconfig/json", "headers": {"Content-Length": ["5856"], "Connection": ["keep-alive"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Age": ["76628"], "Fastly-Debug-Digest": ["da3edb07fddb655db954cdf75a247e14ecf063f48a400bd6bb085fc14a73bf5d"], "Accept-Ranges": ["bytes"], "Via": ["1.1 varnish", "1.1 varnish"], "Content-Disposition": ["inline"], "X-Served-By": ["cache-iad2131-IAD, cache-hhn1530-HHN"], "X-Timer": ["S1482488759.875485,VS0,VE87"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "X-Cache": ["HIT, MISS"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-XSS-Protection": ["1; mode=block"], "X-Cache-Hits": ["1, 0"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Content-Type-Options": ["nosniff"], "Cache-Control": ["max-age=600, public"], "X-Frame-Options": ["deny"], "Date": ["Fri, 23 Dec 2016 10:25:59 GMT"], "Server": ["nginx/1.10.2"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-PYPI-LAST-SERIAL": ["2534732"], "Access-Control-Allow-Origin": ["*"]}, "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": null, \n        \"package_url\": \"http://pypi.python.org/pypi/aio_yamlconfig\", \n        \"author\": \"Roman Rader\", \n        \"author_email\": \"antigluk@gmail.com\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"POSIX\", \n        \"version\": \"0.1.1\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"aio_yamlconfig\\n========\\n\\nQuick Start\\n------------------\\n\\nInstall::\\n\\n    pip install aio_yamlconfig\\n\\nOR via setup.py::\\n\\n    python setup.py install\\n\\nYAML configuration parser with validation using Trafaret ( http://trafaret.readthedocs.org/en/latest/ ).\\n\\nIn the easiest setup without config validation, configure you aiohttp application with::\\n\\n    CONFIG_FILE = os.path.join(os.path.dirname(__file__), \\\"config.yaml\\\")\\n    loop.run_until_complete(aio_yamlconfig.setup(app,\\n                                                 config_files=[CONFIG_FILE],\\n                                                 base_dir=os.path.dirname(__file__)))\\n\\nAssume you have `config.yaml`::\\n\\n    DEBUG: True\\n    TEMPLATES_DIR: !BaseDir path/to/templates\\n\\nThen you can access your config as::\\n\\n    if app.config['DEBUG']:\\n        print('some debug information')\\n\\nNotice the `!BaseDir` tag. aio_yamlconfig can do some config transformations for you, in this case it will prepend\\nthe base directory (passed as `base_dir` in setup) to your path. The variable app.config['TEMPLATES_DIR'] will contain\\nthe full path to directory with your templates.\\n\\nValidation\\n--------------------\\n\\nTo validate your config we use the great library Trafaret. You can read more about it in the docs,\\nhttp://trafaret.readthedocs.org/en/latest/ . Here I'll give simple example of the usage.\\n\\nLet's write the validator for `config.yaml` above. We'd like to assure that `DEBUG` value is boolean, and that\\ndirectory by the path `TEMPLATES_DIR` really exists::\\n\\n    import trafaret as t\\n    from aio_yamlconfig.trafarets import ExistingDirectory\\n\\n    CONFIG_TRAFARET = t.Dict({\\n        t.Key('TEMPLATES_DIR'): ExistingDirectory,\\n        t.Key('DEBUG'): t.Bool\\n    })\\n\\n\\nTo enable validation pass the `trafaret_validator` to the setup function::\\n\\n    loop.run_until_complete(aio_yamlconfig.setup(app,\\n                                                 config_files=[CONFIG_FILE],\\n                                                 trafaret_validator=CONFIG_TRAFARET,\\n                                                 base_dir=os.path.dirname(__file__)))\", \n        \"release_url\": \"http://pypi.python.org/pypi/aio_yamlconfig/0.1.1\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 1, \n        \"classifiers\": [\n            \"Development Status :: 4 - Beta\", \n            \"Environment :: Web Environment\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: BSD License\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Programming Language :: Python :: 3.5\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"aio_yamlconfig\", \n        \"license\": \"BSD\", \n        \"summary\": \"YAML configuration parser with validation.\", \n        \"home_page\": \"https://github.com/rrader/aio_yamlconfig\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-04-19T15:47:28\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/6c/31/af045fad46a371e3e2aa1ac26c44fd1a85bc3b7756022bc152344c05eaa1/aio_yamlconfig-0.1.0.tar.gz\", \n                \"md5_digest\": \"3b237538677eed51426a06e968e3f217\", \n                \"downloads\": 456, \n                \"filename\": \"aio_yamlconfig-0.1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"6c/31/af045fad46a371e3e2aa1ac26c44fd1a85bc3b7756022bc152344c05eaa1/aio_yamlconfig-0.1.0.tar.gz\", \n                \"size\": 2953\n            }\n        ], \n        \"0.1.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-04-19T16:54:52\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/84/d1/32f5a7db771cf4f6cfc226e1e6bdcc9b309eedc11a43a9603c476c56dbb2/aio_yamlconfig-0.1.1.tar.gz\", \n                \"md5_digest\": \"181938c1154af1b29d419a9da30ee36b\", \n                \"downloads\": 142, \n                \"filename\": \"aio_yamlconfig-0.1.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"84/d1/32f5a7db771cf4f6cfc226e1e6bdcc9b309eedc11a43a9603c476c56dbb2/aio_yamlconfig-0.1.1.tar.gz\", \n                \"size\": 3010\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-04-19T16:54:52\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/84/d1/32f5a7db771cf4f6cfc226e1e6bdcc9b309eedc11a43a9603c476c56dbb2/aio_yamlconfig-0.1.1.tar.gz\", \n            \"md5_digest\": \"181938c1154af1b29d419a9da30ee36b\", \n            \"downloads\": 142, \n            \"filename\": \"aio_yamlconfig-0.1.1.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"84/d1/32f5a7db771cf4f6cfc226e1e6bdcc9b309eedc11a43a9603c476c56dbb2/aio_yamlconfig-0.1.1.tar.gz\", \n            \"size\": 3010\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:25:59"}, {"request": {"method": "GET", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"]}, "body": {"encoding": "utf-8", "string": ""}, "uri": "https://github.com/rrader/aio_yamlconfig"}, "response": {"status": {"message": "OK", "code": 200}, "url": "https://github.com/rrader/aio_yamlconfig", "headers": {"X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Served-By": ["e68303a089d42a09a9545cb48f3ff7a6"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Runtime": ["0.210576"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Date": ["Fri, 23 Dec 2016 10:26:00 GMT"], "X-GitHub-Request-Id": ["54B1D78B:C3EF:F8BEE5C:585CFBB8"], "Server": ["GitHub.com"], "Content-Encoding": ["gzip"], "X-Content-Type-Options": ["nosniff"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:26:00 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiN2EyNTE2NzgwZTcyZjIyOTI1YjFiMTAzNDllZWUxZTkiLCJzcHlfcmVwbyI6InJyYWRlci9haW9feWFtbGNvbmZpZyIsInNweV9yZXBvX2F0IjoxNDgyNDg4NzYwLCJfY3NyZl90b2tlbiI6InZqK0dJQ0o4U3RHaXY3dWxiTFFTMHMxaE1jQmZnUzZjWm1sTkRLbHhINEE9IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--60fe5b65f5f366f8b10869b27dc7082eec568ded; path=/; secure; HttpOnly"], "Content-Type": ["text/html; charset=utf-8"], "Status": ["200 OK"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-Request-Id": ["e20cd311cf1971bb7cac17fd567ee3de"], "X-XSS-Protection": ["1; mode=block"], "X-Frame-Options": ["deny"], "Cache-Control": ["no-cache"], "Transfer-Encoding": ["chunked"]}, "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:26:00"}, {"request": {"method": "GET", "headers": {"Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"]}, "body": {"encoding": "utf-8", "string": ""}, "uri": "https://raw.githubusercontent.com/rrader/aio_yamlconfig/master/CHANGES"}, "response": {"status": {"message": "OK", "code": 200}, "url": "https://raw.githubusercontent.com/rrader/aio_yamlconfig/master/CHANGES", "headers": {"Content-Length": ["189"], "Connection": ["keep-alive"], "Accept-Ranges": ["bytes"], "Via": ["1.1 varnish"], "X-GitHub-Request-Id": ["C71B4C2A:5438:2E4E938:585CFBB7"], "X-Cache-Hits": ["0"], "X-Timer": ["S1482488760.824394,VS0,VE120"], "Strict-Transport-Security": ["max-age=31536000"], "X-Cache": ["MISS"], "Vary": ["Authorization,Accept-Encoding"], "Expires": ["Fri, 23 Dec 2016 10:31:00 GMT"], "X-Fastly-Request-ID": ["1596559a6fd564993b11f66c4a6b14a589ea7379"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["cache-hhn1532-HHN"], "X-Content-Type-Options": ["nosniff"], "Cache-Control": ["max-age=300"], "X-Frame-Options": ["deny"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "Date": ["Fri, 23 Dec 2016 10:26:00 GMT"], "Content-Encoding": ["gzip"], "Source-Age": ["0"], "Content-Type": ["text/plain; charset=utf-8"], "Access-Control-Allow-Origin": ["*"], "ETag": ["\"e02f553f0b8c5d379adbdbfc6ae50abe472212a7\""], "X-Geo-Block-List": [""]}, "body": {"base64_string": "H4sIAAAAAAAAA52OMQvCMBSE9/cr7ge0oXUQHByKIAgK4iA4SWhe00CahDRW+u9t7aQ4eds97t530vj7KDtbe9cYjV0rnWbrNW1/iujKsTfeoRClKCn/FtGFLcueFaZQFaKxKDcZVkW5FkRAjlt1OkJxYKfY1SPqN1Ohib7DvAXJ4zzOsanxASz+Au5N7BOG5Y9Y+EFOzukMg7RGyTQT+kcIPiaBg0us43J8mtRCGt+mFAS9AHG/t3UvAQAA", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:26:00"}]}