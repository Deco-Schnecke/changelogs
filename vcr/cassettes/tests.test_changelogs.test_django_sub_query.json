{"http_interactions": [{"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/django_sub_query/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "X-Cache": ["MISS, MISS"], "Accept-Ranges": ["bytes"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Connection": ["keep-alive"], "Server": ["nginx/1.10.2"], "Date": ["Fri, 23 Dec 2016 10:40:23 GMT"], "Age": ["0"], "X-Cache-Hits": ["0, 0"], "Content-Length": ["0"], "X-Frame-Options": ["deny"], "Location": ["/pypi/django-sub-query/json"], "X-Content-Type-Options": ["nosniff"], "X-Served-By": ["cache-iad2135-IAD, cache-hhn1545-HHN"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Timer": ["S1482489623.700600,VS0,VE103"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["1c4e1df63e041aac6923cb421b3e380b1f7fc2c4737f7d410d5f4e09af9daf61"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://pypi.python.org/pypi/django_sub_query/json", "body": {"encoding": null, "string": ""}}, "recorded_at": "2016-12-23T10:40:23"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/django-sub-query/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"Cache-Control": ["max-age=600, public"], "Fastly-Debug-Digest": ["2ae4304fbc4fa8e1fc508aae72a067717e5cd0ce2a419dc5c2b9f33c4ebebf26"], "Via": ["1.1 varnish", "1.1 varnish"], "Connection": ["keep-alive"], "X-Cache-Hits": ["1, 0"], "Date": ["Fri, 23 Dec 2016 10:40:23 GMT"], "X-Served-By": ["cache-iad2130-IAD, cache-hhn1545-HHN"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Access-Control-Allow-Origin": ["*"], "X-Timer": ["S1482489623.830593,VS0,VE92"], "X-XSS-Protection": ["1; mode=block"], "X-PYPI-LAST-SERIAL": ["2536259"], "X-Cache": ["HIT, MISS"], "Accept-Ranges": ["bytes"], "Content-Disposition": ["inline"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Server": ["nginx/1.10.2"], "Age": ["4527"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Length": ["8010"], "X-Frame-Options": ["deny"], "X-Content-Type-Options": ["nosniff"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/django-sub-query/json", "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"django\", \n        \"package_url\": \"http://pypi.python.org/pypi/django-sub-query\", \n        \"author\": \"Miroslav Shubernetskiy\", \n        \"author_email\": \"UNKNOWN\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"0.1\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"===============\\nDjango SubQuery\\n===============\\n\\n.. image:: https://badge.fury.io/py/django-sub-query.png\\n    :target: http://badge.fury.io/py/django-sub-query\\n\\n.. image:: https://travis-ci.org/miki725/django-sub-query.png?branch=master\\n    :target: https://travis-ci.org/miki725/django-sub-query\\n\\nDjango app which uses SQL sub-queries to solve some ORM limitations\\n\\n* Free software: MIT license\\n* GitHub: https://github.com/miki725/django-sub-query\\n\\nWhy?\\n----\\n\\nDjango ORM is pretty awesome however it has some limitations.\\nOne of such limitations is the ability to use sub-queries.\\nActually thats not 100% true since Django ORM can use nested queries\\nhowever those subqueries are for either aggregates or are manually\\nprovided by the user via ``QuerySet.extra()``. Such types of subqueries\\nhowever sometimes are not good enough. One such scenario is when\\nyou need to sort by one column however and at the same time you need to use\\ndistinct on a different column. The usual solution is to use subquery\\nwhere inner query will use distinct and outer query will do the sorting::\\n\\n    SELECT *\\n    FROM (\\n      SELECT DISTINCT ON (\\\"table\\\".\\\"foo\\\") <lots of columns here>\\n      FROM \\\"table\\\"\\n    ) \\\"table\\\"\\n    ORDER BY \\\"table\\\".\\\"bar\\\" ASC;\\n\\nThe above however is not supported by vanilla Django ORM.\\nYou can of course use raw SQL queries however that is not desired since\\nthen you loose all of the ORM power (e.g. pagination, etc).\\n\\nOne hack to still use ORM and yet use subquery is use Django ORM\\nto construct inner query and then manually add outer query::\\n\\n    query = Model.objects.filter(...).distinct(...).query\\n    sql, params = query.sql_with_params()\\n    Model.objects.raw(\\n        'SELECT * FROM ({}) \\\"table\\\" ORDER BY \\\"table\\\".\\\"foo\\\"'.format(sql),\\n        params\\n    )\\n\\nThis approach however is also not desired since due to:\\n\\n* not able to use ``select_related()`` when related table\\n  has similar column name(s)\\n* still difficult to do pagination\\n* more logic required to be able to do ``.count()``\\n\\nSolution\\n--------\\n\\nAs you saw above, currently it is difficult to use sub-queries in Django\\nhowever conceptually the solution is pretty simply since we should be able\\nto simply wrap SQL generated by Django ORM within an outer query.\\nThis is exactly what this library does. It hooks up directly into Django's\\n``as_sql()`` ORM method which is responsible for generating SQL and adds\\nouter query when necessary conditions are met.\\n\\nInstalling\\n----------\\n\\nYou can install ``django-sub-query`` using pip::\\n\\n    $ pip install django-sub-query\\n\\nUsing\\n-----\\n\\nSince this library changes a few bits in inner-workings in Django ORM,\\nthere is no simple way to use this library other then completely change\\ndatabase engine::\\n\\n    DATABASES = {\\n        'default': {\\n            'ENGINE': 'sub_query.db.backends.postgis',\\n            ...\\n        },\\n    }\\n\\nCurrently only ``postgis`` backend is supported however please feel free to\\nopen an issue to add support for other backends (or contribute implementation!).\\n\\nOnce the database engine is changed, then you have to make sure the\\nqueryset you are using is a subclass of ``SubQueryGeoQuerySet``::\\n\\n    class ExampleModel(models.Model):\\n        ...\\n        objects = SubQueryGeoQuerySet.as_manager()\\n\\nTesting\\n-------\\n\\nTo run the tests you need to install testing requirements first::\\n\\n    $ make install\\n\\nThen to run tests, you can use ``manage.py`` or simply use Makefile command::\\n\\n    $ python manage.py test\\n    # or\\n    $ make test\\n\\n\\n\\n\\nHistory\\n-------\\n\\n0.1.0 (2015-01-25)\\n~~~~~~~~~~~~~~~~~~~~~\\n\\n* First release on PyPI.\\n\\n\\nCredits\\n-------\\n\\nDevelopment Lead\\n~~~~~~~~~~~~~~~~\\n\\n* Miroslav Shubernetskiy  - https://github.com/miki725\\n\\nContributors\\n~~~~~~~~~~~~\\n\\nNone yet. Why not be the first?\\n\\n\\nLicense\\n-------\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2015, Miroslav Shubernetskiy\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\", \n        \"release_url\": \"http://pypi.python.org/pypi/django-sub-query/0.1\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 0, \n        \"classifiers\": [\n            \"Development Status :: 2 - Pre-Alpha\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Natural Language :: English\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.4\"\n        ], \n        \"name\": \"django-sub-query\", \n        \"bugtrack_url\": null, \n        \"license\": \"MIT\", \n        \"summary\": \"Django app which uses SQL sub-queries to solve some ORM limitations\", \n        \"home_page\": \"https://github.com/miki725/django-sub-query\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-01-25T23:22:20\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/12/55/3eb7e4d6c5be42c6467961931ca995aa45045de7fad36ac7ff4414a0525f/django-sub-query-0.1.tar.gz\", \n                \"md5_digest\": \"3e71b565a88e9922cf799dcefc150802\", \n                \"downloads\": 1658, \n                \"filename\": \"django-sub-query-0.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"12/55/3eb7e4d6c5be42c6467961931ca995aa45045de7fad36ac7ff4414a0525f/django-sub-query-0.1.tar.gz\", \n                \"size\": 16960\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2015-01-25T23:22:20\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/12/55/3eb7e4d6c5be42c6467961931ca995aa45045de7fad36ac7ff4414a0525f/django-sub-query-0.1.tar.gz\", \n            \"md5_digest\": \"3e71b565a88e9922cf799dcefc150802\", \n            \"downloads\": 1658, \n            \"filename\": \"django-sub-query-0.1.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"12/55/3eb7e4d6c5be42c6467961931ca995aa45045de7fad36ac7ff4414a0525f/django-sub-query-0.1.tar.gz\", \n            \"size\": 16960\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:40:23"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://github.com/miki725/django-sub-query", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "Server": ["GitHub.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-GitHub-Request-Id": ["54B1D78B:C3EB:8FDC3FA:585CFF18"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Date": ["Fri, 23 Dec 2016 10:40:24 GMT"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["ef97014f01ea59c1ef337fe51a4d0331"], "X-Frame-Options": ["deny"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Content-Type-Options": ["nosniff"], "X-Request-Id": ["0679ad97c23629a65c6a9c1eb0bf856f"], "Vary": ["X-PJAX", "Accept-Encoding"], "Transfer-Encoding": ["chunked"], "X-Runtime": ["0.083652"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:40:24 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiMGU0YjMwNmJmZGY3MTBkNTQwNDVlNDZlM2YxNThhZjciLCJzcHlfcmVwbyI6Im1pa2k3MjUvZGphbmdvLXN1Yi1xdWVyeSIsInNweV9yZXBvX2F0IjoxNDgyNDg5NjI0LCJfY3NyZl90b2tlbiI6Ii9WbWlJT2h1UHZIMTlTTFllL1Q5cUMyTzkvV3Jzb2RIQk5aWFcwV0ZrUkk9IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--b0a54240bc6a021b272cfd7459abf9e565fbbea8; path=/; secure; HttpOnly"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/miki725/django-sub-query", "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:40:24"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://raw.githubusercontent.com/miki725/django-sub-query/master/HISTORY.rst", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["C71B4C15:5B42:300DCB2:585CFF18"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-XSS-Protection": ["1; mode=block"], "Date": ["Fri, 23 Dec 2016 10:40:24 GMT"], "Source-Age": ["0"], "X-Cache-Hits": ["0"], "X-Served-By": ["cache-hhn1522-HHN"], "X-Fastly-Request-ID": ["51d5ea5613f0544dc7a48c71bc258ebe18bbbc11"], "X-Geo-Block-List": [""], "Strict-Transport-Security": ["max-age=31536000"], "Access-Control-Allow-Origin": ["*"], "Vary": ["Authorization,Accept-Encoding"], "X-Timer": ["S1482489624.655754,VS0,VE120"], "Content-Encoding": ["gzip"], "X-Cache": ["MISS"], "Accept-Ranges": ["bytes"], "Cache-Control": ["max-age=300"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "ETag": ["\"df2fba287d7e4167e7f095b470d49fa8ee4bac0e\""], "Content-Type": ["text/plain; charset=utf-8"], "Content-Length": ["97"], "X-Content-Type-Options": ["nosniff"], "Expires": ["Fri, 23 Dec 2016 10:45:24 GMT"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/miki725/django-sub-query/master/HISTORY.rst", "body": {"base64_string": "H4sIAAAAAAAAA9PTU7BKzkjMS0/NyU+34uLyyCwuyS+q5NKFAC4uAz1DPQMFDSMDQ1NdA0NdI1NNrjpsgItLS8Ets6i4RKEoNSc1sThVIT9PIaAywFOPCwDxuUfyZAAAAA==", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:40:24"}], "recorded_with": "betamax/0.8.0"}