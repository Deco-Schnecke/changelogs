{"recorded_with": "betamax/0.8.0", "http_interactions": [{"recorded_at": "2016-12-23T10:27:15", "response": {"body": {"string": "", "encoding": null}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://pypi.python.org/pypi/allanon/json", "headers": {"X-Clacks-Overhead": ["GNU Terry Pratchett"], "Age": ["0"], "Date": ["Fri, 23 Dec 2016 10:27:15 GMT"], "Server": ["nginx/1.10.2"], "X-Frame-Options": ["deny"], "X-Cache-Hits": ["0, 0"], "Connection": ["keep-alive"], "X-Cache": ["MISS, MISS"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Accept-Ranges": ["bytes"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "Location": ["/pypi/Allanon/json"], "X-Timer": ["S1482488835.156411,VS0,VE107"], "Via": ["1.1 varnish", "1.1 varnish"], "Content-Length": ["0"], "X-Permitted-Cross-Domain-Policies": ["none"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "X-Served-By": ["cache-iad2131-IAD, cache-hhn1520-HHN"], "Fastly-Debug-Digest": ["c755b15936a0806f6e77654280716400278f79f989abf821b39954d1d9353346"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://pypi.python.org/pypi/allanon/json"}}, {"recorded_at": "2016-12-23T10:27:15", "response": {"body": {"string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"crawler robot spider downloader parser\", \n        \"package_url\": \"http://pypi.python.org/pypi/Allanon\", \n        \"author\": \"keul\", \n        \"author_email\": \"luca@keul.it\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"0.2\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \".. contents::\\n\\nIntroduction\\n============\\n\\nLet's say that you want to access a slow streaming site to see something (obviously: something not\\nprotected by copyright).\\n\\nThe streaming site use URLs in that format:\\n\\n    http://legal-streaming-site.org/program-name/season5/episode4/\\n\\nEvery page contains some HTML code like the following::\\n\\n    ....\\n        <div id=\\\"video-container\\\">\\n           ...\\n           <embed src=\\\"http://someotherurl.org/qwerty.flv\\\" ... \\n           ...\\n        <div>\\n    ...\\n\\nLet say this is the URL for the episode 4 of the fifth season of your program.\\nYou know that this program has 6 seasons with 22 episode each.\\n\\nAs said before: this site is very slow so you prefer downloading episodes in background\\nthen watch them later.\\n\\nTo download them you need to watch the HTML inside the page and get some resources\\n(commonly: and FLV file).\\nThe best would be download *all* episode in a single (long running) operation instead of manually\\ndoing it.\\n\\n**Allanon** will help you exactly in such tasks.\\nYou simply need to provide it:\\n\\n* a simple URL or a *dynamic URL pattern*\\n* a *query selector* for resources inside the page\\n\\nQuick example (you can keep it single lined)::\\n\\n    $ allanon --search=\\\"#movie-container embed\\\" \\\\\\n    > \\\"http://legal-streaming-site.org/program-name/season{1:6}/episode{1:22}\\\"\\n\\nDocumentation\\n=============\\n\\nInstallation\\n------------\\n\\nYou can use `distribute`__ or `pip`__ to install the utility in your Python environment.\\n\\n__ http://pypi.python.org/pypi/distribute\\n__ http://pypi.python.org/pypi/pip\\n\\n::\\n\\n    $ easy_install Allanon\\n\\nor alternately::\\n\\n    $ pip install Allanon\\n\\nInvocation\\n----------\\n\\nAfter installing you will be able to run the ``allanon`` script from command line.\\nFor example: run the following for access the utility help::\\n\\n    $ allanon --help\\n\\nBasic usage (you probably don't need Allanon at all for this)\\n-------------------------------------------------------------\\n\\nThe ``allanon`` script accept an URL (or a list of URLs) to be downloaded::\\n\\n    $ allanon http://myhost/folder/image1.jpg http://myhost/folder/image2.jpg ...\\n\\nEvery command line URL given to Allanon can be a simple URL or an *URL model* like the following::\\n\\n    $ allanon \\\"http://myhost/folder/image{1:50}.jpg\\\"\\n\\nThis will crawl 50 different URLs automatically. \\n\\nMain usage (things became interesting now)\\n------------------------------------------\\n\\nThe ``allanon`` script take an additional ``--search`` parameter (see the first example given\\nabove).\\nWhen you provide it, you are meaning:\\n\\n    \\\"*I don't want to download those URLs directly, but those URLs contain links to\\n    file that I really want*\\\".\\n\\nThe search parameter format must be CSS 3 compatible, like the one supported the famous\\n`jQuery library`__, and it's based onto the `pyquery`__ library.\\nSee it's documentation for more details about what you can look for.\\n\\n__ http://api.jquery.com/category/selectors/\\n__ http://packages.python.org/pyquery/\\n\\nExtreme usage\\n-------------\\n\\nThe ``--search`` parameter can be provided multiple times::\\n\\n    $ allanon --search=\\\"ul.image-repos a\\\" \\\\\\n    > --search=\\\"div.image-containers img\\\" \\\\\\n    > \\\"http://image-repository-sites.org/category{1:30}.html\\\"\\n\\nWhen you provide (for example) two different search parameters, you are meaning:\\n\\n    \\\"*I don't want to download resources at given URLs. Those URLs contain links to secondary pages,\\n    and inside those pages there're links to resources I want to download*\\\"\\n\\nFilters are applied in the given order, so:\\n\\n* Allanon will search inside 30 pages named *category1.html*, *category2.html*, ...\\n* inside those pages, Allanon will look for all links inside ``ul`` tags with CSS class\\n  *image-repos* and recursively crawl them.\\n* inside those pages, Allanon will looks for images inside ``div`` with class *image-containers*.\\n* images will be downloaded.\\n\\nPotentially you can continue this way, providing a third level of filters, and so on.\\n\\nNaming and storing downloaded resources\\n---------------------------------------\\n\\nBy default Allanon download all files in the current directory so a filename conflict\\nis possible.\\nYou can control how/where download, changing dynamically the filename using the\\n``--filename`` option and/or change the directory where to store files with the\\n``--directory`` option.\\n\\nAn example::\\n\\n    $ allanon --filename=\\\"%HOST-%INDEX-section%1-version%3-%FULLNAME\\\" \\\\\\n    > \\\"http://foo.org/pdf-repo-{1:10}/file{1:50}.pdf?version={0:3}\\\"\\n\\nAs you seen ``--filename`` accept some *markers* that can be used to better organize\\nresources:\\n\\n``%HOST``\\n    Will be replaced with the hostname used in the URL.\\n``%INDEX``\\n    Is a progressive from 1 to the number of downloaded resources.\\n``%X``\\n    When using dynamic URLs models you can refer to the current number of an URL\\n    section.\\n    \\n    In this case \\\"%1\\\" is the current \\\"pdf-repo-*x*\\\" number and \\\"%3\\\" is the \\\"version\\\"\\n    parameter value.\\n``%FULLNAME``\\n    The original filename (the one used if ``--filename`` is not provided).\\n    \\n    You can also use the ``%NAME`` and ``%EXTENSION`` to get only the name of the file\\n    (without extension) or simply the extension.\\n\\nThe ``--directory`` option can be a simple directory name or a directory path (in unix-like\\nformat, for example \\\"``foo/bar/baz``\\\").\\n\\nAn example::\\n\\n    $ allanon --directory=\\\"/home/keul/%HOST/%1\\\" \\\\\\n    > \\\"http://foo.org/pdf-repo-{1:10}/file{1:50}.pdf\\\" \\\\\\n    > \\\"http://baz.net/pdf-repo-{1:10}/file{1:50}.pdf\\\"\\n\\nAlso the ``--directory`` option supports some of the markers: you can use ``%HOST``, ``%INDEX`` and ``%X``\\nwith the same meaning given above.\\n\\nTODO\\n====\\n\\nThis utility is in alpha stage, a lot of thing can goes wrong when downloading and many features\\nare missing:\\n\\n* verbosity controls\\n* bandwidth control\\n* multi-thread (let's look at `grequests`__)\\n* Python 3\\n\\n__ https://github.com/kennethreitz/grequests\\n\\nIf you find other bugs or want to ask for missing features, use the `product's issue tracker`__.\\n\\n__ https://github.com/keul/Allanon/issues\\n\\n\\nChangelog\\n=========\\n\\n0.2 (2014-01-02)\\n----------------\\n\\n- Do not crawl or download when on error pages\\n- Handle duplicate filename when downloading resources:\\n  added the ``--check-duplicate`` option\\n- Application specific user agent header (configurable\\n  through ``--user-agent`` option)\\n- The ``--directory`` option can be a path and so create\\n  intermediate directories, and accept markers\\n- More efficient memory usage\\n- Show progress bar when getting resources\\n  (now requires `progress`__)\\n- Fixed problem when getting quoted filename from response\\n  header\\n- Added the ``--timeout`` option\\n- Added the ``--sleep`` option\\n\\n__ https://pypi.python.org/pypi/progress\\n\\n0.1 (2013-01-05)\\n----------------\\n\\n- first release\", \n        \"release_url\": \"http://pypi.python.org/pypi/Allanon/0.2\", \n        \"downloads\": {\n            \"last_month\": 1, \n            \"last_week\": 1, \n            \"last_day\": 1\n        }, \n        \"_pypi_ordering\": 1, \n        \"classifiers\": [\n            \"Development Status :: 3 - Alpha\", \n            \"License :: OSI Approved :: GNU General Public License (GPL)\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Topic :: Internet :: WWW/HTTP\", \n            \"Topic :: System :: Shells\", \n            \"Topic :: Utilities\"\n        ], \n        \"bugtrack_url\": \"https://github.com/keul/Allanon/issues\", \n        \"name\": \"Allanon\", \n        \"license\": \"GPL\", \n        \"summary\": \"A Web crawler that visit a predictable set of URLs, and automatically download resources you want from them\", \n        \"home_page\": \"https://github.com/keul/Allanon\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-01-05T18:13:29\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/82/fa/f7a53a652f06b62aabd9c1c4176d77a10be779dcd56b04e42091696e6f51/Allanon-0.1.zip\", \n                \"md5_digest\": \"c1ac97d8dbe1e7f3ab6211bf1f2d29ea\", \n                \"downloads\": 4354, \n                \"filename\": \"Allanon-0.1.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"82/fa/f7a53a652f06b62aabd9c1c4176d77a10be779dcd56b04e42091696e6f51/Allanon-0.1.zip\", \n                \"size\": 30153\n            }\n        ], \n        \"0.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-01-02T21:44:45\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a9/c1/e0e038858fdbe4709461811dda106f8e6d8b3d633809ebe54046791e72ae/Allanon-0.2.zip\", \n                \"md5_digest\": \"14619dbf30151b42c1aa13e7eca550f5\", \n                \"downloads\": 2978, \n                \"filename\": \"Allanon-0.2.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a9/c1/e0e038858fdbe4709461811dda106f8e6d8b3d633809ebe54046791e72ae/Allanon-0.2.zip\", \n                \"size\": 34868\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2014-01-02T21:44:45\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/a9/c1/e0e038858fdbe4709461811dda106f8e6d8b3d633809ebe54046791e72ae/Allanon-0.2.zip\", \n            \"md5_digest\": \"14619dbf30151b42c1aa13e7eca550f5\", \n            \"downloads\": 2978, \n            \"filename\": \"Allanon-0.2.zip\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"a9/c1/e0e038858fdbe4709461811dda106f8e6d8b3d633809ebe54046791e72ae/Allanon-0.2.zip\", \n            \"size\": 34868\n        }\n    ]\n}", "encoding": "UTF-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/Allanon/json", "headers": {"X-Frame-Options": ["deny"], "X-PYPI-LAST-SERIAL": ["2535227"], "Access-Control-Allow-Origin": ["*"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Accept-Ranges": ["bytes"], "X-Content-Type-Options": ["nosniff"], "X-Timer": ["S1482488835.290509,VS0,VE1"], "Via": ["1.1 varnish", "1.1 varnish"], "X-Served-By": ["cache-iad2127-IAD, cache-hhn1520-HHN"], "Content-Type": ["application/json; charset=\"UTF-8\""], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Age": ["62623"], "Date": ["Fri, 23 Dec 2016 10:27:15 GMT"], "Fastly-Debug-Digest": ["ed0d22bc998a21f2f1e88c407b9ff9483bbbf1ed9d028cc95725c90aeb33122e"], "Server": ["nginx/1.10.2"], "X-XSS-Protection": ["1; mode=block"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Content-Length": ["10702"], "X-Permitted-Cross-Domain-Policies": ["none"], "X-Cache-Hits": ["1, 1"], "Content-Disposition": ["inline"], "X-Cache": ["HIT, HIT"], "Connection": ["keep-alive"], "Cache-Control": ["max-age=600, public"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://pypi.python.org/pypi/Allanon/json"}}, {"recorded_at": "2016-12-23T10:27:16", "response": {"body": {"base64_string": "", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/keul/Allanon", "headers": {"Content-Encoding": ["gzip"], "Date": ["Fri, 23 Dec 2016 10:27:16 GMT"], "Server": ["GitHub.com"], "X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["54B1D78B:C3EF:F8C3CEF:585CFC03"], "Transfer-Encoding": ["chunked"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["X-PJAX", "Accept-Encoding"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Request-Id": ["2cd8b02c4e738c1571ec10948818e7ef"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-Content-Type-Options": ["nosniff"], "Status": ["200 OK"], "X-Runtime": ["0.306991"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["d0e230454cb69aa01d4f86fc3a57b17f"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:27:16 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiNjM4YTZhNjIxMWRkNTc3YzZkZjljMzNhNzMwZTUyZTIiLCJzcHlfcmVwbyI6ImtldWwvQWxsYW5vbiIsInNweV9yZXBvX2F0IjoxNDgyNDg4ODM1LCJfY3NyZl90b2tlbiI6Inl4U3lSK3owNFR4SEhubVptUzVLSVNPZ0J3cXBPelltSmpwWFdNdkltV3c9IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--4653ed23f393d155046b72d015e616fcf9540699; path=/; secure; HttpOnly"], "Cache-Control": ["no-cache"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://github.com/keul/Allanon"}}, {"recorded_at": "2016-12-23T10:27:16", "response": {"body": {"base64_string": "", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/keul/Allanon/tree/master/docs", "headers": {"Content-Encoding": ["gzip"], "Date": ["Fri, 23 Dec 2016 10:27:16 GMT"], "Server": ["GitHub.com"], "X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["54B1D78B:C3EF:F8C3D50:585CFC04"], "Transfer-Encoding": ["chunked"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["X-PJAX", "Accept-Encoding"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Request-Id": ["6b01b5332ae23844660f9b71652c8073"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-Content-Type-Options": ["nosniff"], "Status": ["200 OK"], "X-Runtime": ["0.043093"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["0fa1dd73bc942661bb2e2dc21f3464aa"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiNjM4YTZhNjIxMWRkNTc3YzZkZjljMzNhNzMwZTUyZTIiLCJzcHlfcmVwbyI6ImtldWwvQWxsYW5vbiIsInNweV9yZXBvX2F0IjoxNDgyNDg4ODM2LCJfY3NyZl90b2tlbiI6Inl4U3lSK3owNFR4SEhubVptUzVLSVNPZ0J3cXBPelltSmpwWFdNdkltV3c9In0%3D--e952d5dbf6d770bdb7562c204e5389e1b01f3394; path=/; secure; HttpOnly"], "Cache-Control": ["no-cache"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiNjM4YTZhNjIxMWRkNTc3YzZkZjljMzNhNzMwZTUyZTIiLCJzcHlfcmVwbyI6ImtldWwvQWxsYW5vbiIsInNweV9yZXBvX2F0IjoxNDgyNDg4ODM1LCJfY3NyZl90b2tlbiI6Inl4U3lSK3owNFR4SEhubVptUzVLSVNPZ0J3cXBPelltSmpwWFdNdkltV3c9IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--4653ed23f393d155046b72d015e616fcf9540699; logged_in=no"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://github.com/keul/Allanon/tree/master/docs"}}, {"recorded_at": "2016-12-23T10:27:16", "response": {"body": {"base64_string": "H4sIAAAAAAAAA21TS2/bMAy++1fwmAJzXt0uBXYoNhQbhgEDtnusSLQlxBJVSkKWfz/Kmd2lq28SKX4Pfv5kVRhwpKH5OH9Ns13fw6oExhFVQnPXtK++pmnhB3JP7F0YQEHXfcPLkRSbryEjc4m56+Bs3YigKQTUWRobgEzSzZiosEYIdAaVTiCDIDkfxwukk4uxDs1W5aVT8B6NQSO3KGBtS32fsGJQzI6C1L+oYARNjYmApI3h5IIB6hcCFDaavC/BaVVPIESJk7A6u2ypZFBH4nwFR4hMGlOqduxhtd/u3rfbXbvdv23HZxI1GTSr8wgix9A5jKSMmIABZjCIasD0wtaUOFY2CL1YFZTHa//8unKZPUgPwlTduKAt6lO7DPnXjsd4vaw6U0TteqehJLFFGIQMFpWRw0rM6d1QWB1HrPuxTGWw0/Ta3U7dy2DRDr/+ghvH4irxZamCVgGOsgORmS2IRJBlaEbhJrNdjYZH46re+bXD9G7qVFpjzOAVn5CrRd+JEbAX3q4S9ugFSyQII6n+tJIdWdEg9iQ4Kr4aN2DON6YJ7qrGjPG5CGSCbn7UHQ5VzpP7LY7KpRjgb4c8F8pSW1bTM/k6OVJIVdDVw/+ymZ1HSdPNNm4a0ogYX8rN4QA255geNpt4iW4dLxLHsCYepvNmZlyjuJuieD9F8cPbUewdp/rrTH9v8wetsLfM4gMAAA==", "encoding": "utf-8"}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/keul/Allanon/master/docs/HISTORY.txt", "headers": {"Content-Encoding": ["gzip"], "Expires": ["Fri, 23 Dec 2016 10:32:16 GMT"], "ETag": ["\"a2305a22e5d28f85d57bd69cbe39ab6da277b7fb\""], "X-Frame-Options": ["deny"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "X-Cache": ["MISS"], "X-Fastly-Request-ID": ["aa09f2e87bb030736b03512fe99b050785623874"], "Accept-Ranges": ["bytes"], "X-Content-Type-Options": ["nosniff"], "X-Geo-Block-List": [""], "Cache-Control": ["max-age=300"], "Via": ["1.1 varnish"], "Access-Control-Allow-Origin": ["*"], "X-Served-By": ["cache-hhn1525-HHN"], "Content-Type": ["text/plain; charset=utf-8"], "Date": ["Fri, 23 Dec 2016 10:27:16 GMT"], "Source-Age": ["0"], "X-XSS-Protection": ["1; mode=block"], "Vary": ["Authorization,Accept-Encoding"], "X-GitHub-Request-Id": ["C71B4C18:C468:5FCA414:585CFC04"], "Content-Length": ["535"], "X-Cache-Hits": ["0"], "X-Timer": ["S1482488836.417534,VS0,VE118"], "Connection": ["keep-alive"], "Strict-Transport-Security": ["max-age=31536000"]}}, "request": {"body": {"string": "", "encoding": "utf-8"}, "method": "GET", "headers": {"User-Agent": ["python-requests/2.12.4"], "Connection": ["keep-alive"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate"]}, "uri": "https://raw.githubusercontent.com/keul/Allanon/master/docs/HISTORY.txt"}}]}