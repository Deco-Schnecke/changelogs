{"http_interactions": [{"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://pypi.python.org/pypi/play_scraper/json", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"Cache-Control": ["max-age=600, public"], "Fastly-Debug-Digest": ["8788a779bb3e366f7238e1f689785c88127738b3231500a8453eadc48395e16a"], "Via": ["1.1 varnish", "1.1 varnish"], "Connection": ["keep-alive"], "X-Cache-Hits": ["1, 1"], "Date": ["Fri, 23 Dec 2016 10:43:32 GMT"], "X-Served-By": ["cache-iad2128-IAD, cache-hhn1535-HHN"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Access-Control-Allow-Origin": ["*"], "X-Timer": ["S1482489812.875540,VS0,VE0"], "X-XSS-Protection": ["1; mode=block"], "X-PYPI-LAST-SERIAL": ["2535803"], "X-Cache": ["HIT, HIT"], "Accept-Ranges": ["bytes"], "Content-Disposition": ["inline"], "Public-Key-Pins": ["max-age=600; includeSubDomains; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"5C8kvU039KouVrl52D0eZSGf4Onjo4Khs8tmyTlV3nU=\"; pin-sha256=\"lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\"; pin-sha256=\"TUDnr0MEoJ3of7+YliBMBVFB4/gJsv5zO7IxD9+YoWI=\"; pin-sha256=\"x4QzPSC810K5/cMjb05Qm4k3Bw5zBn4lTdO/nEW/Td4=\";"], "Server": ["nginx/1.10.2"], "Age": ["40455"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Length": ["16404"], "X-Frame-Options": ["deny"], "X-Content-Type-Options": ["nosniff"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/play_scraper/json", "body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"\", \n        \"package_url\": \"http://pypi.python.org/pypi/play_scraper\", \n        \"author\": \"Daniel Liu\", \n        \"author_email\": \"idaniel.liu@gmail.com\", \n        \"download_url\": \"\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"0.1.11\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"Play Store Scraper\\n==================\\n\\nScrapes and parses application data from the Google Play Store.\\n\\nInstallation\\n------------\\n\\nEither install requirements in a virtualenv or run the setup.\\n\\n::\\n\\n    pip install play-scraper\\n\\nUsage\\n-----\\n\\n-  `details <#details>`__: Fetch an application's details\\n-  `collection <#collection>`__: Fetch a list of applications and their\\n   details.\\n-  `developer <#developer>`__: Fetch a developer's offered applications.\\n-  `suggestions <#suggestions>`__: Fetch a list of query string\\n   suggestions.\\n-  `search <#search>`__: Fetch applications matching a search query.\\n-  `similar <#similar>`__: Fetch an application's similar apps.\\n\\ndetails\\n~~~~~~~\\n\\nFetch an application's details.\\n\\nOptions:\\n\\n-  ``app_id`` the app id to get, e.g. ``com.android.chrome`` for Google\\n   Chrome.\\n\\n.. code:: python\\n\\n    >>> import play_scraper\\n    >>> print play_scraper.details('com.android.chrome')\\n    { \\n        'app_id': 'com.android.chrome',\\n        'category': ['COMMUNICATION'],\\n        'content_rating': u'Everyone',\\n        'current_version': u'Varies with device',\\n        'description': u'Browse fast on your Android phone and tablet with the Google Chrome browser you love on desktop. Pick up where ...',\\n        'description_html': u'Browse fast on your Android phone and tablet with the Google Chrome browser you love on desktop. Pick up where you left off on your other devices with tab sync, search by voice, and save up to 50% of data usage while browsing. <br/>',\\n        'developer': u'Google Inc.',\\n        'developer_address': u'1600 Amphitheatre Parkway, Mountain View 94043',\\n        'developer_email': 'apps-help@google.com',\\n        'developer_id': '5700313618786177705',\\n        'developer_url': 'http://www.google.com/chrome/android',\\n        'editors_choice': False,\\n        'free': True,\\n        'histogram': { 1: 353226, 2: 159357, 3: 328319, 4: 738938, 5: 2691357},\\n        'iap': False,\\n        'iap_range': None,\\n        'icon': 'https://lh3.ggpht.com/O0aW5qsyCkR2i7Bu-jUU1b5BWA_NygJ6ui4MgaAvL7gfqvVWqkOBscDaq4pn-vkwByUx',\\n        'installs': [1000000000, 5000000000],\\n        'interactive_elements': [u'Unrestricted Internet'],\\n        'price': '0',\\n        'recent_changes': u'Bug fixes and speedy performance improvements.',\\n        'required_android_version': u'Varies with device',\\n        'reviews': 4271197,\\n        'score': 4.230531692504883,\\n        'screenshots': [ 'https://lh4.ggpht.com/6D21o4j_OJUnVCTARqcdajTmX_5_8UJtzVuN91smALZBuMq0p3MIvwZj2qofXeqmFIU=h900-rw', ...],\\n        'size': u'Varies with device',\\n        'thumbnails': [ 'https://lh4.ggpht.com/6D21o4j_OJUnVCTARqcdajTmX_5_8UJtzVuN91smALZBuMq0p3MIvwZj2qofXeqmFIU=h310-rw', ...],\\n        'title': u'Chrome Browser - Google',\\n        'top_developer': True,\\n        'updated': u'March 25, 2016',\\n        'url': 'https://play.google.com/store/apps/details?id=com.android.chrome',\\n        'video': None\\n    }\\n\\ncollection\\n~~~~~~~~~~\\n\\nFetch a list of applications from a collection, optionally filtered by\\ncategory.\\n\\nOptions:\\n\\n-  ``collection`` a\\n   `collection <https://github.com/danieliu/play-scraper/blob/master/play_scraper/lists.py#L3>`__\\n   to fetch.\\n-  ``category`` (default None) a\\n   `category <https://github.com/danieliu/play-scraper/blob/master/play_scraper/lists.py#L12>`__\\n   to filter by.\\n-  ``results`` (default 60, max 120) the number of apps to fetch.\\n-  ``page`` (default 0) the page number to fetch. Limit:\\n   ``page * results <= 500``.\\n-  ``age`` (default None) an `age\\n   range <https://github.com/danieliu/play-scraper/blob/master/play_scraper/lists.py#L67>`__\\n   to filter by. (Only for FAMILY categories)\\n-  ``detailed`` (default False) if True, sends a request per app to\\n   fetch the full `details <#details>`__.\\n\\n.. code:: python\\n\\n    >>> import play_scraper\\n    >>> print play_scraper.collection(\\n            collection='TRENDING',\\n            category='GAME_RACING',\\n            results=5,\\n            page=1)\\n    [ { 'app_id': 'com.gigabitgames.offroad',\\n        'description': u'The most realistic off-road game on Android. Its your world, you conquer it.',\\n        'developer': 'Gigabit Games',\\n        'developer_id': '9169751687364421253',\\n        'free': True,\\n        'icon': 'https://lh3.googleusercontent.com/73m8eqn_YUzbTMV986wG2C_zd8_PNSR0GBxf_d6GKbBLa0gUA8OYy0dOP9PCKFYMyX0',\\n        'price': '0',\\n        'score': '4.2',\\n        'title': 'Gigabit Off-Road',\\n        'url': 'https://play.google.com/store/apps/details?id=com.gigabitgames.offroad'},\\n      { 'app_id': 'com.sbkgames.rallyracerdirt',\\n        'description': u'Drift like a pro, race in dirt, hill climb, asphalt drift, be a rally racer.',\\n        'developer': 'sbkgames',\\n        'developer_id': None,\\n        'free': True,\\n        'icon': 'https://lh3.googleusercontent.com/BiONHFMzbVA32q5bvo9L1YHD4Ss02VSF5IZxCqWgdULZp2rKmeaMpBWRwMd2XlvxLw',\\n        'price': '0',\\n        'score': '4.2',\\n        'title': 'Rally Racer Dirt',\\n        'url': 'https://play.google.com/store/apps/details?id=com.sbkgames.rallyracerdirt'}, ...]\\n\\ndeveloper\\n~~~~~~~~~\\n\\nFetch a developer's offered applications.\\n\\nOptions:\\n\\n-  ``developer`` the developer name to fetch applications, e.g.\\n   ``Disney``. (Case sensitive)\\n-  ``results`` (default 24, max 120) the number of apps to fetch.\\n   (Developer may have more or less published apps)\\n-  ``page`` (default 0) the page number to fetch. Limit:\\n   ``0 < (results // 20) * page < 12``\\n-  ``detailed`` (default False) if True, sends a request per app to\\n   fetch the full details as in `details <#details>`__.\\n\\n.. code:: python\\n\\n    >>> import play_scraper\\n    >>> print play_scraper.developer('Disney', results=5)\\n    [ { 'app_id': 'com.disney.disneycrossyroad_goo',\\n        'description': u'An all-new take on the ultimate 8-bit endless adventure to cross the road!',\\n        'developer': 'Disney',\\n        'developer_id': None,\\n        'free': True,\\n        'icon': 'https://lh3.googleusercontent.com/mHHQ-GA_hu8shAEtzj8trGBOJK7dtMrmV4XXvjl49MQbIDHytb8kQenB4IaUB9NvYA',\\n        'price': '0',\\n        'score': '4.5',\\n        'title': 'Disney Crossy Road',\\n        'url': 'https://play.google.com/store/apps/details?id=com.disney.disneycrossyroad_goo'},\\n      { 'app_id': 'com.disney.disneymoviesanywhere_goo',\\n        'description': u'Watch Disney, Disney/Pixar, Marvel & Star Wars movies w/ Disney Movies Anywhere.',\\n        'developer': 'Disney',\\n        'developer_id': None,\\n        'free': True,\\n        'icon': 'https://lh3.googleusercontent.com/J75JRuJvlOQ9K5H7RpSyGu1q909Qy6GJs9RW51KlE2CvyfPX14SGG-HRGnsfDfIETfg',\\n        'price': '0',\\n        'score': '3.9',\\n        'title': 'Disney Movies Anywhere',\\n        'url': 'https://play.google.com/store/apps/details?id=com.disney.disneymoviesanywhere_goo'}, ...]\\n\\nsuggestions\\n~~~~~~~~~~~\\n\\nFetch a list of autocompleted query suggestions.\\n\\n.. code:: python\\n\\n    >>> import play_scraper\\n    >>> print play_scraper.suggestions('cat')\\n    [u'cat games', u'cat simulator', u'cat sounds', u'cat games for cats']\\n\\nsearch\\n~~~~~~\\n\\nFetch a list of applications matching a search query. Retrieves ``20``\\napps at a time.\\n\\nOptions:\\n\\n-  ``query`` query term(s) to search for.\\n-  ``page`` (default 0, max 12) page number of results to retrieve.\\n-  ``detailed`` (default False) if True, sends a request per app to\\n   fetch the full details as in `details <#details>`__.\\n\\n.. code:: python\\n\\n    >>> import play_scraper\\n    >>> print play_scraper.search('dogs', page=2)\\n    [ { 'app_id': 'jp.pascal.mydogmyroomfree',\\n        'description': u'Take a picture of the room as you like, and keep a cute puppy in your own room!!',\\n        'developer': 'pascal inc.',\\n        'developer_id': None,\\n        'free': True,\\n        'icon': 'https://lh5.ggpht.com/WlGXYIHU0cljFIaNBloRHtznuBo3pAt4B1ynnfiXPTsjoqKDfX5Rxo9U15iDZXuRZe32',\\n        'price': '0',\\n        'score': '3.7',\\n        'title': 'My Dog My Room Free',\\n        'url': 'https://play.google.com/store/apps/details?id=jp.pascal.mydogmyroomfree'},\\n      { 'app_id': 'com.sweefitstudios.drawdogs',\\n        'description': u'An app that teaches you how to draw dogs step by step',\\n        'developer': 'Sweefit Studios',\\n        'developer_id': '8890723712967774017',\\n        'free': True,\\n        'icon': 'https://lh3.googleusercontent.com/qt6hpHGwu6-viUAKkw9nv3iH_IQYMvBfHwc1X-TbcjOOgbqH67K6SJITi64FzBhQRKk',\\n        'price': '0',\\n        'score': '4.3',\\n        'title': 'How to Draw Dogs',\\n        'url': 'https://play.google.com/store/apps/details?id=com.sweefitstudios.drawdogs'}, ...]\\n\\nsimilar\\n~~~~~~~\\n\\nFetch a list of similar applications.\\n\\nOptions:\\n\\n-  ``app_id`` the app id to get, e.g. ``com.supercell.clashofclans`` for\\n   Clash of Clans.\\n-  ``results`` (default 24, max 60) the number of apps to fetch.\\n-  ``detailed`` (default False) if True, sends a request per app to\\n   fetch the full details as in `details <#details>`__.\\n\\n.. code:: python\\n\\n    >>> import play_scraper\\n    >>> print play_scraper.similar('com.supercell.clashofclans', results=5)\\n    [ { 'app_id': 'com.supercell.clashroyale',\\n        'description': u'Clash Royale is a real-time, head-to-head battle game set in the Clash Universe.',\\n        'developer': 'Supercell',\\n        'developer_id': '6715068722362591614',\\n        'free': True,\\n        'icon': 'https://lh3.googleusercontent.com/K-MNjDiO2WwRNwJqPZu8Wd5eOmFEjLYkEEgjZlv35hTiua_VylRPb04Lig3YZXLERvI',\\n        'price': '0',\\n        'score': '4.5',\\n        'title': 'Clash Royale',\\n        'url': 'https://play.google.com/store/apps/details?id=com.supercell.clashroyale'},\\n      { 'app_id': 'com.hcg.cok.gp',\\n        'description': u'Clash of Kings - Build a Kingdom & fight in MMO combat to stand against the ages',\\n        'developer': 'Elex Wireless',\\n        'developer_id': None,\\n        'free': True,\\n        'icon': 'https://lh5.ggpht.com/wjNgsM2TGmbxbN-jDNAUNTIIq32OSx83Tx4Vl3jOudqzUEi1yTVCcMtnoGnZGGyXRA',\\n        'price': '0',\\n        'score': '4.2',\\n        'title': 'Clash of Kings',\\n        'url': 'https://play.google.com/store/apps/details?id=com.hcg.cok.gp'}, ...]\\n\\nTests\\n-----\\n\\nRun tests:\\n\\n::\\n\\n    python -m unittest discover\", \n        \"release_url\": \"http://pypi.python.org/pypi/play_scraper/0.1.11\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 1, \n        \"requires_dist\": [\n            \"beautifulsoup4 (>=4.4.1)\", \n            \"grequests (>=0.3.0)\", \n            \"lxml (>=3.6.0)\", \n            \"requests (>=2.9.1)\"\n        ], \n        \"classifiers\": [\n            \"Development Status :: 3 - Alpha\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Natural Language :: English\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3.5\"\n        ], \n        \"name\": \"play_scraper\", \n        \"bugtrack_url\": null, \n        \"license\": \"MIT License\", \n        \"summary\": \"Google Play Store application scraper\", \n        \"home_page\": \"https://github.com/danieliu/play-scraper\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.1.10\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-05-06T07:27:52\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/a6/d5/e1fa6566f177aa0476e9a0f0a467c86a12bc38cd9bfa2156ceec70bdc5a0/play_scraper-0.1.10-py2.py3-none-any.whl\", \n                \"md5_digest\": \"e6ed1635d7b30e0139369bed7518ef4d\", \n                \"downloads\": 419, \n                \"filename\": \"play_scraper-0.1.10-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"a6/d5/e1fa6566f177aa0476e9a0f0a467c86a12bc38cd9bfa2156ceec70bdc5a0/play_scraper-0.1.10-py2.py3-none-any.whl\", \n                \"size\": 18801\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-05-06T07:28:17\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/d7/ac/4a241a00ae3a57d0143a7770780eee432ce6fadfbe32ef74db3d3ccaa55f/play_scraper-0.1.10.tar.gz\", \n                \"md5_digest\": \"92a7f0ce54a596d84918e8d6aaba5792\", \n                \"downloads\": 91, \n                \"filename\": \"play_scraper-0.1.10.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"d7/ac/4a241a00ae3a57d0143a7770780eee432ce6fadfbe32ef74db3d3ccaa55f/play_scraper-0.1.10.tar.gz\", \n                \"size\": 15938\n            }\n        ], \n        \"0.1.11\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-05-07T16:57:09\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/7d/a6/be5f3164ccac3db79077e54169bdac3e3c579a3f8a778a16a115a19130d0/play_scraper-0.1.11-py2.py3-none-any.whl\", \n                \"md5_digest\": \"738112d432a1c4fe32f450f12db88411\", \n                \"downloads\": 98, \n                \"filename\": \"play_scraper-0.1.11-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"7d/a6/be5f3164ccac3db79077e54169bdac3e3c579a3f8a778a16a115a19130d0/play_scraper-0.1.11-py2.py3-none-any.whl\", \n                \"size\": 18783\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-05-07T16:57:27\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/6d/0e/b44d9df4f6429062b4e13e7a71305a796fb7ae85a3ef415ae75d7779b6eb/play_scraper-0.1.11.tar.gz\", \n                \"md5_digest\": \"eb889d9e09b373dfdbd8b110774f7386\", \n                \"downloads\": 91, \n                \"filename\": \"play_scraper-0.1.11.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"6d/0e/b44d9df4f6429062b4e13e7a71305a796fb7ae85a3ef415ae75d7779b6eb/play_scraper-0.1.11.tar.gz\", \n                \"size\": 15838\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-05-07T16:57:09\", \n            \"comment_text\": \"\", \n            \"python_version\": \"py2.py3\", \n            \"url\": \"https://pypi.python.org/packages/7d/a6/be5f3164ccac3db79077e54169bdac3e3c579a3f8a778a16a115a19130d0/play_scraper-0.1.11-py2.py3-none-any.whl\", \n            \"md5_digest\": \"738112d432a1c4fe32f450f12db88411\", \n            \"downloads\": 98, \n            \"filename\": \"play_scraper-0.1.11-py2.py3-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"7d/a6/be5f3164ccac3db79077e54169bdac3e3c579a3f8a778a16a115a19130d0/play_scraper-0.1.11-py2.py3-none-any.whl\", \n            \"size\": 18783\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2016-05-07T16:57:27\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/6d/0e/b44d9df4f6429062b4e13e7a71305a796fb7ae85a3ef415ae75d7779b6eb/play_scraper-0.1.11.tar.gz\", \n            \"md5_digest\": \"eb889d9e09b373dfdbd8b110774f7386\", \n            \"downloads\": 91, \n            \"filename\": \"play_scraper-0.1.11.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"6d/0e/b44d9df4f6429062b4e13e7a71305a796fb7ae85a3ef415ae75d7779b6eb/play_scraper-0.1.11.tar.gz\", \n            \"size\": 15838\n        }\n    ]\n}"}}, "recorded_at": "2016-12-23T10:43:32"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://github.com/danieliu/play-scraper", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-XSS-Protection": ["1; mode=block"], "Server": ["GitHub.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "X-GitHub-Request-Id": ["54B1D78B:C3EB:8FE4339:585CFFD5"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Date": ["Fri, 23 Dec 2016 10:43:33 GMT"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Content-Type": ["text/html; charset=utf-8"], "X-Served-By": ["7d2a2d05162492046d9960cdbc326796"], "X-Frame-Options": ["deny"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "X-Content-Type-Options": ["nosniff"], "X-Request-Id": ["276d6f48377c9b04d4bf08083f5e8674"], "Vary": ["X-PJAX", "Accept-Encoding"], "Transfer-Encoding": ["chunked"], "X-Runtime": ["0.262560"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Tue, 23 Dec 2036 10:43:33 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiODNkZGE3NzdjMzhiNjIxYzc3MTI2OWNkMjU4ZTM1YmUiLCJzcHlfcmVwbyI6ImRhbmllbGl1L3BsYXktc2NyYXBlciIsInNweV9yZXBvX2F0IjoxNDgyNDg5ODEzLCJfY3NyZl90b2tlbiI6IkdZcmJJQVdDUXduZzF1N0pib1M0K3dOaWxkTEhNS2w1b3hVdGpjbVRHTjA9IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--7dcead2d393e292ac7c7e3c8211eab540c58f09d; path=/; secure; HttpOnly"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/danieliu/play-scraper", "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:43:33"}, {"request": {"method": "GET", "headers": {"Connection": ["keep-alive"], "User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"]}, "uri": "https://raw.githubusercontent.com/danieliu/play-scraper/master/CHANGELOG.md", "body": {"encoding": "utf-8", "string": ""}}, "response": {"headers": {"X-Frame-Options": ["deny"], "X-GitHub-Request-Id": ["C71B4C29:73BF:539A43E:585CFFD4"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-XSS-Protection": ["1; mode=block"], "Date": ["Fri, 23 Dec 2016 10:43:33 GMT"], "Source-Age": ["0"], "X-Cache-Hits": ["0"], "X-Served-By": ["cache-hhn1523-HHN"], "X-Fastly-Request-ID": ["1e322c016f51c9948ff426230aa48350b36fce16"], "X-Geo-Block-List": [""], "Strict-Transport-Security": ["max-age=31536000"], "Access-Control-Allow-Origin": ["*"], "Vary": ["Authorization,Accept-Encoding"], "X-Timer": ["S1482489813.839607,VS0,VE121"], "Content-Encoding": ["gzip"], "X-Cache": ["MISS"], "Accept-Ranges": ["bytes"], "Cache-Control": ["max-age=300"], "Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "ETag": ["\"a19e9e1d2b38a9e545e2ce03ddabb11e08872d32\""], "Content-Type": ["text/plain; charset=utf-8"], "Content-Length": ["796"], "X-Content-Type-Options": ["nosniff"], "Expires": ["Fri, 23 Dec 2016 10:48:33 GMT"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/danieliu/play-scraper/master/CHANGELOG.md", "body": {"base64_string": "H4sIAAAAAAAAA2VUXU/bQBB8z69YKQ+BioQkBGh5qVIICAkQomqlPqGzvbYPznfufYSkv767dyR26UsU23uzszOzN4TLWugKlakGg+FwCNPJbDKbXcB8OjsbT0/H07PB4BMsrchkDlLDZbAWtYefaJ00Ghr0ohBeQCk3PYTpDmExnp8zwqOVOYI2HsRaSJUphIMiIHgDuQna2y1YdJ6qPMG6r4cgdAEZeo8WiGKhpK7gTfoaWotji5V0/Em0rev6fum1jcQfDBTocitbhj3u/X+ufaMArTUd/hHgpJqkLgQMo9fQiEo06CZGS34YsQYFzSwVFkBgosWu/ede+wW3f8LGrKmQ5K2Yf250KSsXZ7PYKpHTx9hOB6UiDbQd3vlHvEdBMILpQ0m8C1yTcy3JQDbUpjiC4LhNKypW9hW1Y/OKgrp076hzhRtW3pG8VO8iWCtsPGyCB1OyGy0ZgRB1SrKBF1VP7bMevZPBvtPeLUIZ9c0aRbfSvI2xCBVqtELJP6wlKsy9sY4VzoSjuOXCFvRUmqjXXvV3oh2P0x6POfO4lhuqW5KD6RD8eLqLGLfLR7Cc9/20yWvKVJRxRyIW54ainnu1BW/FGlM9qeZrCjJufPpxMkvRYcGoXJIl2z2HlK+3GnXPLGyY034XBC1DN8yiN8ysE1WHJqOjyZigfMpQNPX9k5KN9JDXmL9G12n62yuaVjp0gJscY+wTl8V00XU86XWcxpRtKUz6BIJVSmYTlgonv4Px+Nyq4EiYpqUQZlJJv2W70h7Y4+Clcj0A2bTGer4a0KVltLiW+ObgwIqYvEPOIIs6JRzKiCh4xAejkeqv9orRIFLnKrAScYBOuG7JSkrHbtO66ebddLN4E30LFRG6gOXN6vlp+XCz4iyIJi1BiT6v06YqjgLfRTwhe369vL+9+0Wp9FgZu+1B/XetFAadHvkdae7Al2Yh10C+bTn8THy1vLpfkTeiaRWZFFq6SbG3YLOP3FMWyJcXQ6Te5f3XDp4i6Q8ndOI7FSlZym5v+mxZ+ZfgPN0bCEHL3BQ4+AstTRUvFAYAAA==", "encoding": "utf-8"}}, "recorded_at": "2016-12-23T10:43:33"}], "recorded_with": "betamax/0.8.0"}